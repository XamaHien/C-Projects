<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.2.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2015-06-13T20:46:12</timestamp>
        <product version="4.17.0.2685" user="Martin Dahl" serial="179599-EVA-08074580-1861A89F-DF09CF38-9322E5F3">Dotfuscator Professional Edition EVALUATION</product>
    </header>
    <mapping>
        <module>
            <name>GeneralToolkitLib.dll</name>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;version&gt;j__TPar</name>
                    <newname>eval_a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;capacity&gt;j__TPar</name>
                    <newname>eval_b</newname>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType0`2</name>
                <newname>eval_n</newname>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_capacity</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_version</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;capacity&gt;i__Field</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;version&gt;i__Field</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!1()</signature>
                        <name>capacity</name>
                        <newname>eval_b</newname>
                    </property>
                    <property>
                        <signature>!0()</signature>
                        <name>version</name>
                        <newname>eval_a</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;Index&gt;j__TPar</name>
                    <newname>eval_a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;Value&gt;j__TPar</name>
                    <newname>eval_b</newname>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType1`2</name>
                <newname>eval_o</newname>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Index</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Value</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Index&gt;i__Field</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;Value&gt;i__Field</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>Index</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>!1()</signature>
                        <name>Value</name>
                        <newname>b</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>&lt;Chr&gt;j__TPar</name>
                    <newname>eval_a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>&lt;Index&gt;j__TPar</name>
                    <newname>eval_b</newname>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType2`2</name>
                <newname>eval_p</newname>
                <methodlist>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Chr</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>get_Index</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Chr&gt;i__Field</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;Index&gt;i__Field</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>Chr</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>!1()</signature>
                        <name>Index</name>
                        <newname>b</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}</name>
                <newname>eval_m</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=1120</signature>
                        <name>$$method0x6000001-1</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=90</signature>
                        <name>$$method0x6000001-2</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=2560</signature>
                        <name>$$method0x6000001-3</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=3840</signature>
                        <name>$$method0x6000001-4</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=160</signature>
                        <name>$$method0x6000001-5</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=240</signature>
                        <name>$$method0x6000023-1</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=32</signature>
                        <name>$$method0x60003f0-1</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=32</signature>
                        <name>$$method0x60003f0-2</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=1024</signature>
                        <name>$$method0x60003f8-1</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=32</signature>
                        <name>$$method0x6000409-1</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=32</signature>
                        <name>$$method0x6000409-2</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=32</signature>
                        <name>$$method0x600040a-1</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=32</signature>
                        <name>$$method0x600040a-2</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_n</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=1024</name>
                <newname>eval_m/eval_h</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=1120</name>
                <newname>eval_m/eval_a</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=160</name>
                <newname>eval_m/eval_e</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=240</name>
                <newname>eval_m/eval_f</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=2560</name>
                <newname>eval_m/eval_c</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=32</name>
                <newname>eval_m/eval_g</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=3840</name>
                <newname>eval_m/eval_d</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{05B616D3-E22E-4B54-A03C-6F487687ADEA}/__StaticArrayInitTypeSize=90</name>
                <newname>eval_m/eval_b</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;(char, int32)</signature>
                        <name>&lt;BinaryStringToBitBlockList&gt;b__1d</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>int32(&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;)</signature>
                        <name>&lt;BinaryStringToBitBlockList&gt;b__1e</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>string(System.Linq.IGrouping`2&lt;int32,&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;&gt;)</signature>
                        <name>&lt;BinaryStringToBitBlockList&gt;b__1f</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;)</signature>
                        <name>&lt;BinaryStringToBitBlockList&gt;b__20</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem)</signature>
                        <name>&lt;CalculateECCWords&gt;b__a</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(&lt;&gt;f__AnonymousType2`2&lt;char,int32&gt;)</signature>
                        <name>&lt;CreateAlphanumEncDict&gt;b__43</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType2`2&lt;char,int32&gt;(char, int32)</signature>
                        <name>&lt;CreateAlphanumEncDict&gt;b__44</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;System.Drawing.Point&gt;(GeneralToolkitLib.Barcode.QRCodeGenerator/AlignmentPattern)</signature>
                        <name>&lt;CreateQrCode&gt;b__4</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog)</signature>
                        <name>&lt;GetAlphaExpFromIntVal&gt;b__3f</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;GetEncodingFromPlaintext&gt;b__15</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;GetEncodingFromPlaintext&gt;b__16</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog)</signature>
                        <name>&lt;GetIntValFromAlphaExp&gt;b__3a</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>int32(&lt;&gt;f__AnonymousType0`2&lt;int32,int32&gt;)</signature>
                        <name>&lt;GetVersion&gt;b__11</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem)</signature>
                        <name>&lt;MultiplyAlphaPolynoms&gt;b__28</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Linq.IGrouping`2&lt;int32,GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem&gt;)</signature>
                        <name>&lt;MultiplyAlphaPolynoms&gt;b__29</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>int32(System.Linq.IGrouping`2&lt;int32,GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem&gt;)</signature>
                        <name>&lt;MultiplyAlphaPolynoms&gt;b__2a</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(int32, GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem)</signature>
                        <name>&lt;MultiplyAlphaPolynoms&gt;b__2c</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem)</signature>
                        <name>&lt;MultiplyAlphaPolynoms&gt;b__2e</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(string, unsigned int8)</signature>
                        <name>&lt;PlainTextToBinaryByte&gt;b__25</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>BinToDec</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(string)</signature>
                        <name>BinaryStringToBitBlockList</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(string, GeneralToolkitLib.Barcode.QRCodeGenerator/ECCInfo)</signature>
                        <name>CalculateECCWords</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom(int32)</signature>
                        <name>CalculateGeneratorPolynom</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom(string)</signature>
                        <name>CalculateMessagePolynom</name>
                        <newname>eval_g</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom(GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom)</signature>
                        <name>ConvertToAlphaNotation</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom(GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom)</signature>
                        <name>ConvertToDecNotation</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateAlignmentPatternTable</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateAlphanumEncDict</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateAntilogTable</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateCapacityECCTable</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateCapacityTable</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode(string, GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel)</signature>
                        <name>CreateQrCode</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>DecToBin</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>string(int32, int32)</signature>
                        <name>DecToBin</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>GetAlphaExpFromIntVal</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>int32(int32, GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode)</signature>
                        <name>GetCountIndicatorLength</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode(string)</signature>
                        <name>GetEncodingFromPlaintext</name>
                        <newname>eval_h</newname>
                    </method>
                    <method>
                        <signature>string(GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel, int32)</signature>
                        <name>GetFormatString</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>GetIntValFromAlphaExp</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>int32(string, GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode, GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel)</signature>
                        <name>GetVersion</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetVersionString</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsValidISO</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom(GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom, GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom)</signature>
                        <name>MultiplyAlphaPolynoms</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom(GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom, GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem, int32)</signature>
                        <name>MultiplyGeneratorPolynomByLeadterm</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(string, GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode)</signature>
                        <name>PlainTextToBinary</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>PlainTextToBinaryAlphanumeric</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>PlainTextToBinaryByte</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>PlainTextToBinaryNumeric</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>ShrinkAlphaExp</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom(GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom, GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom)</signature>
                        <name>XORPolynoms</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType0`2&lt;int32,int32&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate12</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;char,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate17</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;char,int32,&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate21</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate22</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Linq.IGrouping`2&lt;int32,&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;&gt;,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate23</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;&lt;&gt;f__AnonymousType1`2&lt;int32,char&gt;,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate24</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2f</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Linq.IGrouping`2&lt;int32,GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem&gt;,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate30</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Linq.IGrouping`2&lt;int32,GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate31</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate33</name>
                        <newname>eval_u</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3b</name>
                        <newname>eval_v</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate40</name>
                        <newname>eval_w</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;char,int32,&lt;&gt;f__AnonymousType2`2&lt;char,int32&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate45</name>
                        <newname>eval_x</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/AlignmentPattern,System.Collections.Generic.List`1&lt;System.Drawing.Point&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>alignmentPatternBaseValues</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/AlignmentPattern&gt;</signature>
                        <name>alignmentPatternTable</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;char,int32&gt;</signature>
                        <name>alphanumEncDict</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>alphanumEncTable</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>capacityBaseValues</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>capacityECCBaseValues</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/ECCInfo&gt;</signature>
                        <name>capacityECCTable</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfo&gt;</signature>
                        <name>capacityTable</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog&gt;</signature>
                        <name>galoisField</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_y</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>remainderBits</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/&lt;&gt;c__DisplayClass13</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_l</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfoDetails)</signature>
                        <name>&lt;GetVersion&gt;b__10</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfo)</signature>
                        <name>&lt;GetVersion&gt;b__d</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfoDetails)</signature>
                        <name>&lt;GetVersion&gt;b__e</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType0`2&lt;int32,int32&gt;(GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfo)</signature>
                        <name>&lt;GetVersion&gt;b__f</name>
                        <newname>eval_e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>eccLevel</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode</signature>
                        <name>encMode</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>plainText</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/&lt;&gt;c__DisplayClass34</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem)</signature>
                        <name>&lt;MultiplyAlphaPolynoms&gt;b__2d</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;int32&gt;</signature>
                        <name>toGlue</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/&lt;&gt;c__DisplayClass37</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_n</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem)</signature>
                        <name>&lt;MultiplyAlphaPolynoms&gt;b__2b</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/&lt;&gt;c__DisplayClass34</signature>
                        <name>CS$&lt;&gt;8__locals35</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>exponent</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/&lt;&gt;c__DisplayClass3c</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_o</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog)</signature>
                        <name>&lt;GetIntValFromAlphaExp&gt;b__39</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>exp</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/&lt;&gt;c__DisplayClass41</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_p</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog)</signature>
                        <name>&lt;GetAlphaExpFromIntVal&gt;b__3e</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>intVal</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/&lt;&gt;c__DisplayClass6</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_k</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/ECCInfo)</signature>
                        <name>&lt;CreateQrCode&gt;b__2</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Barcode.QRCodeGenerator/AlignmentPattern)</signature>
                        <name>&lt;CreateQrCode&gt;b__3</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>eccLevel</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>version</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/AlignmentPattern</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.Drawing.Point&gt;</signature>
                        <name>PatternPositions</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Version</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/Antilog</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_b</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>ExponentAlpha</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IntegerValue</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/CodewordBlock</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_c</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>BitString</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BlockNumber</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>CodeWords</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>ECCWords</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GroupNumber</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCInfo</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_d</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>BlocksInGroup1</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BlocksInGroup2</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CodewordsInGroup1</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CodewordsInGroup2</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ECCPerBlock</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>ErrorCorrectionLevel</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TotalDataCodewords</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Version</name>
                        <newname>eval_h</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>H</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>L</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>M</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>Q</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_e</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode</signature>
                        <name>Alphanumeric</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode</signature>
                        <name>Byte</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode</signature>
                        <name>ECI</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode</signature>
                        <name>Kanji</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode</signature>
                        <name>Numeric</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/ModulePlacer</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_f</newname>
                <methodlist>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;)</signature>
                        <name>AddQuietZone</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Drawing.Rectangle, System.Drawing.Rectangle)</signature>
                        <name>Intersects</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Drawing.Rectangle, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;)</signature>
                        <name>IsBlocked</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, int32, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>MaskCode</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, System.Collections.Generic.List`1&lt;System.Drawing.Point&gt;, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>PlaceAlignmentPatterns</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, int32, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>PlaceDarkModule</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, string, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>PlaceDataWords</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>PlaceFinderPatterns</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, string)</signature>
                        <name>PlaceFormat</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>PlaceTimingPatterns</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;, string)</signature>
                        <name>PlaceVersion</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(int32, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>ReserveSeperatorAreas</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32, System.Collections.Generic.List`1&lt;System.Drawing.Rectangle&gt;&amp;)</signature>
                        <name>ReserveVersionAreas</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/ModulePlacer/&lt;&gt;c__DisplayClass57</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_f/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;MaskCode&gt;b__56</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>patternName</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/ModulePlacer/&lt;&gt;c__DisplayClass5a</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_f/eval_c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>&lt;PlaceDataWords&gt;b__59</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Queue`1&lt;bool&gt;</signature>
                        <name>datawords</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/ModulePlacer/MaskPattern</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_f/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>int32(GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode&amp;)</signature>
                        <name>Score</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem&gt;()</signature>
                        <name>get_PolyItems</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem&gt;)</signature>
                        <name>set_PolyItems</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem&gt;</signature>
                        <name>&lt;PolyItems&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/Polynom/&lt;&gt;c__DisplayClass5d</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_g/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem)</signature>
                        <name>&lt;ToString&gt;b__5c</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>sb</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/PolynomItem</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_h</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Coefficient</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Exponent</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/QRCode</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Bitmap(int32)</signature>
                        <name>GetGraphic</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>ModulesPerSideFromVersion</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;System.Collections.BitArray&gt;()</signature>
                        <name>get_ModuleMatrix</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;System.Collections.BitArray&gt;)</signature>
                        <name>set_ModuleMatrix</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.Collections.BitArray&gt;</signature>
                        <name>&lt;ModuleMatrix&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>version</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;System.Collections.BitArray&gt;()</signature>
                        <name>ModuleMatrix</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfo</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_i</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfoDetails&gt;</signature>
                        <name>Details</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Version</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Barcode.QRCodeGenerator/VersionInfoDetails</name>
                <newname>GeneralToolkitLib.Barcode.QRCodeGenerator/eval_j</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;GeneralToolkitLib.Barcode.QRCodeGenerator/EncodingMode,int32&gt;</signature>
                        <name>CapacityDict</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator/ECCLevel</signature>
                        <name>ErrorCorrectionLevel</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation</name>
                <methodlist>
                    <method>
                        <signature>void(System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;, GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation/CodingOperations)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;, GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation/CodingOperations, int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64, int64)</signature>
                        <name>SetProgress</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation/CodingOperations</signature>
                        <name>_codingOperation</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>_originalSize</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;</signature>
                        <name>_progress</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation/CodingOperations</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation/CodingOperations</signature>
                        <name>Decoding</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation/CodingOperations</signature>
                        <name>Encoding</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.CoderPropID</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>Algorithm</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>BlockSize</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>DefaultProp</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>DictionarySize</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>EndMarker</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>LitContextBits</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>LitPosBits</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>MatchFinder</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>MatchFinderCycles</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>NumFastBytes</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>NumPasses</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>NumThreads</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>Order</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>PosStateBits</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.CoderPropID</signature>
                        <name>UsedMemorySize</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.CRC</name>
                <newname>eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>Table</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.CommandForm</name>
                <methodlist>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>IDString</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>PostStringMode</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.InBuffer</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int64()</signature>
                        <name>GetProcessedSize</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadBlock</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>ReadByte</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>ReadByte</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>m_Buffer</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_BufferSize</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_Limit</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_Pos</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int64</signature>
                        <name>m_ProcessedSize</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>m_Stream</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_StreamWasExhausted</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_h</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.OutBuffer</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseStream</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FlushData</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FlushStream</name>
                    </method>
                    <method>
                        <signature>unsigned int64()</signature>
                        <name>GetProcessedSize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>SetStream</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteByte</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>m_Buffer</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_BufferSize</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_Pos</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int64</signature>
                        <name>m_ProcessedSize</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>m_Stream</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.Parser</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchResult(int32)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchResult[]</signature>
                        <name>_switches</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchResult(int32)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.SwitchForm</name>
                <methodlist>
                    <method>
                        <signature>void(string, GeneralToolkitLib.Compression.SevenZip.Common.SwitchType, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, GeneralToolkitLib.Compression.SevenZip.Common.SwitchType, bool, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, GeneralToolkitLib.Compression.SevenZip.Common.SwitchType, bool, int32, int32, string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>IDString</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MaxLen</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MinLen</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Multi</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PostCharSet</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchType</signature>
                        <name>Type</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.SwitchResult</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>PostCharIndex</name>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>PostStrings</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>ThereIs</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>WithMinus</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Common.SwitchType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchType</signature>
                        <name>LimitedPostString</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchType</signature>
                        <name>PostChar</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchType</signature>
                        <name>PostMinus</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchType</signature>
                        <name>Simple</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Common.SwitchType</signature>
                        <name>UnLimitedPostString</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZ.BinTree</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, unsigned int32, unsigned int32, unsigned int32)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>unsigned int8(int32)</signature>
                        <name>GetIndexByte</name>
                    </method>
                    <method>
                        <signature>unsigned int32(int32, unsigned int32, unsigned int32)</signature>
                        <name>GetMatchLen</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32[])</signature>
                        <name>GetMatches</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>GetNumAvailableBytes</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MovePos</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Normalize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32[], unsigned int32, unsigned int32)</signature>
                        <name>NormalizeLinks</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>SetCutValue</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>SetStream</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>SetType</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>Skip</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>HASH_ARRAY</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_cutValue</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_cyclicBufferPos</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_cyclicBufferSize</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_hash</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_hashMask</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_hashSizeSum</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_matchMaxLen</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_son</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>kFixHashSize</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>kMinMatchCheck</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>kNumHashDirectBytes</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_m</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZ.IInWindowStream</name>
                <newname>eval_c</newname>
                <methodlist>
                    <method>
                        <signature>unsigned int8(int32)</signature>
                        <name>GetIndexByte</name>
                    </method>
                    <method>
                        <signature>unsigned int32(int32, unsigned int32, unsigned int32)</signature>
                        <name>GetMatchLen</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>GetNumAvailableBytes</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>SetStream</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZ.IMatchFinder</name>
                <newname>eval_d</newname>
                <methodlist>
                    <method>
                        <signature>void(unsigned int32, unsigned int32, unsigned int32, unsigned int32)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32[])</signature>
                        <name>GetMatches</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>Skip</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZ.InWindow</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, unsigned int32, unsigned int32)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Free</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8(int32)</signature>
                        <name>GetIndexByte</name>
                    </method>
                    <method>
                        <signature>unsigned int32(int32, unsigned int32, unsigned int32)</signature>
                        <name>GetMatchLen</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>GetNumAvailableBytes</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MoveBlock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MovePos</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReadBlock</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ReduceOffsets</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>SetStream</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_blockSize</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_bufferBase</name>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_bufferOffset</name>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_keepSizeAfter</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_keepSizeBefore</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_pointerToLastSafePosition</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_pos</name>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_posLimit</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_stream</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_streamEndWasReached</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_streamPos</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZ.OutWindow</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, unsigned int32)</signature>
                        <name>CopyBlock</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>unsigned int8(unsigned int32)</signature>
                        <name>GetByte</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, bool)</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>PutByte</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.Stream)</signature>
                        <name>Train</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>TrainSize</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_buffer</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_pos</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_stream</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_streamPos</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_windowSize</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Base</name>
                <newname>eval_b</newname>
                <methodlist>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>GetLenToPosState</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Base/State</name>
                <newname>eval_b/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsCharState</name>
                        <newname>eval_g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateChar</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateMatch</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateRep</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateShortRep</name>
                        <newname>eval_f</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Index</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream, int64, int64, GeneralToolkitLib.Compression.SevenZip.ICodeProgress)</signature>
                        <name>Code</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream)</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>SetDecoderProperties</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>SetDictionarySize</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>SetLiteralProperties</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>SetPosBitsProperties</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.IO.Stream)</signature>
                        <name>Train</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_solid</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_DictionarySize</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_DictionarySizeCheck</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_IsMatchDecoders</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_IsRep0LongDecoders</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_IsRepDecoders</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_IsRepG0Decoders</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_IsRepG1Decoders</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_IsRepG2Decoders</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/LenDecoder</signature>
                        <name>m_LenDecoder</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/LiteralDecoder</signature>
                        <name>m_LiteralDecoder</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZ.OutWindow</signature>
                        <name>m_OutWindow</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeDecoder</signature>
                        <name>m_PosAlignDecoder</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_PosDecoders</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeDecoder[]</signature>
                        <name>m_PosSlotDecoder</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_PosStateMask</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder</signature>
                        <name>m_RangeDecoder</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/LenDecoder</signature>
                        <name>m_RepLenDecoder</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_s</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/LenDecoder</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>Create</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder, unsigned int32)</signature>
                        <name>Decode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder</signature>
                        <name>m_Choice</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder</signature>
                        <name>m_Choice2</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeDecoder</signature>
                        <name>m_HighCoder</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeDecoder[]</signature>
                        <name>m_LowCoder</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeDecoder[]</signature>
                        <name>m_MidCoder</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_NumPosStates</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/LiteralDecoder</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>Create</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder, unsigned int32, unsigned int8)</signature>
                        <name>DecodeNormal</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder, unsigned int32, unsigned int8, unsigned int8)</signature>
                        <name>DecodeWithMatchByte</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32, unsigned int8)</signature>
                        <name>GetState</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/LiteralDecoder/Decoder2[]</signature>
                        <name>m_Coders</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_NumPosBits</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_NumPrevBits</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_PosMask</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/LiteralDecoder/Decoder2</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Decoder/eval_b/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>Create</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder)</signature>
                        <name>DecodeNormal</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder, unsigned int8)</signature>
                        <name>DecodeWithMatchByte</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>m_Decoders</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32&amp;, unsigned int32)</signature>
                        <name>Backward</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BaseInit</name>
                        <newname>eval_h</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream, int64, int64, GeneralToolkitLib.Compression.SevenZip.ICodeProgress)</signature>
                        <name>Code</name>
                    </method>
                    <method>
                        <signature>void(int64&amp;, int64&amp;, bool&amp;)</signature>
                        <name>CodeOneBlock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Create</name>
                        <newname>eval_g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FillAlignPrices</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FillDistancesPrices</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>FindMatchFinder</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>Flush</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32, unsigned int32&amp;)</signature>
                        <name>GetOptimum</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32, unsigned int32, unsigned int32)</signature>
                        <name>GetPosLenPrice</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>GetPosSlot</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>GetPosSlot2</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32, GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Base/State, unsigned int32)</signature>
                        <name>GetPureRepPrice</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Base/State, unsigned int32)</signature>
                        <name>GetRepLen1Price</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32, unsigned int32, GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Base/State, unsigned int32)</signature>
                        <name>GetRepPrice</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>MovePos</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32&amp;, unsigned int32&amp;)</signature>
                        <name>ReadMatchDistances</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseMFStream</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseOutStream</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStreams</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.CoderPropID[], object[])</signature>
                        <name>SetCoderProperties</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>SetOutStream</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream)</signature>
                        <name>SetStreams</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>SetWriteEndMarkerMode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>WriteCoderProperties</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>WriteEndMarker</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_additionalOffset</name>
                        <newname>eval_y</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_alignPriceCount</name>
                        <newname>eval_z</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_alignPrices</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_dictionarySize</name>
                        <newname>eval_aa</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_dictionarySizePrev</name>
                        <newname>eval_ab</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_distTableSize</name>
                        <newname>eval_ac</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_distancesPrices</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_finished</name>
                        <newname>eval_ad</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>_inStream</name>
                        <newname>eval_ae</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>_isMatch</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>_isRep</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>_isRep0Long</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>_isRepG0</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>_isRepG1</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>_isRepG2</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LenPriceTableEncoder</signature>
                        <name>_lenEncoder</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LiteralEncoder</signature>
                        <name>_literalEncoder</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_longestMatchLength</name>
                        <newname>eval_af</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_longestMatchWasFound</name>
                        <newname>eval_ag</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_matchDistances</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZ.IMatchFinder</signature>
                        <name>_matchFinder</name>
                        <newname>eval_ah</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/EMatchFinderType</signature>
                        <name>_matchFinderType</name>
                        <newname>eval_ai</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_matchPriceCount</name>
                        <newname>eval_aj</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_needReleaseMFStream</name>
                        <newname>eval_ak</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_numDistancePairs</name>
                        <newname>eval_al</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_numFastBytes</name>
                        <newname>eval_am</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_numFastBytesPrev</name>
                        <newname>eval_an</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_numLiteralContextBits</name>
                        <newname>eval_ao</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_numLiteralPosStateBits</name>
                        <newname>eval_ap</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/Optimal[]</signature>
                        <name>_optimum</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_optimumCurrentIndex</name>
                        <newname>eval_aq</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_optimumEndIndex</name>
                        <newname>eval_ar</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeEncoder</signature>
                        <name>_posAlignEncoder</name>
                        <newname>eval_as</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>_posEncoders</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeEncoder[]</signature>
                        <name>_posSlotEncoder</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_posSlotPrices</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_posStateBits</name>
                        <newname>eval_at</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_posStateMask</name>
                        <newname>eval_au</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>_previousByte</name>
                        <newname>eval_av</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder</signature>
                        <name>_rangeEncoder</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_repDistances</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LenPriceTableEncoder</signature>
                        <name>_repMatchLenEncoder</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Base/State</signature>
                        <name>_state</name>
                        <newname>aw</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_writeEndMark</name>
                        <newname>eval_ax</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>g_FastPos</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>kMatchFinderIDs</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>nowPos64</name>
                        <newname>eval_ay</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>properties</name>
                        <newname>eval_u</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_az</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>repLens</name>
                        <newname>eval_v</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>reps</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>tempPrices</name>
                        <newname>eval_x</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/CodeProgress</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>Finished</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>ProcessedInSize</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>ProcessedOutSize</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/EMatchFinderType</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/eval_a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/EMatchFinderType</signature>
                        <name>BT2</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/EMatchFinderType</signature>
                        <name>BT4</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LenEncoder</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, unsigned int32, unsigned int32)</signature>
                        <name>Encode</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>Init</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32, unsigned int32, unsigned int32[], unsigned int32)</signature>
                        <name>SetPrices</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder</signature>
                        <name>_choice</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder</signature>
                        <name>_choice2</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeEncoder</signature>
                        <name>_highCoder</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeEncoder[]</signature>
                        <name>_lowCoder</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeEncoder[]</signature>
                        <name>_midCoder</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LenPriceTableEncoder</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/eval_c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, unsigned int32, unsigned int32)</signature>
                        <name>Encode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32, unsigned int32)</signature>
                        <name>GetPrice</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>SetTableSize</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>UpdateTable</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>UpdateTables</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_counters</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>_prices</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_tableSize</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LiteralEncoder</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/eval_d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>Create</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LiteralEncoder/Encoder2(unsigned int32, unsigned int8)</signature>
                        <name>GetSubCoder</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LiteralEncoder/Encoder2[]</signature>
                        <name>m_Coders</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_NumPosBits</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_NumPrevBits</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>m_PosMask</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/LiteralEncoder/Encoder2</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/eval_d/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>Create</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, unsigned int8)</signature>
                        <name>Encode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, unsigned int8, unsigned int8)</signature>
                        <name>EncodeMatched</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(bool, unsigned int8, unsigned int8)</signature>
                        <name>GetPrice</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>m_Encoders</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/Optimal</name>
                <newname>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Encoder/eval_e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsShortRep</name>
                        <newname>eval_l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MakeAsChar</name>
                        <newname>eval_j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MakeAsShortRep</name>
                        <newname>eval_k</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>BackPrev</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>BackPrev2</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Backs0</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Backs1</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Backs2</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Backs3</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>PosPrev</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>PosPrev2</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Prev1IsChar</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Prev2</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Price</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.LZMA.Base/State</signature>
                        <name>State</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_m</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder</name>
                <newname>eval_e</newname>
                <methodlist>
                    <method>
                        <signature>unsigned int32(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder)</signature>
                        <name>Decode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, unsigned int32)</signature>
                        <name>UpdateModel</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Prob</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>kBitModelTotal</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>kNumBitModelTotalBits</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>kNumMoveBits</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder</name>
                <newname>eval_i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, unsigned int32)</signature>
                        <name>Encode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>GetPrice</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>GetPrice0</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>GetPrice1</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>UpdateModel</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Prob</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>ProbPrices</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>kBitModelTotal</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>kNumBitModelTotalBits</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>kNumBitPriceShiftBits</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>kNumMoveBits</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>kNumMoveReducingBits</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeDecoder</name>
                <newname>eval_f</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int32(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder)</signature>
                        <name>Decode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[], unsigned int32, GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder, int32)</signature>
                        <name>ReverseDecode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder)</signature>
                        <name>ReverseDecode</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitDecoder[]</signature>
                        <name>Models</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NumBitLevels</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitTreeEncoder</name>
                <newname>eval_j</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, unsigned int32)</signature>
                        <name>Encode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>GetPrice</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[], unsigned int32, GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, int32, unsigned int32)</signature>
                        <name>ReverseEncode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder, unsigned int32)</signature>
                        <name>ReverseEncode</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[], unsigned int32, int32, unsigned int32)</signature>
                        <name>ReverseGetPrice</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>ReverseGetPrice</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.BitEncoder[]</signature>
                        <name>Models</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NumBitLevels</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Decoder</name>
                <newname>eval_g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int32(int32)</signature>
                        <name>DecodeDirectBits</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>Init</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Code</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Range</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>Stream</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.Compress.RangeCoder.Encoder</name>
                <newname>eval_h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, int32)</signature>
                        <name>EncodeDirectBits</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FlushData</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FlushStream</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>GetProcessedSizeAdd</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseStream</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>SetStream</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ShiftLow</name>
                        <newname>eval_e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int64</signature>
                        <name>Low</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Range</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>StartPosition</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>Stream</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>_cache</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>_cacheSize</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.DataErrorException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.ICodeProgress</name>
                <methodlist>
                    <method>
                        <signature>void(int64, int64)</signature>
                        <name>SetProgress</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.ICoder</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream, int64, int64, GeneralToolkitLib.Compression.SevenZip.ICodeProgress)</signature>
                        <name>Code</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.ISetCoderProperties</name>
                <methodlist>
                    <method>
                        <signature>void(GeneralToolkitLib.Compression.SevenZip.CoderPropID[], object[])</signature>
                        <name>SetCoderProperties</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.ISetDecoderProperties</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>SetDecoderProperties</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.IWriteCoderProperties</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>WriteCoderProperties</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Compression.SevenZip.InvalidParamException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.ConfigHelper.GlobalSettings</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>GetApplicationLogFilePath</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetAssemblyPath</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetHashtableFilename</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetUserDataDirectoryPath</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInitialized</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_isInitialized</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_logFileName</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_userDataPath</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsInitialized</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.ConfigHelper.IniConfigFile</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigItemCollection()</signature>
                        <name>get_ConfigItems</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,GeneralToolkitLib.ConfigHelper.IniConfigFileSection&gt;()</signature>
                        <name>get_ConfigSections</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.ConfigHelper.IniConfigItemCollection)</signature>
                        <name>set_ConfigItems</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,GeneralToolkitLib.ConfigHelper.IniConfigFileSection&gt;)</signature>
                        <name>set_ConfigSections</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigItemCollection</signature>
                        <name>&lt;ConfigItems&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,GeneralToolkitLib.ConfigHelper.IniConfigFileSection&gt;</signature>
                        <name>&lt;ConfigSections&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigItemCollection()</signature>
                        <name>ConfigItems</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,GeneralToolkitLib.ConfigHelper.IniConfigFileSection&gt;()</signature>
                        <name>ConfigSections</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.ConfigHelper.IniConfigFileManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>LoadConfigFile</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SaveConfigFile</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigFile()</signature>
                        <name>get_ConfigurationData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigFile</signature>
                        <name>_iniFileData</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigFile()</signature>
                        <name>ConfigurationData</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.ConfigHelper.IniConfigFileSection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigItemCollection()</signature>
                        <name>get_ConfigItems</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.ConfigHelper.IniConfigItemCollection)</signature>
                        <name>set_ConfigItems</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigItemCollection</signature>
                        <name>&lt;ConfigItems&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigItemCollection()</signature>
                        <name>ConfigItems</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.ConfigHelper.IniConfigItemCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.Base32</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ToBase32String</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.Base32Encoding</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(char)</signature>
                        <name>CharToValue</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>ToBytes</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>char(unsigned int8)</signature>
                        <name>ValueToChar</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.GeneralConverters</name>
                <methodlist>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;HexStringToByteArray&gt;b__0</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ByteArrayToBase64</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ByteArrayToHexString</name>
                    </method>
                    <method>
                        <signature>string(System.IO.FileAttributes)</signature>
                        <name>FileAttributesToString</name>
                    </method>
                    <method>
                        <signature>string(int64)</signature>
                        <name>FormatFileSizeToString</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GeneratePasswordDerivedString</name>
                    </method>
                    <method>
                        <signature>string(string, bool)</signature>
                        <name>GetDirectoryNameFromPath</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetFileNameFromPath</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetRandomHexValue</name>
                    </method>
                    <method>
                        <signature>int32(System.DateTime)</signature>
                        <name>GetSecondsFromDateTime</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetVolumeLabelFromPath</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>HexStringToByteArray</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>StringToByteArray</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;int32,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.GeneralConverters/&lt;&gt;c__DisplayClass3</name>
                <newname>GeneralToolkitLib.Converters.GeneralConverters/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8(int32)</signature>
                        <name>&lt;HexStringToByteArray&gt;b__1</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>hex</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>string(int64)</signature>
                        <name>ConvertFileSizeToString</name>
                    </method>
                    <method>
                        <signature>string(int64, int32)</signature>
                        <name>ConvertFileSizeToString</name>
                    </method>
                    <method>
                        <signature>string(int64, unsigned int16, GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/OffsetRange[])</signature>
                        <name>ConvertFileSizeToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string[]</signature>
                        <name>FileSizeTypesStrings</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/FileSizeSteps</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/FileSizeSteps</signature>
                        <name>Byte</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/FileSizeSteps</signature>
                        <name>GigaByte</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/FileSizeSteps</signature>
                        <name>KiloByte</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/FileSizeSteps</signature>
                        <name>MegaByte</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/FileSizeSteps</signature>
                        <name>PetaByte</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/OffsetRange</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Converters.GeneralConverters/FileSizeToStringFormater/FileSizeSteps</signature>
                        <name>FileSizeStep</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>Max</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.GeneralConverters/StaticLongFileSizes</name>
                <newname>GeneralToolkitLib.Converters.GeneralConverters/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string[]</signature>
                        <name>FileSizeTypesStrings</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Converters.StringManipulation</name>
                <methodlist>
                    <method>
                        <signature>string(string)</signature>
                        <name>Reverse</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>ReverseBySeparator</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReverseXor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.DataTypes.OpenFileEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, GeneralToolkitLib.DataTypes.OutcomeEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, GeneralToolkitLib.DataTypes.OutcomeEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.DataTypes.OutcomeEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Successful</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Successful</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Successful&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.DataTypes.OutcomeEventArgs</signature>
                        <name>Failure</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.DataTypes.OutcomeEventArgs</signature>
                        <name>Success</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Successful</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.DataTypes.SaveFileEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, GeneralToolkitLib.DataTypes.OutcomeEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, GeneralToolkitLib.DataTypes.OutcomeEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.DataTypes.Sequence</name>
                <methodlist>
                    <method>
                        <signature>int32(object, object)</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>int32(object, object, object)</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>int32(object[])</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.DataTypes.UInt128</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.Numerics.BigInteger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64, unsigned int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>BitwiseAnd</name>
                    </method>
                    <method>
                        <signature>int32(GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, int32)</signature>
                        <name>LeftShift</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(string)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(string, System.Globalization.NumberStyles)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(string, System.Globalization.NumberStyles, System.IFormatProvider)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(string, System.IFormatProvider)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, int32)</signature>
                        <name>RightShift</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>Subtract</name>
                    </method>
                    <method>
                        <signature>System.Numerics.BigInteger()</signature>
                        <name>ToBigInteger</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.IFormatProvider)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(string, System.IFormatProvider)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>bool(string, GeneralToolkitLib.DataTypes.UInt128&amp;)</signature>
                        <name>TryParse</name>
                    </method>
                    <method>
                        <signature>bool(string, System.Globalization.NumberStyles, System.IFormatProvider, GeneralToolkitLib.DataTypes.UInt128&amp;)</signature>
                        <name>TryParse</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_Addition</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_BitwiseAnd</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_Equality</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(System.Numerics.BigInteger)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>unsigned int64(GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_Explicit</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_GreaterThan</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_GreaterThanOrEqual</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(unsigned int64)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>System.Numerics.BigInteger(GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_Inequality</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, int32)</signature>
                        <name>op_LeftShift</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_LessThan</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_LessThanOrEqual</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, int32)</signature>
                        <name>op_RightShift</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.DataTypes.UInt128(GeneralToolkitLib.DataTypes.UInt128, GeneralToolkitLib.DataTypes.UInt128)</signature>
                        <name>op_Subtraction</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.DataTypes.UInt128</signature>
                        <name>MaxValue</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.DataTypes.UInt128</signature>
                        <name>MinValue</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.DataTypes.UInt128</signature>
                        <name>One</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SizeOf</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.DataTypes.UInt128</signature>
                        <name>Zero</name>
                    </field>
                    <field>
                        <signature>unsigned int64</signature>
                        <name>_leastSignificant</name>
                    </field>
                    <field>
                        <signature>unsigned int64</signature>
                        <name>_mostSignificant</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.CryptoProgress</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Encryption.CryptoProgressHandler)</signature>
                        <name>Report</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;</signature>
                        <name>_storageManagerAsyncExProgres</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.CryptoProgressHandler</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_EncodedBytes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_TotalBytes</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_EncodedBytes</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Text</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_TotalBytes</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;EncodedBytes&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Text&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;TotalBytes&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int64()</signature>
                        <name>EncodedBytes</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Text</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>TotalBytes</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.EncryptionManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[]&amp;)</signature>
                        <name>DecodeString</name>
                    </method>
                    <method>
                        <signature>System.IO.MemoryStream(string, string, GeneralToolkitLib.Encryption.CryptoProgress)</signature>
                        <name>DecryptFileToMemoryStream</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;System.IO.MemoryStream&gt;(string, string, GeneralToolkitLib.Encryption.CryptoProgress)</signature>
                        <name>DecryptFileToMemoryStreamAsync</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[]&amp;, string)</signature>
                        <name>EncodeString</name>
                    </method>
                    <method>
                        <signature>bool(string, System.IO.MemoryStream, string, GeneralToolkitLib.Encryption.CryptoProgress)</signature>
                        <name>EncryptAndSaveFile</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;bool&gt;(string, System.IO.MemoryStream, string, GeneralToolkitLib.Encryption.CryptoProgress)</signature>
                        <name>EncryptAndSaveFileAsync</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](object, string)</signature>
                        <name>EncryptObject</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>GetDerivedPassword</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>SALT</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>SALT2</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.EncryptionManager/&lt;&gt;c__DisplayClass1</name>
                <newname>GeneralToolkitLib.Encryption.EncryptionManager/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>&lt;EncryptAndSaveFileAsync&gt;b__0</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.EncryptionManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>filePath</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>ms</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>passwordString</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.CryptoProgress</signature>
                        <name>progress</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.EncryptionManager/&lt;&gt;c__DisplayClassa</name>
                <newname>GeneralToolkitLib.Encryption.EncryptionManager/eval_c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.MemoryStream()</signature>
                        <name>&lt;DecryptFileToMemoryStreamAsync&gt;b__9</name>
                        <newname>eval_e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.EncryptionManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>filePath</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>passwordString</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.CryptoProgress</signature>
                        <name>progress</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.EncryptionManager/&lt;DecryptFileToMemoryStreamAsync&gt;d__c</name>
                <newname>GeneralToolkitLib.Encryption.EncryptionManager/eval_d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>MoveNext</name>
                        <newname>eval_i</newname>
                    </method>
                    <method>
                        <signature>void(System.Runtime.CompilerServices.IAsyncStateMachine)</signature>
                        <name>SetStateMachine</name>
                        <newname>eval_i</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.EncryptionManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;System.IO.MemoryStream&gt;</signature>
                        <name>&lt;&gt;t__builder</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;t__stack</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.TaskAwaiter`1&lt;System.IO.MemoryStream&gt;</signature>
                        <name>&lt;&gt;u__$awaitere</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>&lt;result&gt;5__d</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.EncryptionManager/&lt;&gt;c__DisplayClassa</signature>
                        <name>CS$&lt;&gt;8__localsb</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>filePath</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>passwordString</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.CryptoProgress</signature>
                        <name>progress</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_k</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.EncryptionManager/&lt;EncryptAndSaveFileAsync&gt;d__3</name>
                <newname>GeneralToolkitLib.Encryption.EncryptionManager/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>MoveNext</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void(System.Runtime.CompilerServices.IAsyncStateMachine)</signature>
                        <name>SetStateMachine</name>
                        <newname>eval_e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.EncryptionManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;bool&gt;</signature>
                        <name>&lt;&gt;t__builder</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;t__stack</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.TaskAwaiter`1&lt;bool&gt;</signature>
                        <name>&lt;&gt;u__$awaiter5</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;result&gt;5__4</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.EncryptionManager/&lt;&gt;c__DisplayClass1</signature>
                        <name>CS$&lt;&gt;8__locals2</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>filePath</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>ms</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>passwordString</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.CryptoProgress</signature>
                        <name>progress</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_l</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.DataConverters.ObjectSerializer</name>
                <methodlist>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel(unsigned int8[])</signature>
                        <name>DeserializeLicenceData</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel(string)</signature>
                        <name>DeserializeLicenceDataFromString</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel(unsigned int8[])</signature>
                        <name>DeserializeRegistrationData</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel(string)</signature>
                        <name>DeserializeRegistrationDataFromString</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](object)</signature>
                        <name>SerializeDataContract</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel()</signature>
                        <name>get_RegistrationData</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RegistrationKey</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_ValidationHash</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel)</signature>
                        <name>set_RegistrationData</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RegistrationKey</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_ValidationHash</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel</signature>
                        <name>&lt;RegistrationData&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;RegistrationKey&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;ValidationHash&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel()</signature>
                        <name>RegistrationData</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>RegistrationKey</name>
                    </property>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>ValidationHash</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Company</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.SysInfo()</signature>
                        <name>get_ComputerId</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FirstName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LastName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Salt</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_ValidTo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_VersionName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Company</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Encryption.Licence.SysInfo)</signature>
                        <name>set_ComputerId</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FirstName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LastName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Salt</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_ValidTo</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_VersionName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Company&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.SysInfo</signature>
                        <name>&lt;ComputerId&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FirstName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LastName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Salt&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;ValidTo&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;VersionName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Company</name>
                    </property>
                    <property>
                        <signature>GeneralToolkitLib.Encryption.Licence.SysInfo()</signature>
                        <name>ComputerId</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FirstName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LastName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Salt</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>ValidTo</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>VersionName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.LicenceService</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;LoadSystemInfo&gt;b__0</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Encryption.Licence.StaticData.SerialNumbersSettings/ProtectedApp)</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitCompleted</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>LoadLicenceFromFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadSystemInfo</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ValidateLicence</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_OnInitComplete</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Initialized</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.LicenceService()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel()</signature>
                        <name>get_LicenceData</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RegistrationKey</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ValidLicence</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_OnInitComplete</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>OnInitComplete</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.LicenceService</signature>
                        <name>_instance</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel</signature>
                        <name>_licenceData</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.LicenceService/LicenceServiceState</signature>
                        <name>_serviceState</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>initializing</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.SerialNumberManager</signature>
                        <name>serialNumberManager</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Initialized</name>
                    </property>
                    <property>
                        <signature>GeneralToolkitLib.Encryption.Licence.LicenceService()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel()</signature>
                        <name>LicenceData</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>RegistrationKey</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ValidLicence</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler</signature>
                        <name>OnInitComplete</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.LicenceService/LicenceServiceState</name>
                <newname>GeneralToolkitLib.Encryption.Licence.LicenceService/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.SysInfo</signature>
                        <name>SystemInfo</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Valid</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>Validated</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.RegistrationDataManager</name>
                <methodlist>
                    <method>
                        <signature>void(GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.RegistrationDataManager(GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>SerializeToString</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel()</signature>
                        <name>get_RegistrationData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel</signature>
                        <name>_registrationData</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel()</signature>
                        <name>RegistrationData</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.SerialNumberManager</name>
                <methodlist>
                    <method>
                        <signature>void(System.Security.Cryptography.RSAParameters, GeneralToolkitLib.Encryption.Licence.StaticData.SerialNumbersSettings/ProtectedApp)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ConvertToBase32SerialNumber</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>CreateRegistrationKey</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], System.Security.Cryptography.RSAParameters)</signature>
                        <name>HashAndSign</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], System.Security.Cryptography.RSAParameters)</signature>
                        <name>HashAndSignBytes</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ValidateRegistrationData</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>VerifyRegistrationKey</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], unsigned int8[], System.Security.Cryptography.RSAParameters)</signature>
                        <name>VerifySignedHash</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel()</signature>
                        <name>get_LicenceData</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel)</signature>
                        <name>set_LicenceData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.StaticData.SerialNumbersSettings/ProtectedApp</signature>
                        <name>_app</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel</signature>
                        <name>_licenceData</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Security.Cryptography.RSAParameters</signature>
                        <name>_rsaPubKey</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel()</signature>
                        <name>LicenceData</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.StaticData.SerialNumbersSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.StaticData.SerialNumbersSettings/ProtectedApp</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.StaticData.SerialNumbersSettings/ProtectedApp</signature>
                        <name>SearchForDuplicates</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.StaticData.SerialNumbersSettings/ProtectedApp</signature>
                        <name>SecureMemo</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.SysInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ComputerId</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SignedHash</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ComputerId</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SignedHash</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_computerId</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_signedHash</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ComputerId</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SignedHash</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.Licence.SysInfoManager</name>
                <methodlist>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.SysInfo()</signature>
                        <name>GetComputerId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.RSAKeySetIdentity</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NickName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NickName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>RSA_GUID</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RSA_PrivateKey</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RSA_PublicKey</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_nickName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>NickName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.RSALocalCryptoKeyManager</name>
                <newname>eval_k</newname>
                <methodlist>
                    <method>
                        <signature>System.Security.Cryptography.RSAParameters()</signature>
                        <name>GetAssemblyRsaParameters</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.RSAKeySetIdentity()</signature>
                        <name>GetLocalKeySetIdentity</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.RSA_AsymetricEncryption</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string, System.Security.Cryptography.RSAParameters)</signature>
                        <name>DecryptObjectUsingRSA</name>
                    </method>
                    <method>
                        <signature>string(string, System.Security.Cryptography.RSAParameters)</signature>
                        <name>EncryptObjectUsingRSA</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.RSAKeySetIdentity(GeneralToolkitLib.Encryption.RSA_AsymetricEncryption/RSAKeySize)</signature>
                        <name>GenerateRSAKeyPair</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.RSAParameters(GeneralToolkitLib.Encryption.RSAKeySetIdentity)</signature>
                        <name>ParseRSAKeyInfo</name>
                    </method>
                    <method>
                        <signature>System.Security.Cryptography.RSAParameters(GeneralToolkitLib.Encryption.RSAKeySetIdentity)</signature>
                        <name>ParseRSAPublicKeyOnlyInfo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Encryption.RSA_AsymetricEncryption/RSAKeySize</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.RSA_AsymetricEncryption/RSAKeySize</signature>
                        <name>b1024</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.RSA_AsymetricEncryption/RSAKeySize</signature>
                        <name>b16384</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.RSA_AsymetricEncryption/RSAKeySize</signature>
                        <name>b2048</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.RSA_AsymetricEncryption/RSAKeySize</signature>
                        <name>b4096</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.RSA_AsymetricEncryption/RSAKeySize</signature>
                        <name>b8192</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>GeneralToolkitLib.Events.Unsubscriber`1</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;System.IObserver`1&lt;!0&gt;&gt;, System.IObserver`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IObserver`1&lt;!0&gt;</signature>
                        <name>_observer</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.IObserver`1&lt;!0&gt;&gt;</signature>
                        <name>_observers</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.CRC32</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IProgress`1&lt;GeneralToolkitLib.Hashing.HashProgress&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>ComputeHash</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>ComputeHash</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int32)</signature>
                        <name>GetBigEndianBytes</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int32, bool)</signature>
                        <name>GetBigEndianBytes</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>GetCRC326HashAsHexString</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_HashSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Hashing.HashProgress&gt;</signature>
                        <name>_progress</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Hashing.HashProgress</signature>
                        <name>hashProgress</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>HashSize</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.CRC32/CRC32Table</name>
                <newname>GeneralToolkitLib.Hashing.CRC32/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int32[]</signature>
                        <name>dwCRC32Table</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.ChecksumFileGenerator</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.IProgress`1&lt;GeneralToolkitLib.Hashing.ChecksumProgress&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(int64, int32)</signature>
                        <name>FormatFileSize</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.StringCollection, string)</signature>
                        <name>GenrateMD5File</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.StringCollection, string)</signature>
                        <name>GenrateMD5FileAsync</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.StringCollection, string)</signature>
                        <name>GenrateSFVFile</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.StringCollection, string)</signature>
                        <name>GenrateSFVFileAsync</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_applicationName</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Hashing.ChecksumProgress&gt;</signature>
                        <name>_progress</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Hashing.ChecksumProgress</signature>
                        <name>checksumProgress</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.ChecksumFileGenerator/&lt;&gt;c__DisplayClass1</name>
                <newname>GeneralToolkitLib.Hashing.ChecksumFileGenerator/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;GenrateSFVFileAsync&gt;b__0</name>
                        <newname>eval_d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Hashing.ChecksumFileGenerator</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.StringCollection</signature>
                        <name>filePathCollection</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>sfvFilename</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.ChecksumFileGenerator/&lt;&gt;c__DisplayClass4</name>
                <newname>GeneralToolkitLib.Hashing.ChecksumFileGenerator/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;GenrateMD5FileAsync&gt;b__3</name>
                        <newname>eval_d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Hashing.ChecksumFileGenerator</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Specialized.StringCollection</signature>
                        <name>filePathCollection</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>sfvFilename</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.ChecksumProgress</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Completed</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_DataRead</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FilesCompleted</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FilesTotal</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_TotalProgress</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Completed</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_DataRead</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_FilesCompleted</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_FilesTotal</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Text</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_TotalProgress</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Completed&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;DataRead&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;FilesCompleted&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;FilesTotal&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Text&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;TotalProgress&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Completed</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>DataRead</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FilesCompleted</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FilesTotal</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Text</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>TotalProgress</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.HashProgress</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_BytesHashed</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_BytesTotal</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_BytesHashed</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_BytesTotal</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;BytesHashed&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;BytesTotal&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int64()</signature>
                        <name>BytesHashed</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>BytesTotal</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.IHashTransform</name>
                <methodlist>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>ComputeHash</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_HashSize</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>HashSize</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.MD5</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>ComputeHash</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ComputeHashOnString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>GetMD5HashAsHexString</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Hashing.HashProgress)</signature>
                        <name>Report</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_HashSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Cryptography.HashAlgorithm</signature>
                        <name>md5Implementation</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>HashSize</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Hashing.SHA256</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>ComputeHash</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>GetSHA256HashAsByteArray</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>GetSHA256HashAsHexString</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Hashing.HashProgress)</signature>
                        <name>Report</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_HashSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>HashSize</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Log.LogWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>System.Exception(System.Exception)</signature>
                        <name>&lt;BuildExceptionMessage&gt;b__1</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>string(System.Exception)</signature>
                        <name>&lt;BuildExceptionMessage&gt;b__2</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(!!0)</signature>
                        <name>&lt;FromHierarchy&gt;b__9</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(System.Exception)</signature>
                        <name>BuildExceptionMessage</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(!!0, System.Func`2&lt;!!0,!!0&gt;)</signature>
                        <name>FromHierarchy</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(!!0, System.Func`2&lt;!!0,!!0&gt;, System.Func`2&lt;!!0,bool&gt;)</signature>
                        <name>FromHierarchy</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>LogError</name>
                    </method>
                    <method>
                        <signature>void(string, GeneralToolkitLib.Log.LogWriter/LogLevel)</signature>
                        <name>LogMessage</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Log.LogWriter/LogLevel)</signature>
                        <name>SetMinimumLogLevel</name>
                    </method>
                    <method>
                        <signature>void(string, bool, GeneralToolkitLib.Log.LogWriter/LogLevel)</signature>
                        <name>WriteLog</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Exception,System.Exception&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Exception,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>ThreadLock</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_basePath</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Log.LogWriter/LogLevel</signature>
                        <name>_logLevel</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>eval_a</newname>
                </genericparameter>
                <name>GeneralToolkitLib.Log.LogWriter/&lt;FromHierarchy&gt;d__5`1</name>
                <newname>GeneralToolkitLib.Log.LogWriter/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TSource&gt;.GetEnumerator</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TSource&gt;.get_Current</name>
                        <newname>eval_k</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>eval_l</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>eval_n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>eval_m</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,bool&gt;</signature>
                        <name>&lt;&gt;3__canContinue</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!0&gt;</signature>
                        <name>&lt;&gt;3__nextItem</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;current&gt;5__6</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,bool&gt;</signature>
                        <name>canContinue</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!0&gt;</signature>
                        <name>nextItem</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>source</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Log.LogWriter/LogLevel</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Log.LogWriter/LogLevel</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Log.LogWriter/LogLevel</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Log.LogWriter/LogLevel</signature>
                        <name>Info</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Log.LogWriter/LogLevel</signature>
                        <name>Trace</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Log.LogWriter/LogLevel</signature>
                        <name>Warning</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.OTP.Authenticator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>ConstantTimeEquals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GenerateKey</name>
                    </method>
                    <method>
                        <signature>string(string, unsigned int64)</signature>
                        <name>GetCodeInternal</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>RandomInt</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Cryptography.RNGCryptoServiceProvider</signature>
                        <name>Random</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.OTP.CounterAuthenticator</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string, string, unsigned int64)</signature>
                        <name>CheckCode</name>
                    </method>
                    <method>
                        <signature>bool(string, string, unsigned int64, unsigned int64&amp;)</signature>
                        <name>CheckCode</name>
                    </method>
                    <method>
                        <signature>string(string, unsigned int64)</signature>
                        <name>GetCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>WindowSize</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.OTP.GoogleAuthenticator</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AuthenticatorLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_KeyUri</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Secret</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AuthenticatorLabel</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Secret</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AuthenticatorLabel&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Secret&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AuthenticatorLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>KeyUri</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Secret</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.OTP.IUsedCodesManager</name>
                <methodlist>
                    <method>
                        <signature>void(int64, string, object)</signature>
                        <name>AddCode</name>
                    </method>
                    <method>
                        <signature>bool(int64, string, object)</signature>
                        <name>IsCodeUsed</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.OTP.TimeAuthenticator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.OTP.IUsedCodesManager, System.Func`1&lt;System.DateTime&gt;, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.OTP.IUsedCodesManager()</signature>
                        <name>&lt;.cctor&gt;b__2</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>CheckCode</name>
                    </method>
                    <method>
                        <signature>bool(string, string, object)</signature>
                        <name>CheckCode</name>
                    </method>
                    <method>
                        <signature>bool(string, string, object, System.DateTime&amp;)</signature>
                        <name>CheckCode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetCode</name>
                    </method>
                    <method>
                        <signature>string(string, System.DateTime)</signature>
                        <name>GetCode</name>
                    </method>
                    <method>
                        <signature>int64(System.DateTime)</signature>
                        <name>GetInterval</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`1&lt;System.DateTime&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;GeneralToolkitLib.OTP.IUsedCodesManager&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Lazy`1&lt;GeneralToolkitLib.OTP.IUsedCodesManager&gt;</signature>
                        <name>DefaultUsedCodeManager</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>IntervalSeconds</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;System.DateTime&gt;</signature>
                        <name>NowFunc</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.OTP.IUsedCodesManager</signature>
                        <name>UsedCodeManager</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.OTP.UsedCodesManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64, string, object)</signature>
                        <name>AddCode</name>
                    </method>
                    <method>
                        <signature>bool(int64, string, object)</signature>
                        <name>IsCodeUsed</name>
                    </method>
                    <method>
                        <signature>void(object, System.Timers.ElapsedEventArgs)</signature>
                        <name>cleaner_Elapsed</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Timers.Timer</signature>
                        <name>cleaner</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Queue`1&lt;GeneralToolkitLib.OTP.UsedCodesManager/UsedCode&gt;</signature>
                        <name>codes</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>lockingTimeout</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ReaderWriterLock</signature>
                        <name>rwlock</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.OTP.UsedCodesManager/UsedCode</name>
                <newname>GeneralToolkitLib.OTP.UsedCodesManager/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void(int64, string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Code</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Timestamp</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_UseDate</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_User</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Code</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Timestamp</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_UseDate</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_User</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Code&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;Timestamp&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;UseDate&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;User&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.FileOperationAPIWrapper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>DeleteCompletelySilent</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>MoveToRecycleBin</name>
                    </method>
                    <method>
                        <signature>int32(GeneralToolkitLib.Storage.FileOperationAPIWrapper/SHFILEOPSTRUCT&amp;)</signature>
                        <name>SHFileOperation</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>bool(string, GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>bool(string, GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags)</signature>
                        <name>deleteFile</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</signature>
                        <name>FOF_ALLOWUNDO</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</signature>
                        <name>FOF_NOCONFIRMATION</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</signature>
                        <name>FOF_NOERRORUI</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</signature>
                        <name>FOF_SILENT</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</signature>
                        <name>FOF_SIMPLEPROGRESS</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</signature>
                        <name>FOF_WANTNUKEWARNING</name>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationType</signature>
                        <name>FO_COPY</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationType</signature>
                        <name>FO_DELETE</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationType</signature>
                        <name>FO_MOVE</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationType</signature>
                        <name>FO_RENAME</name>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.FileOperationAPIWrapper/SHFILEOPSTRUCT</name>
                <newname>GeneralToolkitLib.Storage.FileOperationAPIWrapper/eval_a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>fAnyOperationsAborted</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationFlags</signature>
                        <name>fFlags</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>native int</signature>
                        <name>hNameMappings</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>native int</signature>
                        <name>hwnd</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>lpszProgressTitle</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>pFrom</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>pTo</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.FileOperationAPIWrapper/FileOperationType</signature>
                        <name>wFunc</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Filesystem.XMLDataElement</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>get_ElementProperties</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ElementType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ElementValue</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Specialized.NameValueCollection)</signature>
                        <name>set_ElementProperties</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ElementType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ElementValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Specialized.NameValueCollection</signature>
                        <name>&lt;ElementProperties&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ElementType&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ElementValue&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Specialized.NameValueCollection()</signature>
                        <name>ElementProperties</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ElementType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ElementValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Filesystem.XMLImporter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>LoadXMLFile</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Filesystem.XMLDataElement&gt;()</signature>
                        <name>get_XMLDocumentNodes</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Filesystem.XMLDataElement&gt;</signature>
                        <name>_dataElementList</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Filesystem.XMLDataElement&gt;()</signature>
                        <name>XMLDocumentNodes</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.IStorageManager</name>
                <methodlist>
                    <method>
                        <signature>bool(System.Collections.Generic.List`1&lt;string&gt;, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>CompressFile</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;bool&gt;(System.Collections.Generic.List`1&lt;string&gt;, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>CompressFileAsync</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>DeserializeObjectFromFile</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Threading.Tasks.Task`1&lt;!!0&gt;(string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>DeserializeObjectFromFileAsync</name>
                    </method>
                    <method>
                        <signature>bool(object, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>SerializeObjectToFile</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;bool&gt;(object, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>SerializeObjectToFileAsync</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Memory.PasswordStorage</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Set</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,GeneralToolkitLib.Storage.Memory.PasswordStorage/PasswordStorageItem&gt;</signature>
                        <name>_encodedDataDictionary</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Memory.PasswordStorage/PasswordStorageItem</name>
                <newname>GeneralToolkitLib.Storage.Memory.PasswordStorage/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>Data</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PaddingLength</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.ArchiveFile</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Storage.Models.ArchiveFile(System.IO.FileInfo)</signature>
                        <name>CreateArchiveFile</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>GetFileInfoToBytes</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ToBytes</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CompressedFileSize</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_EndPosition</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Storage.Models.ArchiveFileInfo()</signature>
                        <name>get_FileInfo</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_FileInfoOffsetBytes</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_StartPosition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_UncompressedFileSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_CompressedFileSize</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_EndPosition</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Storage.Models.ArchiveFileInfo)</signature>
                        <name>set_FileInfo</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_FileInfoOffsetBytes</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_StartPosition</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_UncompressedFileSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;CompressedFileSize&gt;k__BackingField</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;EndPosition&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.Models.ArchiveFileInfo</signature>
                        <name>&lt;FileInfo&gt;k__BackingField</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;FileInfoOffsetBytes&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;StartPosition&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;UncompressedFileSize&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BaseAllocSize</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>CompressedFileSize</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>EndPosition</name>
                    </property>
                    <property>
                        <signature>GeneralToolkitLib.Storage.Models.ArchiveFileInfo()</signature>
                        <name>FileInfo</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>FileInfoOffsetBytes</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>StartPosition</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>UncompressedFileSize</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.ArchiveFileInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Attributes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_CRC32</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CompressedFileSize</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_CreationTime</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Extension</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_FileSize</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullPath</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_LastAccessTime</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_LastWriteTime</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Attributes</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_CRC32</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_CompressedFileSize</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_CreationTime</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Extension</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_FileSize</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FullName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FullPath</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_LastAccessTime</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_LastWriteTime</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Attributes&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;CRC32&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;CompressedFileSize&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;CreationTime&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Extension&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;FileSize&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FullName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FullPath&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;LastAccessTime&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;LastWriteTime&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Attributes</name>
                    </property>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>CRC32</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>CompressedFileSize</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>CreationTime</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Extension</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>FileSize</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullPath</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>LastAccessTime</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>LastWriteTime</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.CompressionArchive</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Storage.Models.CompressionArchive(System.IO.Stream)</signature>
                        <name>DecodeHeader</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.Stream)</signature>
                        <name>VerifyFileHeader</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.ArchiveFile&gt;()</signature>
                        <name>get_ArchiveFiles</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.ArchiveFile&gt;)</signature>
                        <name>set_ArchiveFiles</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.ArchiveFile&gt;</signature>
                        <name>&lt;ArchiveFiles&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>HeaderEndBytes</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>HeaderIdentifierBytes</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.ArchiveFile&gt;()</signature>
                        <name>ArchiveFiles</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.CompressionBlock</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CompressedBlockSize</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_EndPosition</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_StartPosition</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_UncompressedBlockSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_CompressedBlockSize</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_EndPosition</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_StartPosition</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_UncompressedBlockSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;CompressedBlockSize&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;EndPosition&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;StartPosition&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;UncompressedBlockSize&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BlockAllocSize</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>CompressedBlockSize</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>EndPosition</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>StartPosition</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>UncompressedBlockSize</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.CompressionFileHeader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(int64, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Storage.Models.CompressionFileHeader(System.IO.Stream)</signature>
                        <name>DecodeHeader</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>ToBytes</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.Stream)</signature>
                        <name>VerifyFileHeader</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BlockSize</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.CompressionBlock&gt;()</signature>
                        <name>get_CompressedDataBlocks</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_DecompressedFileSize</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FileHeaderSize</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NumberOfBlocks</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BlockSize</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.CompressionBlock&gt;)</signature>
                        <name>set_CompressedDataBlocks</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_DecompressedFileSize</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_FileHeaderSize</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NumberOfBlocks</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;BlockSize&gt;k__BackingField</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.CompressionBlock&gt;</signature>
                        <name>&lt;CompressedDataBlocks&gt;k__BackingField</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;DecompressedFileSize&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;FileHeaderSize&gt;k__BackingField</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NumberOfBlocks&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>HeaderEndBytes</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>HeaderIdentifierBytes</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_h</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>BlockSize</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.Storage.Models.CompressionBlock&gt;()</signature>
                        <name>CompressedDataBlocks</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>DecompressedFileSize</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FileHeaderSize</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>NumberOfBlocks</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.DataAccessEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DataRead</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DataWritten</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DataRead</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DataWritten</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DataRead&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DataWritten&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>DataRead</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>DataWritten</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.DataAccessEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, GeneralToolkitLib.Storage.Models.DataAccessEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, GeneralToolkitLib.Storage.Models.DataAccessEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.ProgressMemoryStream</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ReadByte</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteByte</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Storage.Models.DataAccessEventHandler)</signature>
                        <name>add_OnDataRead</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Storage.Models.DataAccessEventHandler)</signature>
                        <name>add_OnDataWritten</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Storage.Models.DataAccessEventHandler)</signature>
                        <name>remove_OnDataRead</name>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Storage.Models.DataAccessEventHandler)</signature>
                        <name>remove_OnDataWritten</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Storage.Models.DataAccessEventHandler</signature>
                        <name>OnDataRead</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.Models.DataAccessEventHandler</signature>
                        <name>OnDataWritten</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist>
                    <event>
                        <signature>GeneralToolkitLib.Storage.Models.DataAccessEventHandler</signature>
                        <name>OnDataRead</name>
                    </event>
                    <event>
                        <signature>GeneralToolkitLib.Storage.Models.DataAccessEventHandler</signature>
                        <name>OnDataWritten</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.StorageManagerProgress</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProgressPercentage</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ProgressPercentage</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Text</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Text&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_progressPercentage</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>ProgressPercentage</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Text</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Models.StorageManagerSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool, int32, bool, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Storage.Models.StorageManagerSettings()</signature>
                        <name>GetDefaultSettings</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NumberOfThreads</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseEncryption</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseMultithreading</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NumberOfThreads</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseEncryption</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseMultithreading</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NumberOfThreads&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Password&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UseEncryption&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UseMultithreading&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>NumberOfThreads</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Password</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UseEncryption</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UseMultithreading</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Registry.RegistryAccess</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>DeleteKey</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>DeleteSubKeyTree</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0()</signature>
                        <name>ReadObjectFromRegistry</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>SaveObjectToRegistry</name>
                    </method>
                    <method>
                        <signature>void(System.Exception, string)</signature>
                        <name>ShowErrorMessage</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>SubKeyCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ValueCount</name>
                    </method>
                    <method>
                        <signature>bool(GeneralToolkitLib.Storage.Registry.RegistryDataTypes)</signature>
                        <name>Write</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Microsoft.Win32.RegistryKey()</signature>
                        <name>get_BaseRegistryKey</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ProductName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ShowError</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SubKey</name>
                    </method>
                    <method>
                        <signature>void(Microsoft.Win32.RegistryKey)</signature>
                        <name>set_BaseRegistryKey</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ProductName</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ShowError</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ProductName&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>Microsoft.Win32.RegistryKey</signature>
                        <name>_baseRegistryKey</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_showError</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_subKey</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Microsoft.Win32.RegistryKey()</signature>
                        <name>BaseRegistryKey</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ProductName</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ShowError</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SubKey</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Registry.RegistryDataTypeDWORD</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_KeyName</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_KeyName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;KeyName&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_data</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>DataType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>KeyName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Registry.RegistryDataTypeMultiString</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_KeyName</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_KeyName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;KeyName&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>_multiStringData</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>DataType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>KeyName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Registry.RegistryDataTypeString</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_KeyName</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_KeyName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;KeyName&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_data</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>DataType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>KeyName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.Registry.RegistryDataTypes</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_KeyName</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_KeyName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>Microsoft.Win32.RegistryValueKind()</signature>
                        <name>DataType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>KeyName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.StorageManager</name>
                <methodlist>
                    <method>
                        <signature>void(GeneralToolkitLib.Storage.Models.StorageManagerSettings)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task(System.IO.Stream, System.IO.Stream, int64, GeneralToolkitLib.Compression.SevenZip.ICodeProgress)</signature>
                        <name>CompressData</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream, GeneralToolkitLib.Compression.SevenZip.CodeProgressImplementation)</signature>
                        <name>CompressDataMultithreaded</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.List`1&lt;string&gt;, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>CompressFile</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;bool&gt;(System.Collections.Generic.List`1&lt;string&gt;, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>CompressFileAsync</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>DeSerializeAndDecompressObjectFromEncryptedFile</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>DeSerializeAndDecompressObjectFromFile</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task(System.IO.Stream, System.IO.Stream, int64, GeneralToolkitLib.Compression.SevenZip.ICodeProgress)</signature>
                        <name>DeflateData</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, System.IO.Stream, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>DeflateDataMultithreded</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>DeserializeObjectFromFile</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Threading.Tasks.Task`1&lt;!!0&gt;(string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>DeserializeObjectFromFileAsync</name>
                    </method>
                    <method>
                        <signature>bool(object, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>SerializeAndCompressObjectToFile</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.IO.MemoryStream(object, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>SerializeAndCompressObjectToMemoryStream</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(object, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>SerializeObjectToFile</name>
                    </method>
                    <method>
                        <signature>System.Threading.Tasks.Task`1&lt;bool&gt;(object, string, System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;)</signature>
                        <name>SerializeObjectToFileAsync</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>VerifyObjectToSerialize</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Storage.Models.StorageManagerSettings</signature>
                        <name>_settings</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.StorageManager/&lt;&gt;c__DisplayClass1</name>
                <newname>GeneralToolkitLib.Storage.StorageManager/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>&lt;SerializeObjectToFileAsync&gt;b__0</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Storage.StorageManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>obj</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;</signature>
                        <name>progress</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.StorageManager/&lt;&gt;c__DisplayClass1a</name>
                <newname>GeneralToolkitLib.Storage.StorageManager/eval_e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;CompressData&gt;b__19</name>
                        <newname>eval_e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>inputSize</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>inputStream</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>outStream</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.ICodeProgress</signature>
                        <name>progress</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.StorageManager/&lt;&gt;c__DisplayClass1d</name>
                <newname>GeneralToolkitLib.Storage.StorageManager/eval_f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;DeflateData&gt;b__1c</name>
                        <newname>eval_e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>compressedSize</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>inputStream</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>outStream</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Compression.SevenZip.ICodeProgress</signature>
                        <name>progress</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>GeneralToolkitLib.Storage.StorageManager/&lt;&gt;c__DisplayClass7`1</name>
                <newname>GeneralToolkitLib.Storage.StorageManager/eval_c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>&lt;DeserializeObjectFromFileAsync&gt;b__6</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Storage.StorageManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;</signature>
                        <name>progress</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>GeneralToolkitLib.Storage.StorageManager/&lt;DeserializeObjectFromFileAsync&gt;d__9`1</name>
                <newname>GeneralToolkitLib.Storage.StorageManager/eval_d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>MoveNext</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(System.Runtime.CompilerServices.IAsyncStateMachine)</signature>
                        <name>SetStateMachine</name>
                        <newname>eval_d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.StorageManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;t__builder</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;t__stack</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.TaskAwaiter`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;u__$awaitera</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.StorageManager/&lt;&gt;c__DisplayClass7`1&lt;!0&gt;</signature>
                        <name>CS$&lt;&gt;8__locals8</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;</signature>
                        <name>progress</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_i</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.StorageManager/&lt;SerializeObjectToFileAsync&gt;d__3</name>
                <newname>GeneralToolkitLib.Storage.StorageManager/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>MoveNext</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(System.Runtime.CompilerServices.IAsyncStateMachine)</signature>
                        <name>SetStateMachine</name>
                        <newname>eval_d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.StorageManager</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1&lt;bool&gt;</signature>
                        <name>&lt;&gt;t__builder</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;t__stack</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.TaskAwaiter`1&lt;bool&gt;</signature>
                        <name>&lt;&gt;u__$awaiter4</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.StorageManager/&lt;&gt;c__DisplayClass1</signature>
                        <name>CS$&lt;&gt;8__locals2</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>obj</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.IProgress`1&lt;GeneralToolkitLib.Storage.Models.StorageManagerProgress&gt;</signature>
                        <name>progress</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_j</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Storage.StorageManagerBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CreateFilePathIfItDoesNotExist</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetDirectoryFromFullPath</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.UserControls.CreateAndVerifyOTP</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>CreateAndVerifyOTP_Load</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GenerateQRCode</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.UserControls.CreateAndVerifyOTP/OTPPanel)</signature>
                        <name>SetVisiblePanel</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_CancelClicked</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_CodeVerified</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCancel_Click</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnPrevious_Click</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnShowVerificationPanel_Click</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnVerifyCode_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.OTP.GoogleAuthenticator()</signature>
                        <name>get_GoogleAuthenticator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_OTPVerificationCompleted</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_CancelClicked</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_CodeVerified</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_OTPVerificationCompleted</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;OTPVerificationCompleted&gt;k__BackingField</name>
                        <newname>eval_x</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>CancelClicked</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>CodeVerified</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.OTP.GoogleAuthenticator</signature>
                        <name>_googleAuthenticator</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_initialized</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Barcode.QRCodeGenerator</signature>
                        <name>_qrCodeGenerator</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Drawing.Image</signature>
                        <name>_qrCodeImage</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.OTP.TimeAuthenticator</signature>
                        <name>_timeAuthenticator</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCancel</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnPrevious</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnShowVerificationPanel</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnVerifyCode</name>
                        <newname>eval_u</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>grpShowQR</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>grpVerifyOTP</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label1</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label2</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label3</name>
                        <newname>eval_w</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.PictureBox</signature>
                        <name>pictureBoxQRCode</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Panel</signature>
                        <name>pnlGenerateOTP</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Panel</signature>
                        <name>pnlVerifyOTP</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_y</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtOTPCodeToVerify</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtOTPSecret</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtVerifyResult</name>
                        <newname>eval_v</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.OTP.GoogleAuthenticator()</signature>
                        <name>GoogleAuthenticator</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>OTPVerificationCompleted</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler</signature>
                        <name>CancelClicked</name>
                    </event>
                    <event>
                        <signature>System.EventHandler</signature>
                        <name>CodeVerified</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>GeneralToolkitLib.UserControls.CreateAndVerifyOTP/OTPPanel</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.UserControls.CreateAndVerifyOTP/OTPPanel</signature>
                        <name>CreateQR</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.UserControls.CreateAndVerifyOTP/OTPPanel</signature>
                        <name>VerifyOTP</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.UserControls.CreateLicenceRequestControl</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnGenerate_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel()</signature>
                        <name>get_RegistrationData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel</signature>
                        <name>_registrationData</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.RegistrationDataManager</signature>
                        <name>_registrationDataManager</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnGenerate</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>groupBox1</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label1</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label2</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label3</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label4</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>lblInfo</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtCompany</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtFirstName</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtLastName</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.RichTextBox</signature>
                        <name>txtLicenceRequest</name>
                        <newname>eval_m</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel()</signature>
                        <name>RegistrationData</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.UserControls.LicenceInfoControl</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>string(GeneralToolkitLib.Encryption.Licence.DataModels.RegistrationDataModel)</signature>
                        <name>GetRegistrationDetails</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitControlState</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel)</signature>
                        <name>InitLicenceData</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>LicenceInfoControl_Load</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCreateRequest_Click</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnEnterLicence_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NotRegisteredInfoText</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ValidLicence</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NotRegisteredInfoText</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;NotRegisteredInfoText&gt;k__BackingField</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>CreateRequest</name>
                    </field>
                    <field>
                        <signature>System.Action</signature>
                        <name>EnterLicence</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.DataModels.LicenceDataModel</signature>
                        <name>_licenceData</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCreateRequest</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnEnterLicence</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>grpLicence</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label1</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label2</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtComputerId</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtLicenceInfo</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>NotRegisteredInfoText</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ValidLicence</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Utility.DataConverters.IniConfigFileSectionSerializer</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;GeneralToolkitLib.ConfigHelper.IniConfigFileSection&gt;(object)</signature>
                        <name>Serialize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>GeneralToolkitLib.Utility.DataConverters.ObjectSerializer`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0(unsigned int8[])</signature>
                        <name>DeserializeBinaryFormatterObjectDataInternal</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>!0(unsigned int8[], bool)</signature>
                        <name>DeserializeObjectFromByteArray</name>
                    </method>
                    <method>
                        <signature>!0(string, GeneralToolkitLib.Utility.DataConverters.ObjectSerializer`1/StringSerializationFormat&lt;!0&gt;, bool)</signature>
                        <name>DeserializeObjectFromString</name>
                    </method>
                    <method>
                        <signature>!0(unsigned int8[])</signature>
                        <name>DeserializeProtoBufferObjectDataInternal</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](!0)</signature>
                        <name>SerializeToByteArray</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](!0)</signature>
                        <name>SerializeUsingBinaryFormatterInternal</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](!0)</signature>
                        <name>SerializeUsingProtoBuffersInternal</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>GeneralToolkitLib.Utility.DataConverters.ObjectSerializer`1/StringSerializationFormat</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>GeneralToolkitLib.Utility.DataConverters.ObjectSerializer`1/StringSerializationFormat&lt;!0&gt;</signature>
                        <name>Base64</name>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Utility.DataConverters.ObjectSerializer`1/StringSerializationFormat&lt;!0&gt;</signature>
                        <name>Hex</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Utility.FileSystem</name>
                <methodlist>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsValidDirectory</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.Utility.SystemInfo</name>
                <newname>eval_l</newname>
                <methodlist>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetSystemInfo</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>RunQuery</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>UseBaseBoardManufacturer</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UseBaseBoardProduct</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UseBiosManufacturer</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UseBiosVersion</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UseDiskDriveSignature</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UsePhysicalMediaSerialNumber</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UseProcessorID</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UseVideoControllerCaption</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>UseWindowsSerialNumber</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_j</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.WindowsSecurity.AccessHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.DirectoryInfo)</signature>
                        <name>UserHasReadAccessToDirectory</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Principal.WindowsIdentity</signature>
                        <name>_winId</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.WindowsSecurity.AccessHelper/&lt;&gt;c__DisplayClass2</name>
                <newname>GeneralToolkitLib.WindowsSecurity.AccessHelper/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Security.Claims.Claim)</signature>
                        <name>&lt;UserHasReadAccessToDirectory&gt;b__0</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.AccessControl.FileSystemAccessRule</signature>
                        <name>fsAccessRules</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>GeneralToolkitLib.WindowsSecurity.WindowsIdentityHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetUniqueSecurityIdForCurrentUser</name>
                    </method>
                    <method>
                        <signature>native int()</signature>
                        <name>LogonUser</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>protobuf-net.dll</name>
            <type>
                <name>ProtoBuf.BclHelpers</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>GetUninitializedObject</name>
                    </method>
                    <method>
                        <signature>System.DateTime(ProtoBuf.ProtoReader)</signature>
                        <name>ReadDateTime</name>
                    </method>
                    <method>
                        <signature>System.Decimal(ProtoBuf.ProtoReader)</signature>
                        <name>ReadDecimal</name>
                    </method>
                    <method>
                        <signature>System.Guid(ProtoBuf.ProtoReader)</signature>
                        <name>ReadGuid</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader, int32, System.Type, ProtoBuf.BclHelpers/NetObjectOptions)</signature>
                        <name>ReadNetObject</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan(ProtoBuf.ProtoReader)</signature>
                        <name>ReadTimeSpan</name>
                    </method>
                    <method>
                        <signature>int64(ProtoBuf.ProtoReader)</signature>
                        <name>ReadTimeSpanTicks</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteDateTime</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteDecimal</name>
                    </method>
                    <method>
                        <signature>void(System.Guid, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteGuid</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter, int32, ProtoBuf.BclHelpers/NetObjectOptions)</signature>
                        <name>WriteNetObject</name>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteTimeSpan</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>EpochOrigin</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.BclHelpers/NetObjectOptions</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.BclHelpers/NetObjectOptions</signature>
                        <name>AsReference</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.BclHelpers/NetObjectOptions</signature>
                        <name>DynamicType</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.BclHelpers/NetObjectOptions</signature>
                        <name>LateSet</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.BclHelpers/NetObjectOptions</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.BclHelpers/NetObjectOptions</signature>
                        <name>UseConstructor</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.BufferExtension</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>ProtoBuf.IExtension.BeginAppend</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>ProtoBuf.IExtension.BeginQuery</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, bool)</signature>
                        <name>ProtoBuf.IExtension.EndAppend</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>ProtoBuf.IExtension.EndQuery</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ProtoBuf.IExtension.GetLength</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>buffer</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.BufferPool</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>GetBuffer</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[]&amp;)</signature>
                        <name>ReleaseBufferToPool</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[]&amp;, int32, int32, int32)</signature>
                        <name>ResizeAndFlushLeft</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>BufferLength</name>
                    </field>
                    <field>
                        <signature>object[]</signature>
                        <name>pool</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Compiler.CodeLabel</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.Emit.Label, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Index</name>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.Label</signature>
                        <name>Value</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Compiler.CompilerContext</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, bool, bool, ProtoBuf.Meta.RuntimeTypeModel/SerializerPair[], ProtoBuf.Meta.TypeModel, ProtoBuf.Compiler.CompilerContext/ILVersion, string, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, bool, bool, ProtoBuf.Meta.TypeModel, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>AllowInternal</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BeginFinally</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.CodeLabel()</signature>
                        <name>BeginTry</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel, bool)</signature>
                        <name>Branch</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel, bool)</signature>
                        <name>BranchIfEqual</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel, bool)</signature>
                        <name>BranchIfFalse</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel, bool)</signature>
                        <name>BranchIfGreater</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel, bool)</signature>
                        <name>BranchIfLess</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel, bool)</signature>
                        <name>BranchIfTrue</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.ProtoDeserializer(ProtoBuf.Serializers.IProtoSerializer, ProtoBuf.Meta.TypeModel)</signature>
                        <name>BuildDeserializer</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.ProtoSerializer(ProtoBuf.Serializers.IProtoSerializer, ProtoBuf.Meta.TypeModel)</signature>
                        <name>BuildSerializer</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>Cast</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>CastFromObject</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>CastToObject</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MemberInfo)</signature>
                        <name>CheckAccessibility</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>Constrain</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoTypeCode, bool)</signature>
                        <name>ConvertFromInt32</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoTypeCode, bool)</signature>
                        <name>ConvertToInt32</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CopyValue</name>
                    </method>
                    <method>
                        <signature>void(System.Type, ProtoBuf.Compiler.Local)</signature>
                        <name>CreateArray</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.CodeLabel()</signature>
                        <name>DefineLabel</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DiscardValue</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.OpCode)</signature>
                        <name>Emit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, string, System.Type)</signature>
                        <name>EmitBasicRead</name>
                    </method>
                    <method>
                        <signature>void(string, System.Type)</signature>
                        <name>EmitBasicRead</name>
                    </method>
                    <method>
                        <signature>void(string, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitBasicWrite</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>EmitCall</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.ConstructorInfo)</signature>
                        <name>EmitCtor</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>EmitCtor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Type[])</signature>
                        <name>EmitCtor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, string, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EndFinally</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel, bool)</signature>
                        <name>EndTry</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Emit.MethodBuilder(int32, bool)</signature>
                        <name>GetDedicatedMethod</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Emit.LocalBuilder(System.Type)</signature>
                        <name>GetFromPool</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.Local(System.Type, ProtoBuf.Compiler.Local)</signature>
                        <name>GetLocalWithValue</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(string)</signature>
                        <name>GetWriterMethod</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.Assembly)</signature>
                        <name>InternalsVisible</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsObject</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.Local, System.Type)</signature>
                        <name>LoadAddress</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.Local, ProtoBuf.Compiler.Local)</signature>
                        <name>LoadArrayValue</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.Local, bool)</signature>
                        <name>LoadLength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadNullRef</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadReaderWriter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadSerializationContext</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.Local)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(System.Guid)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.ILGenerator, int32)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.FieldInfo)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.PropertyInfo)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>LoadValue</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>MapMetaKeyToCompiledKey</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>MapType</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel)</signature>
                        <name>MarkLabel</name>
                    </method>
                    <method>
                        <signature>void(System.Type, ProtoBuf.Serializers.IProtoSerializer, ProtoBuf.Compiler.Local)</signature>
                        <name>ReadNullCheckedTail</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.LocalBuilder)</signature>
                        <name>ReleaseToPool</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Return</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.Local)</signature>
                        <name>StoreValue</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.FieldInfo)</signature>
                        <name>StoreValue</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.PropertyInfo)</signature>
                        <name>StoreValue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Subtract</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CodeLabel[])</signature>
                        <name>Switch</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>TryCast</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Compiler.Local)</signature>
                        <name>UseShortForm</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.IDisposable(ProtoBuf.Compiler.Local)</signature>
                        <name>Using</name>
                    </method>
                    <method>
                        <signature>void(System.Type, ProtoBuf.Serializers.IProtoSerializer, ProtoBuf.Compiler.Local)</signature>
                        <name>WriteNullCheckedTail</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.Local()</signature>
                        <name>get_InputValue</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.CompilerContext/ILVersion()</signature>
                        <name>get_MetadataVersion</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>get_Model</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_NonPublic</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>assemblyName</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.ILGenerator</signature>
                        <name>il</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Compiler.Local</signature>
                        <name>inputValue</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isStatic</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isWriter</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList</signature>
                        <name>knownTrustedAssemblies</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList</signature>
                        <name>knownUntrustedAssemblies</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MutableList</signature>
                        <name>locals</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Compiler.CompilerContext/ILVersion</signature>
                        <name>metadataVersion</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.DynamicMethod</signature>
                        <name>method</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel/SerializerPair[]</signature>
                        <name>methodPairs</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>next</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>nextLabel</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>nonPublic</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_p</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.Compiler.Local()</signature>
                        <name>InputValue</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Compiler.CompilerContext/ILVersion()</signature>
                        <name>MetadataVersion</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>Model</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>NonPublic</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Compiler.CompilerContext/ILVersion</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Compiler.CompilerContext/ILVersion</signature>
                        <name>Net1</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Compiler.CompilerContext/ILVersion</signature>
                        <name>Net2</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Compiler.CompilerContext/UsingBlock</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Compiler.CompilerContext</signature>
                        <name>ctx</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Compiler.CodeLabel</signature>
                        <name>label</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Compiler.Local</signature>
                        <name>local</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Compiler.Local</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.LocalBuilder, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.Local()</signature>
                        <name>AsCopy</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Compiler.Local)</signature>
                        <name>IsSame</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Emit.LocalBuilder()</signature>
                        <name>get_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Compiler.CompilerContext</signature>
                        <name>ctx</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.LocalBuilder</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>System.Reflection.Emit.LocalBuilder()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Compiler.ProtoDeserializer</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, ProtoBuf.ProtoReader, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Compiler.ProtoSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, ProtoBuf.ProtoWriter, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.DataFormat</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>FixedSize</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>Group</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>TwosComplement</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>ZigZag</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Extensible</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(ProtoBuf.IExtensible, int32, !!0)</signature>
                        <name>AppendValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, !!0)</signature>
                        <name>AppendValue</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, object)</signature>
                        <name>AppendValue</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.IExtension(ProtoBuf.IExtension&amp;, bool)</signature>
                        <name>GetExtensionObject</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.IExtension(bool)</signature>
                        <name>GetExtensionObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(ProtoBuf.IExtensible, int32)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(ProtoBuf.IExtensible, int32)</signature>
                        <name>GetValues</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat)</signature>
                        <name>GetValues</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable(ProtoBuf.Meta.TypeModel, System.Type, ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat)</signature>
                        <name>GetValues</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.IExtension(bool)</signature>
                        <name>ProtoBuf.IExtensible.GetExtensionObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(ProtoBuf.IExtensible, int32, !!0&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, !!0&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, bool, !!0&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel, System.Type, ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, bool, object&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.IExtension</signature>
                        <name>extensionObject</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ExtensibleUtil</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, object)</signature>
                        <name>AppendExtendValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, bool, bool)</signature>
                        <name>GetExtendedValues</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable(ProtoBuf.Meta.TypeModel, System.Type, ProtoBuf.IExtensible, int32, ProtoBuf.DataFormat, bool, bool)</signature>
                        <name>GetExtendedValues</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TValue</name>
                </genericparameter>
                <name>ProtoBuf.ExtensibleUtil/&lt;GetExtendedValues&gt;d__0`1</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally4</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TValue&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TValue&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__allowDefinedTag</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>&lt;&gt;3__format</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.IExtensible</signature>
                        <name>&lt;&gt;3__instance</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__singleton</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__tag</name>
                    </field>
                    <field>
                        <signature>System.Collections.IEnumerator</signature>
                        <name>&lt;&gt;7__wrap2</name>
                    </field>
                    <field>
                        <signature>System.IDisposable</signature>
                        <name>&lt;&gt;7__wrap3</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;value&gt;5__1</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>allowDefinedTag</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>format</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.IExtensible</signature>
                        <name>instance</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>singleton</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>tag</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TValue&gt;.Current</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ExtensibleUtil/&lt;GetExtendedValues&gt;d__7</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyd</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;object&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Object&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>&lt;&gt;3__format</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.IExtensible</signature>
                        <name>&lt;&gt;3__instance</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>&lt;&gt;3__model</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;&gt;3__singleton</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__tag</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;&gt;3__type</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.SerializationContext</signature>
                        <name>&lt;ctx&gt;5__c</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.IExtension</signature>
                        <name>&lt;extn&gt;5__8</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoReader</signature>
                        <name>&lt;reader&gt;5__b</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>&lt;stream&gt;5__9</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;value&gt;5__a</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>format</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.IExtensible</signature>
                        <name>instance</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>singleton</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>tag</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Object&gt;.Current</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Helpers</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>System.Text.StringBuilder(System.Text.StringBuilder)</signature>
                        <name>AppendLine</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, unsigned int8[], int32, int32)</signature>
                        <name>BlockCopy</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>DebugAssert</name>
                    </method>
                    <method>
                        <signature>void(bool, string)</signature>
                        <name>DebugAssert</name>
                    </method>
                    <method>
                        <signature>void(bool, string, object[])</signature>
                        <name>DebugAssert</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>DebugWriteLine</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>DebugWriteLine</name>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo(System.Type, System.Type[], bool)</signature>
                        <name>GetConstructor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo[](System.Type, bool)</signature>
                        <name>GetConstructors</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Reflection.PropertyInfo, bool, bool)</signature>
                        <name>GetGetMethod</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo[](System.Type, bool)</signature>
                        <name>GetInstanceFieldsAndProperties</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Type, string)</signature>
                        <name>GetInstanceMethod</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Type, string, System.Type[])</signature>
                        <name>GetInstanceMethod</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.MemberInfo)</signature>
                        <name>GetMemberType</name>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo(System.Type, string, bool)</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Reflection.PropertyInfo, bool, bool)</signature>
                        <name>GetSetMethod</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Type, string)</signature>
                        <name>GetStaticMethod</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.ProtoTypeCode(System.Type)</signature>
                        <name>GetTypeCode</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>GetUnderlyingType</name>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>IsAssignableFrom</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsEnum</name>
                    </method>
                    <method>
                        <signature>bool(float32)</signature>
                        <name>IsInfinity</name>
                    </method>
                    <method>
                        <signature>bool(float64)</signature>
                        <name>IsInfinity</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>IsSubclassOf</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsValueType</name>
                    </method>
                    <method>
                        <signature>object(System.Type, string)</signature>
                        <name>ParseEnum</name>
                    </method>
                    <method>
                        <signature>void(int32[], object[])</signature>
                        <name>Sort</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>TraceWriteLine</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>EmptyTypes</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.IExtensible</name>
                <methodlist>
                    <method>
                        <signature>ProtoBuf.IExtension(bool)</signature>
                        <name>GetExtensionObject</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.IExtension</name>
                <methodlist>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>BeginAppend</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>BeginQuery</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, bool)</signature>
                        <name>EndAppend</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>EndQuery</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetLength</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ImplicitFields</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.ImplicitFields</signature>
                        <name>AllFields</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ImplicitFields</signature>
                        <name>AllPublic</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ImplicitFields</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.MemberSerializationOptions</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>AsReference</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>AsReferenceHasValue</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>DynamicType</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>OverwriteList</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>Packed</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>Required</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.AttributeMap</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.AttributeMap[](ProtoBuf.Meta.TypeModel, System.Reflection.Assembly)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.AttributeMap[](ProtoBuf.Meta.TypeModel, System.Reflection.MemberInfo, bool)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.AttributeMap[](ProtoBuf.Meta.TypeModel, System.Type, bool)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>bool(string, bool, object&amp;)</signature>
                        <name>TryGet</name>
                    </method>
                    <method>
                        <signature>bool(string, object&amp;)</signature>
                        <name>TryGet</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_AttributeType</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Target</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>AttributeType</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Target</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.AttributeMap/ReflectionAttributeMap</name>
                <methodlist>
                    <method>
                        <signature>void(System.Attribute)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string, bool, object&amp;)</signature>
                        <name>TryGet</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_AttributeType</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Target</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Attribute</signature>
                        <name>attribute</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>AttributeType</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Target</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.BasicList</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.BasicList(int32[], object[])</signature>
                        <name>GetContiguousGroups</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.BasicList/NodeEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.Meta.BasicList/MatchPredicate, object)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>IndexOfReference</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>IndexOfString</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Trim</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList/Node</signature>
                        <name>head</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList/Node</signature>
                        <name>nil</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>object(int32)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.BasicList/Group</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>First</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList</signature>
                        <name>Items</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.BasicList/MatchPredicate</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, object, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>bool(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.BasicList/Node</name>
                <methodlist>
                    <method>
                        <signature>void(object[], int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.BasicList/Node(object)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.Meta.BasicList/MatchPredicate, object)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>IndexOfReference</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>IndexOfString</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveLastWithMutate</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.BasicList/Node()</signature>
                        <name>Trim</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>data</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>length</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object(int32)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Length</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.BasicList/NodeEnumerator</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.BasicList/Node)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Current</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList/Node</signature>
                        <name>node</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>position</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.CallbackSet</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.MetaType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel, System.Reflection.MethodInfo)</signature>
                        <name>CheckCallbackParameters</name>
                    </method>
                    <method>
                        <signature>System.Exception(System.Reflection.MethodInfo)</signature>
                        <name>CreateInvalidCallbackSignature</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(ProtoBuf.Meta.TypeModel, System.Reflection.MethodInfo)</signature>
                        <name>SanityCheckCallback</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_AfterDeserialize</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_AfterSerialize</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_BeforeDeserialize</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>get_BeforeSerialize</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_NonTrivial</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_AfterDeserialize</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_AfterSerialize</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_BeforeDeserialize</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>set_BeforeSerialize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>afterDeserialize</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>afterSerialize</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>beforeDeserialize</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>beforeSerialize</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType</signature>
                        <name>metaType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>AfterDeserialize</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>AfterSerialize</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>BeforeDeserialize</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo()</signature>
                        <name>BeforeSerialize</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MethodInfo(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>NonTrivial</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.LockContentedEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OwnerStackTrace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ownerStackTrace</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>OwnerStackTrace</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.LockContentedEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, ProtoBuf.Meta.LockContentedEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.LockContentedEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.MetaType</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.RuntimeTypeModel, System.Type, System.Reflection.MethodInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(int32, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(int32, string, System.Type, System.Type)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(int32, string, object)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(string[])</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.ValueMember)</signature>
                        <name>Add</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.ValueMember(int32, string)</signature>
                        <name>AddField</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.ValueMember(int32, string, System.Type, System.Type)</signature>
                        <name>AddField</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.ValueMember(int32, string, System.Type, System.Type, object)</signature>
                        <name>AddField</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(int32, System.Type)</signature>
                        <name>AddSubType</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(int32, System.Type, ProtoBuf.DataFormat)</signature>
                        <name>AddSubType</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.ValueMember(bool, ProtoBuf.ProtoMemberAttribute)</signature>
                        <name>ApplyDefaultBehaviour</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ApplyDefaultBehaviour</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, ProtoBuf.Meta.MetaType/AttributeFamily, bool, ProtoBuf.Meta.BasicList, int32, bool, ProtoBuf.ImplicitFields, ProtoBuf.Meta.BasicList, System.Reflection.MemberInfo, bool&amp;, bool, bool, System.Type&amp;)</signature>
                        <name>ApplyDefaultBehaviour_AddMembers</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoTypeSerializer()</signature>
                        <name>BuildSerializer</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo, ProtoBuf.Meta.AttributeMap[], string, System.Reflection.MethodInfo[]&amp;, int32)</signature>
                        <name>CheckForCallback</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Reflection.MethodInfo[], int32, int32)</signature>
                        <name>Coalesce</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CompileInPlace</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.RuntimeTypeModel, System.Type)</signature>
                        <name>GetAsReferenceDefault</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.AttributeMap(ProtoBuf.Meta.AttributeMap[], string)</signature>
                        <name>GetAttribute</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Type(ProtoBuf.Meta.MetaType)</signature>
                        <name>GetBaseType</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType/AttributeFamily(ProtoBuf.Meta.RuntimeTypeModel, System.Type, ProtoBuf.Meta.AttributeMap[])</signature>
                        <name>GetContractFamily</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.DataFormat&amp;, ProtoBuf.Meta.AttributeMap, string)</signature>
                        <name>GetDataFormat</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.EnumSerializer/EnumPair[]()</signature>
                        <name>GetEnumMap</name>
                    </method>
                    <method>
                        <signature>bool(bool&amp;, ProtoBuf.Meta.AttributeMap, string, bool)</signature>
                        <name>GetFieldBoolean</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(bool&amp;, ProtoBuf.Meta.AttributeMap, string)</signature>
                        <name>GetFieldBoolean</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(string&amp;, ProtoBuf.Meta.AttributeMap, string)</signature>
                        <name>GetFieldName</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int32&amp;, ProtoBuf.Meta.AttributeMap, string)</signature>
                        <name>GetFieldNumber</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.ValueMember[]()</signature>
                        <name>GetFields</name>
                    </method>
                    <method>
                        <signature>void(bool&amp;, ProtoBuf.Meta.AttributeMap, ProtoBuf.Meta.AttributeMap[], string)</signature>
                        <name>GetIgnore</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(bool, bool)</signature>
                        <name>GetKey</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetNextFieldNumber</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(ProtoBuf.Meta.MetaType)</signature>
                        <name>GetRootType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetSchemaTypeName</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.SubType[]()</signature>
                        <name>GetSubtypes</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(bool)</signature>
                        <name>GetSurrogateOrBaseOrSelf</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType()</signature>
                        <name>GetSurrogateOrSelf</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.MetaType/AttributeFamily, ProtoBuf.Meta.MetaType/AttributeFamily)</signature>
                        <name>HasFamily</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>HasFlag</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Exception(System.Type)</signature>
                        <name>InbuiltType</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsDefined</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsPrepared</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsValidSubType</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Text.StringBuilder(System.Text.StringBuilder, int32)</signature>
                        <name>NewLine</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.ProtoMemberAttribute(ProtoBuf.Meta.TypeModel, System.Reflection.MemberInfo, ProtoBuf.Meta.MetaType/AttributeFamily, bool, bool, ProtoBuf.Meta.BasicList, int32, bool)</signature>
                        <name>NormalizeProtoMember</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>ProtoBuf.Serializers.ISerializerProxy.get_Serializer</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type, System.Type&amp;, System.Type&amp;)</signature>
                        <name>ResolveListTypes</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(string, bool)</signature>
                        <name>ResolveMethod</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.ConstructorInfo(System.Type, System.Reflection.MemberInfo[]&amp;)</signature>
                        <name>ResolveTupleConstructor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.MetaType)</signature>
                        <name>SetBaseType</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.MethodInfo)</signature>
                        <name>SetCallbacks</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(string, string, string, string)</signature>
                        <name>SetCallbacks</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(System.Reflection.MethodInfo)</signature>
                        <name>SetFactory</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(string)</signature>
                        <name>SetFactory</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8, bool, bool)</signature>
                        <name>SetFlag</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>SetSurrogate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ThrowIfFrozen</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, int32, bool&amp;)</signature>
                        <name>WriteSchema</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AsReferenceDefault</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType()</signature>
                        <name>get_BaseType</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.CallbackSet()</signature>
                        <name>get_Callbacks</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ConstructType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EnumPassthru</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable()</signature>
                        <name>get_Fields</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasCallbacks</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasSubtypes</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreListHandling</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IncludeSerializerMethod</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAutoTuple</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsList</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsValueType</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.ValueMember(System.Reflection.MemberInfo)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.ValueMember(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>get_Model</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Pending</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoTypeSerializer()</signature>
                        <name>get_Serializer</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseConstructor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AsReferenceDefault</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_ConstructType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EnumPassthru</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreListHandling</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IncludeSerializerMethod</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Pending</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseConstructor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType</signature>
                        <name>baseType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.CallbackSet</signature>
                        <name>callbacks</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>constructType</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>factory</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList</signature>
                        <name>fields</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>unsigned int8 modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>flags</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>ienumerable</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel</signature>
                        <name>model</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoTypeSerializer</signature>
                        <name>serializer</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList</signature>
                        <name>subTypes</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>surrogate</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AsReferenceDefault</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.MetaType()</signature>
                        <name>BaseType</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.CallbackSet()</signature>
                        <name>Callbacks</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ConstructType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>EnumPassthru</name>
                    </property>
                    <property>
                        <signature>System.Collections.IEnumerable()</signature>
                        <name>Fields</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasCallbacks</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasSubtypes</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoreListHandling</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IncludeSerializerMethod</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsAutoTuple</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsList</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsValueType</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.ValueMember(System.Reflection.MemberInfo)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.ValueMember(int32)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>Model</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Pending</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>ProtoBuf.Serializers.ISerializerProxy.Serializer</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Serializers.IProtoTypeSerializer()</signature>
                        <name>Serializer</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UseConstructor</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.MetaType/AttributeFamily</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType/AttributeFamily</signature>
                        <name>AutoTuple</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType/AttributeFamily</signature>
                        <name>DataContractSerialier</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType/AttributeFamily</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType/AttributeFamily</signature>
                        <name>ProtoBuf</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType/AttributeFamily</signature>
                        <name>XmlSerializer</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.MetaType/Comparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.Meta.MetaType, ProtoBuf.Meta.MetaType)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>int32(object, object)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType/Comparer</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.MutableList</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveLast</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object(int32)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.RuntimeTypeModel</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(System.Type, bool)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddContention</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>BasicTypeFinderImpl</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BuildAllSerializers</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.BasicList, ProtoBuf.Meta.MetaType)</signature>
                        <name>CascadeDependents</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>Compile</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel(ProtoBuf.Meta.RuntimeTypeModel/CompilerOptions)</signature>
                        <name>Compile</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel(string, string)</signature>
                        <name>Compile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CompileInPlace</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(System.Type)</signature>
                        <name>Create</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object(int32, object, ProtoBuf.ProtoReader)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Emit.MethodBuilder(System.Reflection.Emit.TypeBuilder, int32, System.Type, ProtoBuf.Meta.RuntimeTypeModel/SerializerPair[], ProtoBuf.Meta.TypeModel, ProtoBuf.Compiler.CompilerContext/ILVersion, string)</signature>
                        <name>EmitBoxedSerializer</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(System.Type, bool, bool, bool)</signature>
                        <name>FindOrAddAuto</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(System.Type)</signature>
                        <name>FindWithoutAdd</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Freeze</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetContention</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.EnumSerializer/EnumPair[](System.Type)</signature>
                        <name>GetEnumMap</name>
                    </method>
                    <method>
                        <signature>int32(System.Type, bool, bool)</signature>
                        <name>GetKey</name>
                    </method>
                    <method>
                        <signature>int32(System.Type)</signature>
                        <name>GetKeyImpl</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>GetOption</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(System.Type)</signature>
                        <name>GetSchema</name>
                    </method>
                    <method>
                        <signature>string(System.Type, ProtoBuf.DataFormat, bool, bool, bool&amp;)</signature>
                        <name>GetSchemaTypeName</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.ProtoSerializer(ProtoBuf.Serializers.IProtoSerializer, bool)</signature>
                        <name>GetSerializer</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable()</signature>
                        <name>GetTypes</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsPrepared</name>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>MetaTypeFinderImpl</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Emit.ILGenerator(System.Reflection.Emit.TypeBuilder, string)</signature>
                        <name>Override</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(System.Type)</signature>
                        <name>RecogniseCommonTypes</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ReleaseLock</name>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Type&amp;, System.Type&amp;)</signature>
                        <name>ResolveListTypes</name>
                    </method>
                    <method>
                        <signature>void(int32, object, ProtoBuf.ProtoWriter)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>SetDefaultFactory</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8, bool)</signature>
                        <name>SetOption</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int32&amp;)</signature>
                        <name>TakeLock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ThrowIfFrozen</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer(System.Type)</signature>
                        <name>TryGetBasicTypeSerializer</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo, System.Type)</signature>
                        <name>VerifyFactory</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.MetaType)</signature>
                        <name>WaitOnLock</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.RuntimeTypeModel/CompilerOptions, string, System.Reflection.Emit.AssemblyBuilder)</signature>
                        <name>WriteAssemblyAttributes</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.Emit.TypeBuilder(ProtoBuf.Meta.RuntimeTypeModel/CompilerOptions, string, System.Reflection.Emit.ModuleBuilder)</signature>
                        <name>WriteBasicTypeModel</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.TypeBuilder, int32&amp;, ProtoBuf.Meta.RuntimeTypeModel/SerializerPair[], System.Reflection.Emit.ILGenerator&amp;, int32, System.Reflection.Emit.FieldBuilder, System.Type, ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>WriteConstructors</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Emit.TypeBuilder, bool, ProtoBuf.Meta.RuntimeTypeModel/SerializerPair[], ProtoBuf.Compiler.CompilerContext/ILVersion, string, System.Reflection.Emit.ILGenerator&amp;, int32&amp;, System.Reflection.Emit.FieldBuilder&amp;, System.Type&amp;)</signature>
                        <name>WriteGetKeyImpl</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Compiler.CompilerContext(string, System.Reflection.Emit.TypeBuilder, ProtoBuf.Meta.RuntimeTypeModel/SerializerPair[], ProtoBuf.Compiler.CompilerContext/ILVersion, System.Reflection.Emit.ILGenerator&amp;)</signature>
                        <name>WriteSerializeDeserialize</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.RuntimeTypeModel/CompilerOptions, string, System.Reflection.Emit.TypeBuilder, int32&amp;, bool&amp;, ProtoBuf.Meta.RuntimeTypeModel/SerializerPair[]&amp;, ProtoBuf.Compiler.CompilerContext/ILVersion&amp;)</signature>
                        <name>WriteSerializers</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.LockContentedEventHandler)</signature>
                        <name>add_LockContended</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowParseableTypes</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AutoAddMissingTypes</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AutoAddProtoContractTypesOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AutoCompile</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel()</signature>
                        <name>get_Default</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InferTagFromNameDefault</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType(System.Type)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MetadataTimeoutMilliseconds</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseImplicitZeroDefaults</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.LockContentedEventHandler)</signature>
                        <name>remove_LockContended</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowParseableTypes</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AutoAddMissingTypes</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AutoAddProtoContractTypesOnly</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AutoCompile</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InferTagFromNameDefault</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MetadataTimeoutMilliseconds</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseImplicitZeroDefaults</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList/MatchPredicate</signature>
                        <name>BasicTypeFinder</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.LockContentedEventHandler</signature>
                        <name>LockContended</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList/MatchPredicate</signature>
                        <name>MetaTypeFinder</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList</signature>
                        <name>basicTypes</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>contentionCounter</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>defaultFactory</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>metadataTimeoutMilliseconds</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>options</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.BasicList</signature>
                        <name>types</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AllowParseableTypes</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AutoAddMissingTypes</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AutoAddProtoContractTypesOnly</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AutoCompile</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel()</signature>
                        <name>Default</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>InferTagFromNameDefault</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.MetaType(System.Type)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MetadataTimeoutMilliseconds</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UseImplicitZeroDefaults</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>ProtoBuf.Meta.LockContentedEventHandler</signature>
                        <name>LockContended</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>ProtoBuf.Meta.RuntimeTypeModel/Accessibility</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel/Accessibility</signature>
                        <name>Internal</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel/Accessibility</signature>
                        <name>Public</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.RuntimeTypeModel/BasicType</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>get_Serializer</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoSerializer</signature>
                        <name>serializer</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>Serializer</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.RuntimeTypeModel/CompilerOptions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.MetaType)</signature>
                        <name>SetFrameworkOptions</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel/Accessibility()</signature>
                        <name>get_Accessibility</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ImageRuntimeVersion</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MetaDataVersion</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OutputPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TargetFrameworkDisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TargetFrameworkName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TypeName</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.RuntimeTypeModel/Accessibility)</signature>
                        <name>set_Accessibility</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ImageRuntimeVersion</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MetaDataVersion</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_OutputPath</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TargetFrameworkDisplayName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TargetFrameworkName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TypeName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel/Accessibility</signature>
                        <name>accessibility</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>imageRuntimeVersion</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>metaDataVersion</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>outputPath</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>targetFrameworkDisplayName</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>targetFrameworkName</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>typeName</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel/Accessibility()</signature>
                        <name>Accessibility</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ImageRuntimeVersion</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MetaDataVersion</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>OutputPath</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TargetFrameworkDisplayName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TargetFrameworkName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TypeName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.RuntimeTypeModel/SerializerPair</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32, ProtoBuf.Meta.MetaType, System.Reflection.Emit.MethodBuilder, System.Reflection.Emit.MethodBuilder, System.Reflection.Emit.ILGenerator, System.Reflection.Emit.ILGenerator)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.IComparable.CompareTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>BaseKey</name>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.MethodBuilder</signature>
                        <name>Deserialize</name>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.ILGenerator</signature>
                        <name>DeserializeBody</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MetaKey</name>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.MethodBuilder</signature>
                        <name>Serialize</name>
                    </field>
                    <field>
                        <signature>System.Reflection.Emit.ILGenerator</signature>
                        <name>SerializeBody</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType</signature>
                        <name>Type</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.RuntimeTypeModel/Singleton</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel</signature>
                        <name>Value</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.SubType</name>
                <methodlist>
                    <method>
                        <signature>void(int32, ProtoBuf.Meta.MetaType, ProtoBuf.DataFormat)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>BuildSerializer</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MetaType()</signature>
                        <name>get_DerivedType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FieldNumber</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>get_Serializer</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>dataFormat</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MetaType</signature>
                        <name>derivedType</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fieldNumber</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoSerializer</signature>
                        <name>serializer</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.Meta.MetaType()</signature>
                        <name>DerivedType</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FieldNumber</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>Serializer</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.SubType/Comparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.Meta.SubType, ProtoBuf.Meta.SubType)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>int32(object, object)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.SubType/Comparer</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.TypeFormatEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FormattedName</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FormattedName</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Type</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>formattedName</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>typeFixed</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>FormattedName</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.TypeFormatEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, ProtoBuf.Meta.TypeFormatEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeFormatEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.TypeModel</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanSerialize</name>
                    </method>
                    <method>
                        <signature>bool(System.Type, bool, bool, bool)</signature>
                        <name>CanSerialize</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanSerializeBasicType</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanSerializeContractType</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel, System.Type, System.Type)</signature>
                        <name>CheckDictionaryAccessors</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel()</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.IFormatter(System.Type)</signature>
                        <name>CreateFormatter</name>
                    </method>
                    <method>
                        <signature>object(System.Type, System.Type)</signature>
                        <name>CreateListInstance</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>CreateNestedListsNotSupported</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>DeepClone</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader, object, System.Type)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type, ProtoBuf.SerializationContext)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type, int32)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type, int32, ProtoBuf.SerializationContext)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(int32, object, ProtoBuf.ProtoReader)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader, System.Type, object, bool)</signature>
                        <name>DeserializeCore</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.IO.Stream, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>DeserializeItems</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.IO.Stream, ProtoBuf.PrefixStyle, int32, ProtoBuf.SerializationContext)</signature>
                        <name>DeserializeItems</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable(System.IO.Stream, System.Type, ProtoBuf.PrefixStyle, int32, ProtoBuf.Serializer/TypeResolver)</signature>
                        <name>DeserializeItems</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerable(System.IO.Stream, System.Type, ProtoBuf.PrefixStyle, int32, ProtoBuf.Serializer/TypeResolver, ProtoBuf.SerializationContext)</signature>
                        <name>DeserializeItems</name>
                    </method>
                    <method>
                        <signature>System.Type(ProtoBuf.Meta.TypeModel, string)</signature>
                        <name>DeserializeType</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>DeserializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type, ProtoBuf.PrefixStyle, int32, ProtoBuf.Serializer/TypeResolver)</signature>
                        <name>DeserializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type, ProtoBuf.PrefixStyle, int32, ProtoBuf.Serializer/TypeResolver, int32&amp;)</signature>
                        <name>DeserializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object, System.Type, ProtoBuf.PrefixStyle, int32, ProtoBuf.Serializer/TypeResolver, int32&amp;, bool&amp;, ProtoBuf.SerializationContext)</signature>
                        <name>DeserializeWithLengthPrefix</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(System.Type&amp;)</signature>
                        <name>GetKey</name>
                    </method>
                    <method>
                        <signature>int32(System.Type)</signature>
                        <name>GetKeyImpl</name>
                    </method>
                    <method>
                        <signature>System.Type(ProtoBuf.Meta.TypeModel, System.Type)</signature>
                        <name>GetListItemType</name>
                    </method>
                    <method>
                        <signature>string(System.Type)</signature>
                        <name>GetSchema</name>
                    </method>
                    <method>
                        <signature>System.Type(string, System.Reflection.Assembly)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.WireType(ProtoBuf.ProtoTypeCode, ProtoBuf.DataFormat, System.Type&amp;, int32&amp;)</signature>
                        <name>GetWireType</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsDefined</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>MapType</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Type, bool)</signature>
                        <name>MapType</name>
                    </method>
                    <method>
                        <signature>bool(object, System.Type&amp;)</signature>
                        <name>PrepareDeserialize</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Type(string, ProtoBuf.Meta.TypeModel, System.Reflection.Assembly)</signature>
                        <name>ResolveKnownType</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(ProtoBuf.Meta.TypeModel, System.Type, System.Type, bool&amp;)</signature>
                        <name>ResolveListAdd</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>ResolveProxies</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoWriter, object)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, object)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, object, ProtoBuf.SerializationContext)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(int32, object, ProtoBuf.ProtoWriter)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoWriter, object)</signature>
                        <name>SerializeCore</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string(ProtoBuf.Meta.TypeModel, System.Type)</signature>
                        <name>SerializeType</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, object, System.Type, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>SerializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, object, System.Type, ProtoBuf.PrefixStyle, int32, ProtoBuf.SerializationContext)</signature>
                        <name>SerializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, ProtoBuf.Meta.BasicList, System.Type)</signature>
                        <name>TestEnumerableListPatterns</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>ThrowCannotCreateInstance</name>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Type)</signature>
                        <name>ThrowUnexpectedSubtype</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>ThrowUnexpectedType</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.ProtoReader, ProtoBuf.DataFormat, int32, System.Type, object&amp;, bool, bool, bool, bool)</signature>
                        <name>TryDeserializeAuxiliaryType</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel, ProtoBuf.ProtoReader, ProtoBuf.DataFormat, int32, System.Type, System.Type, object&amp;)</signature>
                        <name>TryDeserializeList</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.ProtoWriter, System.Type, ProtoBuf.DataFormat, int32, object, bool)</signature>
                        <name>TrySerializeAuxiliaryType</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeFormatEventHandler)</signature>
                        <name>add_DynamicTypeFormatting</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeFormatEventHandler)</signature>
                        <name>remove_DynamicTypeFormatting</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.TypeFormatEventHandler</signature>
                        <name>DynamicTypeFormatting</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>ilist</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist>
                    <event>
                        <signature>ProtoBuf.Meta.TypeFormatEventHandler</signature>
                        <name>DynamicTypeFormatting</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>ProtoBuf.Meta.TypeModel/CallbackType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel/CallbackType</signature>
                        <name>AfterDeserialize</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel/CallbackType</signature>
                        <name>AfterSerialize</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel/CallbackType</signature>
                        <name>BeforeDeserialize</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel/CallbackType</signature>
                        <name>BeforeSerialize</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.TypeModel/DeserializeItemsIterator</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.IO.Stream, System.Type, ProtoBuf.PrefixStyle, int32, ProtoBuf.Serializer/TypeResolver, ProtoBuf.SerializationContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Current</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.SerializationContext</signature>
                        <name>context</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>current</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>expectedField</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>haveObject</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializer/TypeResolver</signature>
                        <name>resolver</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>source</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.PrefixStyle</signature>
                        <name>style</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.IO.Stream, ProtoBuf.PrefixStyle, int32, ProtoBuf.SerializationContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Current</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.TypeModel/Formatter</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, object)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.SerializationBinder()</signature>
                        <name>get_Binder</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.StreamingContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.ISurrogateSelector()</signature>
                        <name>get_SurrogateSelector</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationBinder)</signature>
                        <name>set_Binder</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.StreamingContext)</signature>
                        <name>set_Context</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.ISurrogateSelector)</signature>
                        <name>set_SurrogateSelector</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Runtime.Serialization.SerializationBinder</signature>
                        <name>binder</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.StreamingContext</signature>
                        <name>context</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.ISurrogateSelector</signature>
                        <name>surrogateSelector</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Runtime.Serialization.SerializationBinder()</signature>
                        <name>Binder</name>
                    </property>
                    <property>
                        <signature>System.Runtime.Serialization.StreamingContext()</signature>
                        <name>Context</name>
                    </property>
                    <property>
                        <signature>System.Runtime.Serialization.ISurrogateSelector()</signature>
                        <name>SurrogateSelector</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.ValueMember</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.RuntimeTypeModel, System.Type, int32, System.Reflection.MemberInfo, System.Type, System.Type, System.Type, ProtoBuf.DataFormat, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.RuntimeTypeModel, int32, System.Type, System.Type, System.Type, ProtoBuf.DataFormat)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>BuildSerializer</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.WireType(ProtoBuf.DataFormat)</signature>
                        <name>GetDateTimeWireType</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.WireType(ProtoBuf.DataFormat, int32)</signature>
                        <name>GetIntWireType</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetRawEnumValue</name>
                    </method>
                    <method>
                        <signature>string(bool, bool&amp;)</signature>
                        <name>GetSchemaTypeName</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>HasFlag</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object(System.Type, object)</signature>
                        <name>ParseDefaultValue</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8, bool, bool)</signature>
                        <name>SetFlag</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetName</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo, System.Reflection.MethodInfo)</signature>
                        <name>SetSpecified</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ThrowIfFrozen</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer(ProtoBuf.Meta.RuntimeTypeModel, ProtoBuf.DataFormat, System.Type, ProtoBuf.WireType&amp;, bool, bool, bool, bool)</signature>
                        <name>TryGetCoreSerializer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AsReference</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.DataFormat()</signature>
                        <name>get_DataFormat</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DefaultType</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_DefaultValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DynamicType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FieldNumber</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPacked</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRequired</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsStrict</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ItemType</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo()</signature>
                        <name>get_Member</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_MemberType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_OverwriteList</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ParentType</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>get_Serializer</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SupportNull</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AsReference</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.DataFormat)</signature>
                        <name>set_DataFormat</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_DefaultValue</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DynamicType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsPacked</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsRequired</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsStrict</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_OverwriteList</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_SupportNull</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>asReference</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>dataFormat</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>defaultType</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>defaultValue</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>dynamicType</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fieldNumber</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>flags</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>getSpecified</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>itemType</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>member</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>memberType</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.RuntimeTypeModel</signature>
                        <name>model</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>parentType</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoSerializer</signature>
                        <name>serializer</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>setSpecified</name>
                        <newname>eval_n</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AsReference</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.DataFormat()</signature>
                        <name>DataFormat</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>DefaultType</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>DefaultValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>DynamicType</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FieldNumber</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsPacked</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRequired</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsStrict</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ItemType</name>
                    </property>
                    <property>
                        <signature>System.Reflection.MemberInfo()</signature>
                        <name>Member</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>MemberType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>OverwriteList</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ParentType</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>Serializer</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>SupportNull</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Meta.ValueMember/Comparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.Meta.ValueMember, ProtoBuf.Meta.ValueMember)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>int32(object, object)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.ValueMember/Comparer</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.NetObjectCache</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object, bool&amp;)</signature>
                        <name>AddObjectKey</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>GetKeyedObject</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>RegisterTrappedObject</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>SetKeyedObject</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.MutableList()</signature>
                        <name>get_List</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Root</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;object,int32&gt;</signature>
                        <name>objectKeys</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>rootObject</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,int32&gt;</signature>
                        <name>stringKeys</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>trapStartIndex</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MutableList</signature>
                        <name>underlyingList</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.Meta.MutableList()</signature>
                        <name>List</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.NetObjectCache/ReferenceComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object, object)</signature>
                        <name>System.Collections.Generic.IEqualityComparer&lt;System.Object&gt;.Equals</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.Generic.IEqualityComparer&lt;System.Object&gt;.GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.NetObjectCache/ReferenceComparer</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.PrefixStyle</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.PrefixStyle</signature>
                        <name>Base128</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.PrefixStyle</signature>
                        <name>Fixed32</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.PrefixStyle</signature>
                        <name>Fixed32BigEndian</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.PrefixStyle</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoAfterDeserializationAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoAfterSerializationAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoBeforeDeserializationAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoBeforeSerializationAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoContractAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8)</signature>
                        <name>HasFlag</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8, bool)</signature>
                        <name>SetFlag</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AsReferenceDefault</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DataMemberOffset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EnumPassthru</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EnumPassthruHasValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreListHandling</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.ImplicitFields()</signature>
                        <name>get_ImplicitFields</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImplicitFirstTag</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InferTagFromName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InferTagFromNameHasValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SkipConstructor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseProtoMembersOnly</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AsReferenceDefault</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DataMemberOffset</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EnumPassthru</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreListHandling</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ImplicitFields)</signature>
                        <name>set_ImplicitFields</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ImplicitFirstTag</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InferTagFromName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_SkipConstructor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseProtoMembersOnly</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>dataMemberOffset</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>flags</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.ImplicitFields</signature>
                        <name>implicitFields</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>implicitFirstTag</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AsReferenceDefault</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>DataMemberOffset</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>EnumPassthru</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>EnumPassthruHasValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoreListHandling</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.ImplicitFields()</signature>
                        <name>ImplicitFields</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ImplicitFirstTag</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>InferTagFromName</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>InferTagFromNameHasValue</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>SkipConstructor</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UseProtoMembersOnly</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoEnumAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>HasValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>enumValue</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>hasValue</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoIgnoreAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoIncludeAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(int32, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.DataFormat()</signature>
                        <name>get_DataFormat</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_KnownType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_KnownTypeName</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.DataFormat)</signature>
                        <name>set_DataFormat</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>dataFormat</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>knownTypeName</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>tag</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.DataFormat()</signature>
                        <name>DataFormat</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>KnownType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>KnownTypeName</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Tag</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoMemberAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.ProtoMemberAttribute)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Rebase</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AsReference</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AsReferenceHasValue</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.DataFormat()</signature>
                        <name>get_DataFormat</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DynamicType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPacked</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRequired</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.MemberSerializationOptions()</signature>
                        <name>get_Options</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_OverwriteList</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AsReference</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AsReferenceHasValue</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.DataFormat)</signature>
                        <name>set_DataFormat</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DynamicType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsPacked</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsRequired</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.MemberSerializationOptions)</signature>
                        <name>set_Options</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_OverwriteList</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>Member</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>TagIsPinned</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.DataFormat</signature>
                        <name>dataFormat</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.MemberSerializationOptions</signature>
                        <name>options</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>tag</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AsReference</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>AsReferenceHasValue</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.DataFormat()</signature>
                        <name>DataFormat</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>DynamicType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsPacked</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRequired</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.MemberSerializationOptions()</signature>
                        <name>Options</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>OverwriteList</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Tag</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoPartialIgnoreAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MemberName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>memberName</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>MemberName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoPartialMemberAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MemberName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>memberName</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>MemberName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoReader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, ProtoBuf.Meta.TypeModel, ProtoBuf.SerializationContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, ProtoBuf.Meta.TypeModel, ProtoBuf.SerializationContext, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Exception(System.Exception, ProtoBuf.ProtoReader)</signature>
                        <name>AddErrorData</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], ProtoBuf.ProtoReader)</signature>
                        <name>AppendBytes</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.IExtensible)</signature>
                        <name>AppendExtensionData</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoWriter)</signature>
                        <name>AppendExtensionField</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.WireType)</signature>
                        <name>Assert</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckFullyConsumed</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.ProtoReader(System.IO.Stream, ProtoBuf.Meta.TypeModel, ProtoBuf.SerializationContext, int32)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>System.Exception(string)</signature>
                        <name>CreateException</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>CreateWireTypeException</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>System.Type(string)</signature>
                        <name>DeserializeType</name>
                    </method>
                    <method>
                        <signature>int32(System.IO.Stream)</signature>
                        <name>DirectReadBigEndianInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream, int32)</signature>
                        <name>DirectReadBytes</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, unsigned int8[], int32, int32)</signature>
                        <name>DirectReadBytes</name>
                    </method>
                    <method>
                        <signature>int32(System.IO.Stream)</signature>
                        <name>DirectReadLittleEndianInt32</name>
                    </method>
                    <method>
                        <signature>string(System.IO.Stream, int32)</signature>
                        <name>DirectReadString</name>
                    </method>
                    <method>
                        <signature>int32(System.IO.Stream)</signature>
                        <name>DirectReadVarintInt32</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.SubItemToken, ProtoBuf.ProtoReader)</signature>
                        <name>EndSubItem</name>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>Ensure</name>
                    </method>
                    <method>
                        <signature>System.Exception(ProtoBuf.ProtoReader)</signature>
                        <name>EoF</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.ProtoReader()</signature>
                        <name>GetRecycled</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(System.Type&amp;)</signature>
                        <name>GetTypeKey</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.WireType, ProtoBuf.ProtoReader)</signature>
                        <name>HasSubValue</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.WireType)</signature>
                        <name>Hint</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoReader, System.IO.Stream, ProtoBuf.Meta.TypeModel, ProtoBuf.SerializationContext, int32)</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Intern</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader, object, object)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoReader)</signature>
                        <name>NoteObject</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadBoolean</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>ReadByte</name>
                    </method>
                    <method>
                        <signature>int32(System.IO.Stream)</signature>
                        <name>ReadByteOrThrow</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>ReadDouble</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ReadFieldHeader</name>
                    </method>
                    <method>
                        <signature>int16()</signature>
                        <name>ReadInt16</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ReadInt32</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>ReadInt64</name>
                    </method>
                    <method>
                        <signature>int32(System.IO.Stream, bool, ProtoBuf.PrefixStyle, int32&amp;)</signature>
                        <name>ReadLengthPrefix</name>
                    </method>
                    <method>
                        <signature>int32(System.IO.Stream, bool, ProtoBuf.PrefixStyle, int32&amp;, int32&amp;)</signature>
                        <name>ReadLengthPrefix</name>
                    </method>
                    <method>
                        <signature>object(object, int32, ProtoBuf.ProtoReader)</signature>
                        <name>ReadObject</name>
                    </method>
                    <method>
                        <signature>int8()</signature>
                        <name>ReadSByte</name>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>ReadSingle</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadString</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>ReadType</name>
                    </method>
                    <method>
                        <signature>object(object, int32, ProtoBuf.ProtoReader, System.Type)</signature>
                        <name>ReadTypedObject</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>ReadUInt16</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>ReadUInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int32(bool)</signature>
                        <name>ReadUInt32Variant</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int64()</signature>
                        <name>ReadUInt64</name>
                    </method>
                    <method>
                        <signature>unsigned int64()</signature>
                        <name>ReadUInt64Variant</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoReader)</signature>
                        <name>Recycle</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32, unsigned int8[])</signature>
                        <name>Seek</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>SetRootObject</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SkipField</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.SubItemToken(ProtoBuf.ProtoReader)</signature>
                        <name>StartSubItem</name>
                    </method>
                    <method>
                        <signature>void(System.Type, int32)</signature>
                        <name>ThrowEnumException</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>TrapNextObject</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>TryReadFieldHeader</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int32&amp;)</signature>
                        <name>TryReadUInt32Variant</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(System.IO.Stream, unsigned int32&amp;)</signature>
                        <name>TryReadUInt32Variant</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(bool, unsigned int32&amp;)</signature>
                        <name>TryReadUInt32VariantWithoutMoving</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int64&amp;)</signature>
                        <name>TryReadUInt64VariantWithoutMoving</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(unsigned int32)</signature>
                        <name>Zag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int64(unsigned int64)</signature>
                        <name>Zag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.SerializationContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FieldNumber</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InternStrings</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>get_Model</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.NetObjectCache()</signature>
                        <name>get_NetCache</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Position</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.WireType()</signature>
                        <name>get_WireType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InternStrings</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>EmptyBlob</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TO_EOF</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>available</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>blockEnd</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.SerializationContext</signature>
                        <name>context</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>dataRemaining</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>depth</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Text.UTF8Encoding</signature>
                        <name>encoding</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fieldNumber</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>internStrings</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>ioBuffer</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ioIndex</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isFixedLength</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoReader</signature>
                        <name>lastReader</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.NetObjectCache</signature>
                        <name>netCache</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>position</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>source</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>stringInterner</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>trapCount</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>wireType</name>
                        <newname>eval_k</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.SerializationContext()</signature>
                        <name>Context</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FieldNumber</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>InternStrings</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>Model</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.NetObjectCache()</signature>
                        <name>NetCache</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Position</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.WireType()</signature>
                        <name>WireType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoTypeCode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Boolean</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Byte</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>ByteArray</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Char</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>DateTime</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Decimal</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Double</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Empty</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Guid</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Int16</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Int32</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Int64</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>SByte</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Single</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>TimeSpan</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Type</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>UInt16</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>UInt32</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>UInt64</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.ProtoTypeCode</signature>
                        <name>Uri</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ProtoWriter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, ProtoBuf.Meta.TypeModel, ProtoBuf.SerializationContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.IExtensible, ProtoBuf.ProtoWriter)</signature>
                        <name>AppendExtensionData</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckDepthFlushlock</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>CheckRecursionStackAndPush</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, ProtoBuf.ProtoWriter)</signature>
                        <name>CopyRawFromStream</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Exception(ProtoBuf.ProtoWriter)</signature>
                        <name>CreateException</name>
                    </method>
                    <method>
                        <signature>void(int32, ProtoBuf.ProtoWriter)</signature>
                        <name>DemandSpace</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.SubItemToken, ProtoBuf.ProtoWriter)</signature>
                        <name>EndSubItem</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.SubItemToken, ProtoBuf.ProtoWriter, ProtoBuf.PrefixStyle)</signature>
                        <name>EndSubItem</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoWriter)</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.ProtoWriter)</signature>
                        <name>GetPosition</name>
                    </method>
                    <method>
                        <signature>int32(System.Type&amp;)</signature>
                        <name>GetTypeKey</name>
                    </method>
                    <method>
                        <signature>void(int32, ProtoBuf.ProtoWriter)</signature>
                        <name>IncrementedAndReset</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>PopRecursionStack</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>string(System.Type)</signature>
                        <name>SerializeType</name>
                    </method>
                    <method>
                        <signature>void(int32, ProtoBuf.ProtoWriter)</signature>
                        <name>SetPackedField</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>SetRootObject</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.SubItemToken(object, ProtoBuf.ProtoWriter)</signature>
                        <name>StartSubItem</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.SubItemToken(object, ProtoBuf.ProtoWriter, bool)</signature>
                        <name>StartSubItem</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.ProtoWriter, object)</signature>
                        <name>ThrowEnumException</name>
                    </method>
                    <method>
                        <signature>void(bool, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteBoolean</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteByte</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], ProtoBuf.ProtoWriter)</signature>
                        <name>WriteBytes</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteBytes</name>
                    </method>
                    <method>
                        <signature>void(float64, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteDouble</name>
                    </method>
                    <method>
                        <signature>void(int32, ProtoBuf.WireType, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteFieldHeader</name>
                    </method>
                    <method>
                        <signature>void(int32, ProtoBuf.WireType, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteHeaderCore</name>
                    </method>
                    <method>
                        <signature>void(int16, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteInt16</name>
                    </method>
                    <method>
                        <signature>void(int32, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteInt32</name>
                    </method>
                    <method>
                        <signature>void(int32, unsigned int8[], int32)</signature>
                        <name>WriteInt32ToBuffer</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(int64, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteInt64</name>
                    </method>
                    <method>
                        <signature>void(object, int32, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteObject</name>
                    </method>
                    <method>
                        <signature>void(object, int32, ProtoBuf.ProtoWriter, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>WriteObject</name>
                    </method>
                    <method>
                        <signature>void(object, int32, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteRecursionSafeObject</name>
                    </method>
                    <method>
                        <signature>void(int8, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteSByte</name>
                    </method>
                    <method>
                        <signature>void(float32, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteSingle</name>
                    </method>
                    <method>
                        <signature>void(string, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteString</name>
                    </method>
                    <method>
                        <signature>void(System.Type, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteType</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteUInt16</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteUInt32</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteUInt32Variant</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int64, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteUInt64</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64, ProtoBuf.ProtoWriter)</signature>
                        <name>WriteUInt64Variant</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32(int32)</signature>
                        <name>Zig</name>
                    </method>
                    <method>
                        <signature>unsigned int64(int64)</signature>
                        <name>Zig</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.SerializationContext()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>get_Model</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.NetObjectCache()</signature>
                        <name>get_NetCache</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.WireType()</signature>
                        <name>get_WireType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.SerializationContext</signature>
                        <name>context</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>depth</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>dest</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Text.UTF8Encoding</signature>
                        <name>encoding</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fieldNumber</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>flushLock</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>ioBuffer</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ioIndex</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.NetObjectCache</signature>
                        <name>netCache</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>packedFieldNumber</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>position</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.MutableList</signature>
                        <name>recursionStack</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>wireType</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.SerializationContext()</signature>
                        <name>Context</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>Model</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.NetObjectCache()</signature>
                        <name>NetCache</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.WireType()</signature>
                        <name>WireType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.SerializationContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Freeze</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ThrowIfFrozen</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Context</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.SerializationContext()</signature>
                        <name>get_Default</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.StreamingContextStates()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.SerializationContext(System.Runtime.Serialization.StreamingContext)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.StreamingContext(ProtoBuf.SerializationContext)</signature>
                        <name>op_Implicit</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Context</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.StreamingContextStates)</signature>
                        <name>set_State</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>context</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.SerializationContext</signature>
                        <name>default</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>frozen</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>System.Runtime.Serialization.StreamingContextStates</signature>
                        <name>state</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Context</name>
                    </property>
                    <property>
                        <signature>ProtoBuf.SerializationContext()</signature>
                        <name>Default</name>
                    </property>
                    <property>
                        <signature>System.Runtime.Serialization.StreamingContextStates()</signature>
                        <name>State</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializer</name>
                <methodlist>
                    <method>
                        <arity>2</arity>
                        <signature>!!1(!!0)</signature>
                        <name>ChangeType</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Runtime.Serialization.IFormatter()</signature>
                        <name>CreateFormatter</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(!!0)</signature>
                        <name>DeepClone</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.IO.Stream)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.IO.Stream, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>DeserializeItems</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.IO.Stream, ProtoBuf.PrefixStyle)</signature>
                        <name>DeserializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.IO.Stream, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>DeserializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FlushPool</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>string()</signature>
                        <name>GetProto</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.IO.Stream, !!0)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, !!0)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext, !!0)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Xml.XmlReader, !!0)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.IO.Stream, !!0, ProtoBuf.PrefixStyle)</signature>
                        <name>MergeWithLengthPrefix</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void()</signature>
                        <name>PrepareSerializer</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.IO.Stream, !!0)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, !!0)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext, !!0)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Xml.XmlWriter, !!0)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.IO.Stream, !!0, ProtoBuf.PrefixStyle)</signature>
                        <name>SerializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.IO.Stream, !!0, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>SerializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.Stream, ProtoBuf.PrefixStyle, int32&amp;)</signature>
                        <name>TryReadLengthPrefix</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], int32, int32, ProtoBuf.PrefixStyle, int32&amp;)</signature>
                        <name>TryReadLengthPrefix</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>ListItemTag</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializer/GlobalOptions</name>
                <methodlist>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InferTagFromName</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InferTagFromName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>InferTagFromName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializer/NonGeneric</name>
                <methodlist>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanSerialize</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>DeepClone</name>
                    </method>
                    <method>
                        <signature>object(System.Type, System.IO.Stream)</signature>
                        <name>Deserialize</name>
                    </method>
                    <method>
                        <signature>object(System.IO.Stream, object)</signature>
                        <name>Merge</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, object)</signature>
                        <name>Serialize</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, object, ProtoBuf.PrefixStyle, int32)</signature>
                        <name>SerializeWithLengthPrefix</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.Stream, ProtoBuf.PrefixStyle, ProtoBuf.Serializer/TypeResolver, object&amp;)</signature>
                        <name>TryDeserializeWithLengthPrefix</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializer/TypeResolver</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(int32, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>System.Type(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>System.Type(int32)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.ArrayDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, ProtoBuf.Serializers.IProtoSerializer, int32, bool, ProtoBuf.WireType, System.Type, bool, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWriteArrayLoop</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AppendToCollection</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SupportNull</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>arrayType</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fieldNumber</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>itemType</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>options</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>packedWireType</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AppendToCollection</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>SupportNull</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.BlobSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>overwriteList</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.BooleanSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.ByteSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.CharSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.CompiledSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Serializers.IProtoTypeSerializer, ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeModel/CallbackType, ProtoBuf.SerializationContext)</signature>
                        <name>Callback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.CompiledSerializer(ProtoBuf.Serializers.IProtoTypeSerializer, ProtoBuf.Meta.TypeModel)</signature>
                        <name>Wrap</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Compiler.ProtoDeserializer</signature>
                        <name>deserializer</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoTypeSerializer</signature>
                        <name>head</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Compiler.ProtoSerializer</signature>
                        <name>serializer</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.DateTimeSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.DecimalSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.DefaultValueDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, object, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.CodeLabel, System.Type)</signature>
                        <name>EmitBeq</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.CodeLabel)</signature>
                        <name>EmitBranchIfDefaultValue</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>defaultValue</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.DoubleSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.EnumSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type, ProtoBuf.Serializers.EnumSerializer/EnumPair[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>EnumToWire</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.ProtoTypeCode()</signature>
                        <name>GetTypeCode</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>WireToEnum</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.ProtoTypeCode, ProtoBuf.Compiler.CodeLabel, ProtoBuf.Compiler.CodeLabel, object, ProtoBuf.Compiler.Local)</signature>
                        <name>WriteEnumValue</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.ProtoTypeCode, object)</signature>
                        <name>WriteEnumValue</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>enumType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.EnumSerializer/EnumPair[]</signature>
                        <name>map</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.EnumSerializer/EnumPair</name>
                <methodlist>
                    <method>
                        <signature>void(int32, object, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>RawValue</name>
                    </field>
                    <field>
                        <signature>System.Enum</signature>
                        <name>TypedValue</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WireValue</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.FieldDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type, System.Reflection.FieldInfo, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.FieldInfo</signature>
                        <name>field</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>forType</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.GuidSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.IProtoSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.IProtoTypeSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeModel/CallbackType, ProtoBuf.SerializationContext)</signature>
                        <name>Callback</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CanCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader)</signature>
                        <name>CreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>EmitCallback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>EmitCreateInstance</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>HasCallbacks</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.ISerializerProxy</name>
                <methodlist>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>get_Serializer</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>ProtoBuf.Serializers.IProtoSerializer()</signature>
                        <name>Serializer</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.ImmutableCollectionDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type, System.Type, ProtoBuf.Serializers.IProtoSerializer, int32, bool, ProtoBuf.WireType, bool, bool, bool, System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.MethodInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel, System.Type, System.Reflection.MethodInfo&amp;, System.Reflection.MethodInfo&amp;, System.Reflection.MethodInfo&amp;, System.Reflection.MethodInfo&amp;)</signature>
                        <name>IdentifyImmutable</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Type, System.Type)</signature>
                        <name>ResolveIReadOnlyCollection</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequireAdd</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>add</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>addRange</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>builderFactory</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>finish</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>RequireAdd</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.Int16Serializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.Int32Serializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.Int64Serializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.ListDecorator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type, System.Type, ProtoBuf.Serializers.IProtoSerializer, int32, bool, ProtoBuf.WireType, bool, bool, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.WireType)</signature>
                        <name>CanPack</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.ListDecorator(ProtoBuf.Meta.TypeModel, System.Type, System.Type, ProtoBuf.Serializers.IProtoSerializer, int32, bool, ProtoBuf.WireType, bool, bool, bool)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Serializers.IProtoSerializer, System.Reflection.MethodInfo, bool)</signature>
                        <name>EmitReadAndAddItem</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Serializers.IProtoSerializer, System.Reflection.MethodInfo, ProtoBuf.WireType, bool)</signature>
                        <name>EmitReadList</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(ProtoBuf.Meta.TypeModel, System.Reflection.MethodInfo&amp;, System.Reflection.MethodInfo&amp;)</signature>
                        <name>GetEnumeratorInfo</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AppendToCollection</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsList</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequireAdd</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnList</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SupportNull</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_SuppressIList</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WritePacked</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>add</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>concreteType</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>declaredType</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fieldNumber</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>ienumerableType</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>ienumeratorType</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>options</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>packedWireType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_h</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AppendToCollection</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsList</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequireAdd</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnList</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>SupportNull</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>SuppressIList</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>WritePacked</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.MemberSpecifiedDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.MethodInfo, System.Reflection.MethodInfo, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>getSpecified</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>setSpecified</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.NetObjectSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type, int32, ProtoBuf.BclHelpers/NetObjectOptions)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>key</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.BclHelpers/NetObjectOptions</signature>
                        <name>options</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.NullDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>Tag</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.ParseableSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.MethodInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Type)</signature>
                        <name>GetCustomToString</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.ParseableSerializer(System.Type, ProtoBuf.Meta.TypeModel)</signature>
                        <name>TryCreate</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>parse</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.PropertyDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type, System.Reflection.PropertyInfo, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel, System.Reflection.MemberInfo)</signature>
                        <name>CanWrite</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(ProtoBuf.Meta.TypeModel, System.Reflection.PropertyInfo)</signature>
                        <name>GetShadowSetter</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Reflection.PropertyInfo, ProtoBuf.Serializers.IProtoSerializer, bool&amp;, bool, bool)</signature>
                        <name>SanityCheck</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>forType</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.PropertyInfo</signature>
                        <name>property</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>readOptionsWriteValue</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>shadowSetter</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.ProtoDecoratorBase</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoSerializer</signature>
                        <name>Tail</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.SByteSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.SingleSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.StringSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.SubItemSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type, int32, ProtoBuf.Serializers.ISerializerProxy, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, bool)</signature>
                        <name>EmitDedicatedMethod</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeModel/CallbackType, ProtoBuf.SerializationContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.Callback</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>key</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.ISerializerProxy</signature>
                        <name>proxy</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>recursionCheck</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.SurrogateSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type, System.Type, ProtoBuf.Serializers.IProtoTypeSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(bool)</signature>
                        <name>GetConversion</name>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type, System.Type, System.Reflection.MethodInfo&amp;)</signature>
                        <name>HasCast</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeModel/CallbackType, ProtoBuf.SerializationContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.Callback</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>declaredType</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>forType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>fromTail</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoTypeSerializer</signature>
                        <name>rootTail</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>toTail</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.SystemTypeSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.Write</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.TagDecorator</name>
                <methodlist>
                    <method>
                        <signature>void(int32, ProtoBuf.WireType, bool, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeModel/CallbackType, ProtoBuf.SerializationContext)</signature>
                        <name>Callback</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CanCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader)</signature>
                        <name>CreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>EmitCallback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>EmitCreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>HasCallbacks</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_NeedsHint</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>fieldNumber</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>strict</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>wireType</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>NeedsHint</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.TimeSpanSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.TupleSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.RuntimeTypeModel, System.Reflection.ConstructorInfo, System.Reflection.MemberInfo[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>EmitCallback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>System.Type(int32)</signature>
                        <name>GetMemberType</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>object(object, int32)</signature>
                        <name>GetValue</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>HasCallbacks</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeModel/CallbackType, ProtoBuf.SerializationContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.Callback</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.ConstructorInfo</signature>
                        <name>ctor</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MemberInfo[]</signature>
                        <name>members</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoSerializer[]</signature>
                        <name>tails</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.TypeSerializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type, int32[], ProtoBuf.Serializers.IProtoSerializer[], System.Reflection.MethodInfo[], bool, bool, ProtoBuf.Meta.CallbackSet, System.Type, System.Reflection.MethodInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.Meta.TypeModel/CallbackType, ProtoBuf.SerializationContext)</signature>
                        <name>Callback</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader, bool)</signature>
                        <name>CreateInstance</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>EmitCallbackIfNeeded</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitCreateIfNull</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, System.Reflection.MethodInfo, bool, System.Type, System.Type)</signature>
                        <name>EmitInvokeCallback</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>ProtoBuf.Serializers.IProtoSerializer(object)</signature>
                        <name>GetMoreSpecificSerializer</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>HasCallbacks</name>
                    </method>
                    <method>
                        <signature>object(System.Reflection.MethodInfo, object, ProtoBuf.SerializationContext)</signature>
                        <name>InvokeCallback</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(ProtoBuf.ProtoReader)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local, ProtoBuf.Meta.TypeModel/CallbackType)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext)</signature>
                        <name>ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, System.Type, ProtoBuf.Compiler.Local, ProtoBuf.Compiler.CodeLabel, ProtoBuf.Compiler.CodeLabel, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>WriteFieldHandler</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanHaveInheritance</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.MethodInfo[]</signature>
                        <name>baseCtorCallbacks</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.CallbackSet</signature>
                        <name>callbacks</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>constructType</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>factory</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>int32[]</signature>
                        <name>fieldNumbers</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>forType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>hasConstructor</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>iextensible</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isExtensible</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isRootType</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Serializers.IProtoSerializer[]</signature>
                        <name>serializers</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>useConstructor</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanHaveInheritance</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.UInt16Serializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.UInt32Serializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.UInt64Serializer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.EmitWrite</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ProtoBuf.Serializers.IProtoSerializer.ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.Serializers.UriDecorator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, ProtoBuf.Serializers.IProtoSerializer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitRead</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Compiler.CompilerContext, ProtoBuf.Compiler.Local)</signature>
                        <name>EmitWrite</name>
                    </method>
                    <method>
                        <signature>object(object, ProtoBuf.ProtoReader)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object, ProtoBuf.ProtoWriter)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ExpectedType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresOldValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReturnsValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>expectedType</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ExpectedType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresOldValue</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReturnsValue</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ServiceModel.ProtoBehaviorAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.OperationDescription, System.ServiceModel.Channels.BindingParameterCollection)</signature>
                        <name>System.ServiceModel.Description.IOperationBehavior.AddBindingParameters</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.OperationDescription, System.ServiceModel.Dispatcher.ClientOperation)</signature>
                        <name>System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.OperationDescription, System.ServiceModel.Dispatcher.DispatchOperation)</signature>
                        <name>System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.OperationDescription)</signature>
                        <name>System.ServiceModel.Description.IOperationBehavior.Validate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ServiceModel.ProtoBehaviorExtension</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>CreateBehavior</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_BehaviorType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>BehaviorType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ServiceModel.ProtoEndpointBehavior</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.OperationDescription)</signature>
                        <name>ReplaceDataContractSerializerOperationBehavior</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.ServiceEndpoint)</signature>
                        <name>ReplaceDataContractSerializerOperationBehavior</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.ServiceEndpoint, System.ServiceModel.Channels.BindingParameterCollection)</signature>
                        <name>System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.ServiceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime)</signature>
                        <name>System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.ServiceEndpoint, System.ServiceModel.Dispatcher.EndpointDispatcher)</signature>
                        <name>System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior</name>
                    </method>
                    <method>
                        <signature>void(System.ServiceModel.Description.ServiceEndpoint)</signature>
                        <name>System.ServiceModel.Description.IEndpointBehavior.Validate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ServiceModel.ProtoOperationBehavior</name>
                <methodlist>
                    <method>
                        <signature>void(System.ServiceModel.Description.OperationDescription)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Runtime.Serialization.XmlObjectSerializer(System.Type, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Collections.Generic.IList`1&lt;System.Type&gt;)</signature>
                        <name>CreateSerializer</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>get_Model</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel)</signature>
                        <name>set_Model</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ProtoBuf.Meta.TypeModel()</signature>
                        <name>Model</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.ServiceModel.XmlProtoSerializer</name>
                <methodlist>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ProtoBuf.Meta.TypeModel, int32, System.Type, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ProtoBuf.Meta.TypeModel, System.Type&amp;, bool&amp;)</signature>
                        <name>GetKey</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Xml.XmlDictionaryReader)</signature>
                        <name>IsStartObject</name>
                    </method>
                    <method>
                        <signature>object(System.Xml.XmlDictionaryReader, bool)</signature>
                        <name>ReadObject</name>
                    </method>
                    <method>
                        <signature>ProtoBuf.ServiceModel.XmlProtoSerializer(ProtoBuf.Meta.TypeModel, System.Type)</signature>
                        <name>TryCreate</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDictionaryWriter)</signature>
                        <name>WriteEndObject</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDictionaryWriter, object)</signature>
                        <name>WriteObjectContent</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDictionaryWriter, object)</signature>
                        <name>WriteStartObject</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>isEnum</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isList</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>key</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ProtoBuf.Meta.TypeModel</signature>
                        <name>model</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>type</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.SubItemToken</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>value</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.TimeSpanScale</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.TimeSpanScale</signature>
                        <name>Days</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.TimeSpanScale</signature>
                        <name>Hours</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.TimeSpanScale</signature>
                        <name>Milliseconds</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.TimeSpanScale</signature>
                        <name>MinMax</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.TimeSpanScale</signature>
                        <name>Minutes</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.TimeSpanScale</signature>
                        <name>Seconds</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.TimeSpanScale</signature>
                        <name>Ticks</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProtoBuf.WireType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>EndGroup</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>Fixed32</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>Fixed64</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>SignedVariant</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>StartGroup</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>String</name>
                    </field>
                    <field>
                        <signature>ProtoBuf.WireType</signature>
                        <name>Variant</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>SecureMemo.exe</name>
            <type>
                <name>SecureMemo.DataModels.BackupFileInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.DataModels.BackupFileInfo)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_CreatedDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_CreatedDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FullName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;CreatedDate&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FullName&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>CreatedDate</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.DataModels.SecureMemoAppSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AlwaysOntop</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ApplicationSaltValue</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DefaultEmptyTabPages</name>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.SecureMemoFontSettings()</signature>
                        <name>get_FontSettings</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MainWindowHeight</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MainWindowWith</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PasswordDerivedString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SyncFolderPath</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseSharedSyncFolder</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AlwaysOntop</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ApplicationSaltValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DefaultEmptyTabPages</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.DataModels.SecureMemoFontSettings)</signature>
                        <name>set_FontSettings</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MainWindowHeight</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MainWindowWith</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PasswordDerivedString</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SyncFolderPath</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseSharedSyncFolder</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AlwaysOntop&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ApplicationSaltValue&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DefaultEmptyTabPages&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>SecureMemo.DataModels.SecureMemoFontSettings</signature>
                        <name>&lt;FontSettings&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MainWindowHeight&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MainWindowWith&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PasswordDerivedString&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;SyncFolderPath&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UseSharedSyncFolder&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AlwaysOntop</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ApplicationSaltValue</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>DefaultEmptyTabPages</name>
                    </property>
                    <property>
                        <signature>SecureMemo.DataModels.SecureMemoFontSettings()</signature>
                        <name>FontSettings</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MainWindowHeight</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MainWindowWith</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PasswordDerivedString</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SyncFolderPath</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UseSharedSyncFolder</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.DataModels.SecureMemoFontSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Drawing.FontFamily()</signature>
                        <name>get_FontFamily</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FontFamilyName</name>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>get_FontSize</name>
                    </method>
                    <method>
                        <signature>System.Drawing.FontStyle()</signature>
                        <name>get_Style</name>
                    </method>
                    <method>
                        <signature>void(System.Drawing.FontFamily)</signature>
                        <name>set_FontFamily</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FontFamilyName</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>set_FontSize</name>
                    </method>
                    <method>
                        <signature>void(System.Drawing.FontStyle)</signature>
                        <name>set_Style</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Drawing.FontFamily</signature>
                        <name>&lt;FontFamily&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FontFamilyName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>float32</signature>
                        <name>&lt;FontSize&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Drawing.FontStyle</signature>
                        <name>&lt;Style&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Drawing.FontFamily()</signature>
                        <name>FontFamily</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FontFamilyName</name>
                    </property>
                    <property>
                        <signature>float32()</signature>
                        <name>FontSize</name>
                    </property>
                    <property>
                        <signature>System.Drawing.FontStyle()</signature>
                        <name>Style</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.DataModels.TabPageData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>GenerateUniqueIdIfNoneExists</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PageIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TabPageLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TabPageText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UniqueId</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PageIndex</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TabPageLabel</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TabPageText</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UniqueId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PageIndex&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TabPageLabel&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TabPageText&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UniqueId&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>PageIndex</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TabPageLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TabPageText</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>UniqueId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.DataModels.TabPageDataCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.TabPageDataCollection(int32)</signature>
                        <name>CreateNewPageDataCollection</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ActiveTabIndex</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;()</signature>
                        <name>get_TabPageDictionary</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ActiveTabIndex</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;)</signature>
                        <name>set_TabPageDictionary</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ActiveTabIndex&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;</signature>
                        <name>&lt;TabPageDictionary&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>ActiveTabIndex</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;()</signature>
                        <name>TabPageDictionary</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageEvents.StorageDirectoryEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, SecureMemo.FileStorageEvents.StorageDirectorySystemEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, SecureMemo.FileStorageEvents.StorageDirectorySystemEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageEvents.StorageDirectorySystemEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes()</signature>
                        <name>get_DirectoryEventType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DirectoryId</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ParentDirectoryId</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageEvents.StorageFileSystemEventTypes)</signature>
                        <name>set_DirectoryEventType</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DirectoryId</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ParentDirectoryId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes</signature>
                        <name>&lt;DirectoryEventType&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DirectoryId&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ParentDirectoryId&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes()</signature>
                        <name>DirectoryEventType</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>DirectoryId</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ParentDirectoryId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageEvents.StorageFileEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, SecureMemo.FileStorageEvents.StorageFileSystemEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, SecureMemo.FileStorageEvents.StorageFileSystemEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageEvents.StorageFileSystemEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DirectoryId</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes()</signature>
                        <name>get_FileEvent</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FileId</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DirectoryId</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageEvents.StorageFileSystemEventTypes)</signature>
                        <name>set_FileEvent</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_FileId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DirectoryId&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes</signature>
                        <name>&lt;FileEvent&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;FileId&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>DirectoryId</name>
                    </property>
                    <property>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes()</signature>
                        <name>FileEvent</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FileId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes</signature>
                        <name>Created</name>
                    </field>
                    <field>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes</signature>
                        <name>Deleted</name>
                    </field>
                    <field>
                        <signature>SecureMemo.FileStorageEvents.StorageFileSystemEventTypes</signature>
                        <name>Renamed</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageDirectory</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DirectoryName</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Id</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ParentId</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DirectoryName</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Id</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ParentId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DirectoryName&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Id&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ParentId&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DirectoryName</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Id</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ParentId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFile</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DirectoryId</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FileName</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_FileSize</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Id</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DirectoryId</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FileName</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_FileSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Id</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DirectoryId&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FileName&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;FileSize&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Id&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>DirectoryId</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FileName</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>FileSize</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Id</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageModels.StorageFileSystemContent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FileStorageModels.StorageDirectory)</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.FileStorageModels.StorageDirectory, string)</signature>
                        <name>CreateDirectory</name>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.FileStorageModels.StorageDirectory, string)</signature>
                        <name>CreateFile</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageModels.StorageFileSystem()</signature>
                        <name>CreateNewFileSystem</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageModels.StorageDirectory()</signature>
                        <name>CreateRooDir</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>DeleteDirectory</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;SecureMemo.FileStorageModels.StorageDirectory&gt;(int32)</signature>
                        <name>GetDirectories</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageModels.StorageDirectory(int32)</signature>
                        <name>GetDirectory</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;SecureMemo.FileStorageModels.StorageFile&gt;(int32)</signature>
                        <name>GetFiles</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageModels.StorageDirectory()</signature>
                        <name>GetRootDirectory</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsValidDirectoryName</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageModels.StorageFileSystem(string)</signature>
                        <name>LoadFileSystem</name>
                    </method>
                    <method>
                        <signature>bool(int32, string)</signature>
                        <name>RenameDirectory</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SaveToFile</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageEvents.StorageDirectoryEventHandler)</signature>
                        <name>add_DirectoryStructureChanged</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageEvents.StorageFileEventHandler)</signature>
                        <name>add_FileStructureChanged</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageEvents.StorageDirectoryEventHandler)</signature>
                        <name>remove_DirectoryStructureChanged</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageEvents.StorageFileEventHandler)</signature>
                        <name>remove_FileStructureChanged</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;SecureMemo.FileStorageModels.StorageDirectory,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.FileStorageEvents.StorageDirectoryEventHandler</signature>
                        <name>DirectoryStructureChanged</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.FileStorageEvents.StorageFileEventHandler</signature>
                        <name>FileStructureChanged</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageDirectory&gt;</signature>
                        <name>_directories</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;</signature>
                        <name>_directoryIdSet</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;</signature>
                        <name>_fileIdSet</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageFile&gt;</signature>
                        <name>_files</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_nextDirectoryId</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_nextFileId</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.FileStorageModels.StorageDirectory</signature>
                        <name>_rootDirectory</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>_validDirNameRegex</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>fileSystemMemoryCache</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_m</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist>
                    <event>
                        <signature>SecureMemo.FileStorageEvents.StorageDirectoryEventHandler</signature>
                        <name>DirectoryStructureChanged</name>
                    </event>
                    <event>
                        <signature>SecureMemo.FileStorageEvents.StorageFileEventHandler</signature>
                        <name>FileStructureChanged</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystem/&lt;&gt;c__DisplayClass10</name>
                <newname>SecureMemo.FileStorageModels.StorageFileSystem/eval_c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FileStorageModels.StorageDirectory)</signature>
                        <name>&lt;GetDirectory&gt;b__f</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>directoryId</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystem/&lt;&gt;c__DisplayClass13</name>
                <newname>SecureMemo.FileStorageModels.StorageFileSystem/eval_d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FileStorageModels.StorageDirectory)</signature>
                        <name>&lt;GetDirectories&gt;b__12</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>parentDirectoryId</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystem/&lt;&gt;c__DisplayClass16</name>
                <newname>SecureMemo.FileStorageModels.StorageFileSystem/eval_e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FileStorageModels.StorageFile)</signature>
                        <name>&lt;GetFiles&gt;b__15</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>directoryId</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystem/&lt;&gt;c__DisplayClass7</name>
                <newname>SecureMemo.FileStorageModels.StorageFileSystem/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FileStorageModels.StorageDirectory)</signature>
                        <name>&lt;DeleteDirectory&gt;b__6</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>directoryId</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystem/&lt;&gt;c__DisplayClassb</name>
                <newname>SecureMemo.FileStorageModels.StorageFileSystem/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FileStorageModels.StorageDirectory)</signature>
                        <name>&lt;RenameDirectory&gt;b__a</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>directoryId</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystem/StorageFileDataRange</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>EndPosition</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FileId</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>StartPosition</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageFileSystemContent</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageDirectory&gt;()</signature>
                        <name>get_Directories</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;()</signature>
                        <name>get_DirectoryIdSet</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;()</signature>
                        <name>get_FileIdSet</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageFile&gt;()</signature>
                        <name>get_Files</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NextDirectoryId</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NextFileId</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageDirectory&gt;)</signature>
                        <name>set_Directories</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.HashSet`1&lt;int32&gt;)</signature>
                        <name>set_DirectoryIdSet</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.HashSet`1&lt;int32&gt;)</signature>
                        <name>set_FileIdSet</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageFile&gt;)</signature>
                        <name>set_Files</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NextDirectoryId</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NextFileId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageDirectory&gt;</signature>
                        <name>&lt;Directories&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;</signature>
                        <name>&lt;DirectoryIdSet&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;</signature>
                        <name>&lt;FileIdSet&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageFile&gt;</signature>
                        <name>&lt;Files&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NextDirectoryId&gt;k__BackingField</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NextFileId&gt;k__BackingField</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageDirectory&gt;()</signature>
                        <name>Directories</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;()</signature>
                        <name>DirectoryIdSet</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.HashSet`1&lt;int32&gt;()</signature>
                        <name>FileIdSet</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.HashSet`1&lt;SecureMemo.FileStorageModels.StorageFile&gt;()</signature>
                        <name>Files</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>NextDirectoryId</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>NextFileId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FileStorageModels.StorageItemBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_CreateDate</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_ModifiedDate</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SortOrder</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_CreateDate</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_ModifiedDate</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SortOrder</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;CreateDate&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;ModifiedDate&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;SortOrder&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>CreateDate</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>ModifiedDate</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>SortOrder</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormAbout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateRequest</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>Instance_OnInitComplete</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnOk_Click</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>frmAbout_Load</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyCompany</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyCopyright</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyDescription</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyProduct</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyTitle</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AssemblyVersion</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>licenceInfoControl1_Load</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnOk</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>lblAppInfo1</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>lblAppInfo2</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>lblAppTitle</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.UserControls.LicenceInfoControl</signature>
                        <name>licenceInfoControl1</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AssemblyCompany</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AssemblyCopyright</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AssemblyDescription</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AssemblyProduct</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AssemblyTitle</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AssemblyVersion</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormCreateLicenceRequest</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.UserControls.CreateLicenceRequestControl</signature>
                        <name>createLicenceRequestControl1</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormFileManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Rectangle(System.Drawing.Rectangle, int32)</signature>
                        <name>Deflate</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>FormFileManager_Load</name>
                        <newname>eval_g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitFolderTreeViewData</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, SecureMemo.FileStorageEvents.StorageDirectorySystemEventArgs)</signature>
                        <name>_storageFileSystem_DirectoryStructureChanged</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, SecureMemo.FileStorageEvents.StorageFileSystemEventArgs)</signature>
                        <name>_storageFileSystem_FileStructureChanged</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.ComponentModel.CancelEventArgs)</signature>
                        <name>contextMenuStripFolders_Opening</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>deleteToolStripMenuItem_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>exitToolStripMenuItem_Click</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>newFolderToolStripMenuItem_Click</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>openToolStripMenuItem_Click</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>renameToolStripMenuItem_Click</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>saveToolStripMenuItem_Click</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.NodeLabelEditEventArgs)</signature>
                        <name>treeViewFolders_AfterLabelEdit</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.TreeViewEventArgs)</signature>
                        <name>treeViewFolders_AfterSelect</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.DrawTreeNodeEventArgs)</signature>
                        <name>treeViewFolders_DrawNode</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Forms.ImageList</signature>
                        <name>FileSystemIcons</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_fileStorageDBPath</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.Services.FileStorageService</signature>
                        <name>_fileStorageService</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.FileStorageModels.StorageFileSystem</signature>
                        <name>_storageFileSystem</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ContextMenuStrip</signature>
                        <name>contextMenuStripFolders</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>deleteToolStripMenuItem</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>exitToolStripMenuItem</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>fileToolStripMenuItem</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>groupBox1</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>helpToolStripMenuItem</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ListView</signature>
                        <name>listViewFiles</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.MenuStrip</signature>
                        <name>menuStripFileManager</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>newFolderToolStripMenuItem</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>openToolStripMenuItem</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_u</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>renameToolStripMenuItem</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>saveToolStripMenuItem</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.SplitContainer</signature>
                        <name>splitContainer1</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator1</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TreeView</signature>
                        <name>treeViewFolders</name>
                        <newname>eval_g</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormFind</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>FormFind_Activated</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>FormFind_Enter</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>FormFind_Load</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>PerformSearch</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCancel_Click</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnFind_Click</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_FindInAllTabs</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_FindInAllTabs</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.KeyEventArgs)</signature>
                        <name>txtFindText_KeyUp</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;FindInAllTabs&gt;k__BackingField</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Action`2&lt;string,bool&gt;</signature>
                        <name>OnSearch</name>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCancel</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnFind</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.CheckBox</signature>
                        <name>chkCaseSensitive</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>lblFindText</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtFindText</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>FindInAllTabs</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormMain</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(System.Collections.Generic.KeyValuePair`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;)</signature>
                        <name>&lt;appendNewToolStripMenuItem_Click&gt;b__7</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(bool, SecureMemo.DataModels.TabPageData)</signature>
                        <name>&lt;openDatabaseToolStripMenuItem_Click&gt;b__3</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>BackupDatabasetoolStripMenuItem_Click</name>
                        <newname>eval_i</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Point(System.Windows.Forms.Form)</signature>
                        <name>GetCenterLocationForChildForm</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Forms.RichTextBox()</signature>
                        <name>GetRichTextBoxInActiveTab</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetTextInTabControl</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitFormSettings</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeTabControls</name>
                        <newname>eval_h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadLicenceFile</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>PerformSearch</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PromptExit</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>RestoreDatabasetoolStripMenuItem_Click</name>
                        <newname>eval_h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SaveFormDataToModel</name>
                        <newname>eval_g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateApplicationState</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>aboutToolStripMenuItem_Click</name>
                        <newname>eval_m</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>appendNewToolStripMenuItem_Click</name>
                        <newname>eval_l</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>changePasswordToolStripMenuItem_Click</name>
                        <newname>eval_n</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>copyToolStripMenuItem_Click</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>createNewDatabaseToolStripMenuItem_Click</name>
                        <newname>eval_q</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>cutToolStripMenuItem_Click</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>exitToolStripMenuItem_Click</name>
                        <newname>eval_r</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>fileManagerToolStripMenuItem_Click</name>
                        <newname>eval_g</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>findInAllTabsToolStripMenuItem_Click</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>findToolStripMenuItem_Click</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.FormClosingEventArgs)</signature>
                        <name>frmMain_FormClosing</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>frmMain_Load</name>
                        <newname>eval_v</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>frmMain_Resize</name>
                        <newname>eval_u</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>openDatabaseToolStripMenuItem_Click</name>
                        <newname>eval_p</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>pasteToolStripMenuItem_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>saveToolStripMenuItem_Click</name>
                        <newname>eval_o</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>settingsToolStripMenuItem_Click</name>
                        <newname>eval_j</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>tabControlNotepad_SelectedIndexChanged</name>
                        <newname>eval_s</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>tabPageControl_TabTextDataChanged</name>
                        <newname>eval_t</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>tabWindowToolStripMenuItem_Click</name>
                        <newname>eval_k</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>undoToolStripMenuItem_Click</name>
                        <newname>eval_d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>BackupDatabasetoolStripMenuItem</name>
                        <newname>eval_ae</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;bool,SecureMemo.DataModels.TabPageData,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>eval_aw</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>eval_ax</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>RestoreDatabasetoolStripMenuItem</name>
                        <newname>eval_af</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.Services.AppSettingsService</signature>
                        <name>_appSettingsService</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.FormFind</signature>
                        <name>_formFind</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Encryption.Licence.LicenceService</signature>
                        <name>_licenceService</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.Storage.MemoStorageService</signature>
                        <name>_memoStorageService</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.Storage.Memory.PasswordStorage</signature>
                        <name>_passwordStorage</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.DataModels.TabPageDataCollection</signature>
                        <name>_tabPageDataCollection</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>aboutToolStripMenuItem</name>
                        <newname>eval_u</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>appendNewToolStripMenuItem</name>
                        <newname>eval_z</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.FormMain/ApplicationState</signature>
                        <name>applicationState</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>changePasswordToolStripMenuItem</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>clearFileDatabaseToolStripMenuItem</name>
                        <newname>eval_al</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>copyToolStripMenuItem</name>
                        <newname>eval_aq</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>createNewDatabaseToolStripMenuItem</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>cutToolStripMenuItem</name>
                        <newname>eval_ap</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>editToolStripMenuItem</name>
                        <newname>eval_am</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>exitToolStripMenuItem</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>exportFileDatabaseToolStripMenuItem</name>
                        <newname>eval_ak</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>fileArchiveToolStripMenuItem</name>
                        <newname>eval_ah</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>fileManagerToolStripMenuItem</name>
                        <newname>eval_ai</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>fileToolStripMenuItem</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>findInAllTabsToolStripMenuItem</name>
                        <newname>eval_au</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>findToolStripMenuItem</name>
                        <newname>eval_at</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>helpToolStripMenuItem</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.MenuStrip</signature>
                        <name>menuStrip1</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>openDatabaseToolStripMenuItem</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>pasteToolStripMenuItem</name>
                        <newname>eval_ar</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_ay</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>saveToSharedFolderToolStripMenuItem</name>
                        <newname>eval_av</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>saveToolStripMenuItem</name>
                        <newname>eval_ad</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>searchIndex</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>settingsToolStripMenuItem</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TabControl</signature>
                        <name>tabControlNotepad</name>
                        <newname>eval_v</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TabPage</signature>
                        <name>tabPage1</name>
                        <newname>eval_w</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TabPage</signature>
                        <name>tabPage2</name>
                        <newname>eval_x</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>tabWindowToolStripMenuItem</name>
                        <newname>eval_ab</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>tabsToolStripMenuItem</name>
                        <newname>eval_y</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripMenuItem2</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator1</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator2</name>
                        <newname>eval_aa</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator3</name>
                        <newname>eval_ac</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator4</name>
                        <newname>eval_ag</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator5</name>
                        <newname>eval_aj</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator6</name>
                        <newname>eval_ao</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripSeparator</signature>
                        <name>toolStripSeparator7</name>
                        <newname>eval_as</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>toolsToolStripMenuItem</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>undoToolStripMenuItem</name>
                        <newname>eval_an</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormMain/ApplicationState</name>
                <newname>SecureMemo.FormMain/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DatabaseExists</name>
                        <newname>eval_i</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DatabaseLoaded</name>
                        <newname>eval_h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Initializing</name>
                        <newname>eval_n</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_TabIndexChanged</name>
                        <newname>eval_k</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_TabPageAddOrRemove</name>
                        <newname>eval_l</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_TabTextDataChanged</name>
                        <newname>eval_j</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UniqueIdMissingFromExistingTabPage</name>
                        <newname>eval_m</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DatabaseExists</name>
                        <newname>eval_i</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DatabaseLoaded</name>
                        <newname>eval_h</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Initializing</name>
                        <newname>eval_n</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_TabIndexChanged</name>
                        <newname>eval_k</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_TabPageAddOrRemove</name>
                        <newname>eval_l</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_TabTextDataChanged</name>
                        <newname>eval_j</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UniqueIdMissingFromExistingTabPage</name>
                        <newname>eval_m</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;DatabaseExists&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;DatabaseLoaded&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Initializing&gt;k__BackingField</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;TabIndexChanged&gt;k__BackingField</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;TabPageAddOrRemove&gt;k__BackingField</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;TabTextDataChanged&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UniqueIdMissingFromExistingTabPage&gt;k__BackingField</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_h</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormRestoreBackup</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCancel_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnRestore_Click</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>frmRestoreBackup_Load</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>listViewBackupoFiles_SelectedIndexChanged</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Forms.ColumnHeader</signature>
                        <name>DateHeader</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ColumnHeader</signature>
                        <name>FilenameHeader</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCancel</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnRestore</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>groupBox1</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ListView</signature>
                        <name>listViewBackupoFiles</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.Storage.MemoStorageService</signature>
                        <name>memoStorageService</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_i</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Drawing.Font)</signature>
                        <name>LoadFontSettings</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadGeneralSettings</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateBrowseEnableState</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnBrowseFolder_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCancel_Click</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnOk_Click</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnShowFontDialog_Click</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>chkSyncDatabase_CheckedChanged</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>frmSettings_Load</name>
                        <newname>eval_f</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>SecureMemo.DataModels.SecureMemoFontSettings</signature>
                        <name>_fontSettings</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Drawing.Font</signature>
                        <name>_selectedFont</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnBrowseFolder</name>
                        <newname>eval_u</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCancel</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnOk</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnShowFontDialog</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.CheckBox</signature>
                        <name>chkAlwaysOntop</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.CheckBox</signature>
                        <name>chkSyncDatabase</name>
                        <newname>eval_x</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.FolderBrowserDialog</signature>
                        <name>folderBrowseForSyncDirectory</name>
                        <newname>eval_y</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.FontDialog</signature>
                        <name>fontDialog1</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>groupBox1</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>groupBox2</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>grpDatabaseSettings</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label1</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label2</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label3</name>
                        <newname>eval_o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label4</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>lblDirectory</name>
                        <newname>eval_w</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.NumericUpDown</signature>
                        <name>numericUpDownTabPages</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_z</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TableLayoutPanel</signature>
                        <name>tableLayoutPanel1</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.RichTextBox</signature>
                        <name>txtFontFamily</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.RichTextBox</signature>
                        <name>txtFontSize</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.RichTextBox</signature>
                        <name>txtFontStyle</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtSyncDatabaseDirectory</name>
                        <newname>eval_v</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit</name>
                <methodlist>
                    <method>
                        <signature>void(SecureMemo.DataModels.TabPageDataCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.TabPageData(System.Collections.Generic.KeyValuePair`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;)</signature>
                        <name>&lt;.ctor&gt;b__1</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>SecureMemo.FormTabEdit/DragableListItem(SecureMemo.DataModels.TabPageData)</signature>
                        <name>&lt;.ctor&gt;b__2</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Forms.ListViewItem(System.Windows.Forms.ListViewItem)</signature>
                        <name>&lt;GetClosestItemInRelationToDropPosition&gt;b__2c</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>int32(System.Windows.Forms.ListViewItem)</signature>
                        <name>&lt;GetClosestItemInRelationToDropPosition&gt;b__2d</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>int32(System.Windows.Forms.ListViewItem)</signature>
                        <name>&lt;GetClosestItemInRelationToDropPosition&gt;b__2e</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>int32(System.Windows.Forms.ListViewItem)</signature>
                        <name>&lt;GetClosestItemInRelationToDropPosition&gt;b__2f</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>int32(System.Windows.Forms.ListViewItem)</signature>
                        <name>&lt;GetClosestItemInRelationToDropPosition&gt;b__30</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.DataModels.TabPageData)</signature>
                        <name>&lt;VerifyAndCorrectIndexing&gt;b__5</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;addNewTabToolStripMenuItem_Click&gt;b__3c</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.DataModels.TabPageData)</signature>
                        <name>&lt;btnOk_Click&gt;b__d</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__1b</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__1e</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>FormTabEdit_ResizeBegin</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>FormTabEdit_ResizeEnd</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Forms.ListViewItem(System.Windows.Forms.ListView, System.Drawing.Point)</signature>
                        <name>GetClosestItemInRelationToDropPosition</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadTabPageCollection</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(SecureMemo.DataModels.TabPageDataCollection)</signature>
                        <name>VerifyAndCorrectIndexing</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>addNewTabToolStripMenuItem_Click</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCancel_Click</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnOk_Click</name>
                        <newname>eval_g</newname>
                    </method>
                    <method>
                        <signature>void(object, System.ComponentModel.CancelEventArgs)</signature>
                        <name>contextMenu_Opening</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>deleteSelectedTabToolStripMenuItem_Click</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>frmTabEdit_Load</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_TabDataChanged</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.LabelEditEventArgs)</signature>
                        <name>listViewTabs_AfterLabelEdit</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.DragEventArgs)</signature>
                        <name>listViewTabs_DragDrop</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.DragEventArgs)</signature>
                        <name>listViewTabs_DragEnter</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.DragEventArgs)</signature>
                        <name>listViewTabs_DragOver</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.ItemDragEventArgs)</signature>
                        <name>listViewTabs_ItemDrag</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_TabDataChanged</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;TabDataChanged&gt;k__BackingField</name>
                        <newname>eval_p</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;SecureMemo.FormTabEdit/DragableListItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate22</name>
                        <newname>eval_u</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;SecureMemo.FormTabEdit/DragableListItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate23</name>
                        <newname>eval_v</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;int32,SecureMemo.DataModels.TabPageData&gt;,SecureMemo.DataModels.TabPageData&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>eval_q</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Windows.Forms.ListViewItem,System.Windows.Forms.ListViewItem&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate33</name>
                        <newname>eval_w</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Windows.Forms.ListViewItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate34</name>
                        <newname>eval_x</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Windows.Forms.ListViewItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate35</name>
                        <newname>eval_y</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Windows.Forms.ListViewItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate36</name>
                        <newname>eval_z</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Windows.Forms.ListViewItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate37</name>
                        <newname>eval_aa</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;SecureMemo.FormTabEdit/DragableListItem,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3d</name>
                        <newname>eval_ab</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;SecureMemo.DataModels.TabPageData,SecureMemo.FormTabEdit/DragableListItem&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>eval_r</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;SecureMemo.DataModels.TabPageData,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>eval_s</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;SecureMemo.DataModels.TabPageData,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>eval_t</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.DataModels.TabPageDataCollection</signature>
                        <name>_tabPageDataCollection</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>addNewTabToolStripMenuItem</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCancel</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnOk</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ContextMenuStrip</signature>
                        <name>contextMenu</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ToolStripMenuItem</signature>
                        <name>deleteSelectedTabToolStripMenuItem</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>grpBoxTabs</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>grpDragAndDropOptions</name>
                        <newname>eval_m</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ImageList</signature>
                        <name>imageList1</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;SecureMemo.FormTabEdit/DragableListItem&gt;</signature>
                        <name>listViewDataSource</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.ListView</signature>
                        <name>listViewTabs</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Panel</signature>
                        <name>panel1</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_ac</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.RadioButton</signature>
                        <name>radioButtonShift</name>
                        <newname>eval_n</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.RadioButton</signature>
                        <name>radioButtonSwitch</name>
                        <newname>eval_o</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>TabDataChanged</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass12</name>
                <newname>SecureMemo.FormTabEdit/eval_c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_AfterLabelEdit&gt;b__10</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Forms.LabelEditEventArgs</signature>
                        <name>e</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass16</name>
                <newname>SecureMemo.FormTabEdit/eval_d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_ItemDrag&gt;b__14</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Forms.ListViewItem</signature>
                        <name>listViewItem</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass24</name>
                <newname>SecureMemo.FormTabEdit/eval_e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__18</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__19</name>
                        <newname>eval_d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>newIndex</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>originalIndex</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass2a</name>
                <newname>SecureMemo.FormTabEdit/eval_f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__1a</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__1c</name>
                        <newname>eval_e</newname>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__1d</name>
                        <newname>eval_f</newname>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;listViewTabs_DragDrop&gt;b__1f</name>
                        <newname>eval_g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass24</signature>
                        <name>CS$&lt;&gt;8__locals25</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>maxIndex</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>minIndex</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass38</name>
                <newname>SecureMemo.FormTabEdit/eval_g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Windows.Forms.ListViewItem)</signature>
                        <name>&lt;GetClosestItemInRelationToDropPosition&gt;b__31</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Windows.Forms.ListViewItem)</signature>
                        <name>&lt;GetClosestItemInRelationToDropPosition&gt;b__32</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Drawing.Point</signature>
                        <name>p</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass3f</name>
                <newname>SecureMemo.FormTabEdit/eval_h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>&lt;deleteSelectedTabToolStripMenuItem_Click&gt;b__3e</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Forms.ListViewItem</signature>
                        <name>itemToDelete</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass9</name>
                <newname>SecureMemo.FormTabEdit/eval_b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;VerifyAndCorrectIndexing&gt;b__6</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;</signature>
                        <name>pageIndexList</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass9/&lt;&gt;c__DisplayClassb</name>
                <newname>SecureMemo.FormTabEdit/eval_b/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;VerifyAndCorrectIndexing&gt;b__7</name>
                        <newname>eval_c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>SecureMemo.FormTabEdit/&lt;&gt;c__DisplayClass9</signature>
                        <name>CS$&lt;&gt;8__localsa</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>pageIndex</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.FormTabEdit/DragableListItem</name>
                <newname>SecureMemo.FormTabEdit/eval_a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(SecureMemo.FormTabEdit/DragableListItem)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Index</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Label</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.TabPageData()</signature>
                        <name>get_PageData</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Index</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Label</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(SecureMemo.DataModels.TabPageData)</signature>
                        <name>set_PageData</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Label&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.DataModels.TabPageData</signature>
                        <name>&lt;PageData&gt;k__BackingField</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Index</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Label</name>
                        <newname>b</newname>
                    </property>
                    <property>
                        <signature>SecureMemo.DataModels.TabPageData()</signature>
                        <name>PageData</name>
                        <newname>eval_c</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.InputForms.FormGetPassword</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>FormGetPassword_Shown</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>HandleCancelClick</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>HandleOkClick</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCancel_Click</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnOk_Click</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PasswordDerivedString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PasswordSalt</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PasswordString</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PasswordVerified</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PasswordDerivedString</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PasswordSalt</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PasswordString</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PasswordVerified</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.KeyPressEventArgs)</signature>
                        <name>txtPassword_KeyPress</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.KeyEventArgs)</signature>
                        <name>txtPassword_KeyUp</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PasswordDerivedString&gt;k__BackingField</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PasswordSalt&gt;k__BackingField</name>
                        <newname>eval_h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PasswordString&gt;k__BackingField</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;PasswordVerified&gt;k__BackingField</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCancel</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnOk</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>groupBox1</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label1</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtPassword</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>PasswordDerivedString</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PasswordSalt</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PasswordString</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>PasswordVerified</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.InputForms.FormSetPassword</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>TryToSetPassword</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ValidatePasswords</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnCancel_Click</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>btnOk_Click</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_VerifiedPassword</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_VerifiedPassword</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>txtPassword1_Enter</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>txtPassword2_Enter</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.KeyEventArgs)</signature>
                        <name>txtPasswordFields_KeyDown</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Forms.KeyEventArgs)</signature>
                        <name>txtPasswordFields_KeyUp</name>
                        <newname>eval_b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;VerifiedPassword&gt;k__BackingField</name>
                        <newname>eval_k</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnCancel</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Button</signature>
                        <name>btnOk</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>errorMessage</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.GroupBox</signature>
                        <name>groupBox1</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label1</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Label</signature>
                        <name>label2</name>
                        <newname>eval_i</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>passwordPattern</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_l</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtPassword1</name>
                        <newname>eval_j</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.TextBox</signature>
                        <name>txtPassword2</name>
                        <newname>eval_h</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>VerifiedPassword</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.Program</name>
                <newname>eval_q</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>FindAndFocusExistingInstance</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsFirstInstance</name>
                        <newname>eval_b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Main</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RegisterMutex</name>
                        <newname>eval_d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseMutex</name>
                        <newname>eval_c</newname>
                    </method>
                    <method>
                        <signature>void(native int, bool)</signature>
                        <name>SwitchToThisWindow</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Threading.Mutex</signature>
                        <name>instanceMutex</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.Services.AppSettingsService</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CreateAppDataDirectoryIfDirNotFound</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>LoadSettings</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SaveSettings</name>
                    </method>
                    <method>
                        <signature>SecureMemo.Services.AppSettingsService()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.SecureMemoAppSettings()</signature>
                        <name>get_Settings</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>SecureMemo.DataModels.SecureMemoAppSettings</signature>
                        <name>_appSettings</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.DataModels.SecureMemoAppSettings</signature>
                        <name>_defaultAppSettings</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>GeneralToolkitLib.ConfigHelper.IniConfigFileManager</signature>
                        <name>_iniConfigFileManager</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.Services.AppSettingsService</signature>
                        <name>_instance</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>iniConfigFilePath</name>
                        <newname>eval_e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>SecureMemo.Services.AppSettingsService()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>SecureMemo.DataModels.SecureMemoAppSettings()</signature>
                        <name>Settings</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.Services.FileStorageService</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateEmptyFileSystem</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Load</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>SecureMemo.FileStorageModels.StorageFileSystem()</signature>
                        <name>get_FileSystem</name>
                    </method>
                    <method>
                        <signature>SecureMemo.Services.FileStorageService()</signature>
                        <name>get_Service</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.FileStorageModels.StorageFileSystem)</signature>
                        <name>set_FileSystem</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>SecureMemo.FileStorageModels.StorageFileSystem</signature>
                        <name>&lt;FileSystem&gt;k__BackingField</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.Services.FileStorageService</signature>
                        <name>_instance</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>SecureMemo.FileStorageModels.StorageFileSystem()</signature>
                        <name>FileSystem</name>
                    </property>
                    <property>
                        <signature>SecureMemo.Services.FileStorageService()</signature>
                        <name>Service</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.Storage.MemoStorageService</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.BackupFileInfo(System.IO.FileInfo)</signature>
                        <name>&lt;GetBackupFiles&gt;b__1</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>DatabaseExists</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;SecureMemo.DataModels.BackupFileInfo&gt;()</signature>
                        <name>GetBackupFiles</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetFullPathToDatabaseFile</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.TabPageDataCollection(string)</signature>
                        <name>LoadTabPageCollection</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MakeBackup</name>
                    </method>
                    <method>
                        <signature>void(SecureMemo.DataModels.BackupFileInfo)</signature>
                        <name>RestoreBackup</name>
                    </method>
                    <method>
                        <signature>bool(SecureMemo.DataModels.TabPageDataCollection, string)</signature>
                        <name>SaveTabPageCollection</name>
                    </method>
                    <method>
                        <signature>SecureMemo.Storage.MemoStorageService()</signature>
                        <name>get_Instance</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.IO.FileInfo,SecureMemo.DataModels.BackupFileInfo&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>SecureMemo.Storage.MemoStorageService</signature>
                        <name>_instance</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>databaseFilePath</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>SecureMemo.Storage.MemoStorageService()</signature>
                        <name>Instance</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.UserControls.MemoTabPageControl</name>
                <methodlist>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_TabTextDataChanged</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_TabNameIndex</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TabPageControlTextboxName</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_TabTextDataChanged</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TabPageControlTextboxName</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>tabRichTextBox_TextChanged</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TabPageControlTextboxName&gt;k__BackingField</name>
                        <newname>eval_f</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>TabTextDataChanged</name>
                        <newname>eval_b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_tabNameIndex</name>
                        <newname>eval_a</newname>
                    </field>
                    <field>
                        <signature>System.ComponentModel.IContainer</signature>
                        <name>components</name>
                        <newname>eval_c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.Panel</signature>
                        <name>contentPanel</name>
                        <newname>eval_d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Forms.RichTextBox</signature>
                        <name>tabRichTextBox</name>
                        <newname>eval_e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>TabNameIndex</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TabPageControlTextboxName</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler</signature>
                        <name>TabTextDataChanged</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>SecureMemo.Utility.ConfigHelper</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>CreateApplicationSalt</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>SecureMemo.DataModels.SecureMemoAppSettings()</signature>
                        <name>GetDefaultSettings</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.Utility.ConfigSpecificSettings</name>
                <newname>eval_r</newname>
                <methodlist>
                    <method>
                        <signature>string(bool)</signature>
                        <name>GetSettingsFolderPath</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.Utility.ControlHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Windows.Forms.Control(System.Windows.Forms.Control, string)</signature>
                        <name>GetChildControlByName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>SecureMemo.Utility.GraphicsExtension</name>
                <newname>eval_s</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Drawing.Graphics, System.Drawing.Brush, System.Drawing.Rectangle, int32)</signature>
                        <name>FillRoundedRectangle</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Drawing.Graphics, System.Drawing.Brush, float32, float32, float32, float32, float32)</signature>
                        <name>FillRoundedRectangle</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>void(System.Drawing.Graphics, System.Drawing.Brush, int32, int32, int32, int32, int32)</signature>
                        <name>FillRoundedRectangle</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Drawing.Drawing2D.GraphicsPath(System.Drawing.Graphics, System.Drawing.RectangleF)</signature>
                        <name>GenerateCapsule</name>
                        <newname>eval_a</newname>
                    </method>
                    <method>
                        <signature>System.Drawing.Drawing2D.GraphicsPath(System.Drawing.Graphics, System.Drawing.RectangleF, float32)</signature>
                        <name>GenerateRoundedRectangle</name>
                        <newname>eval_a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>qbgshfpngbe.VafgnaprSvryq</name>
                        <newname>eval_a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>359</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>2590</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>1628</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties</description>
            <statistic>447</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events</description>
            <statistic>10</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>93</statistic>
            <statistic>25,91 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>621</statistic>
            <statistic>23,98 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>1254</statistic>
            <statistic>77,03 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties Renamed</description>
            <statistic>9</statistic>
            <statistic>2,01 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events Renamed</description>
            <statistic>0</statistic>
            <statistic>0,00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'eval_a'</description>
            <statistic>335</statistic>
            <statistic>12,93 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'eval_b'</description>
            <statistic>95</statistic>
            <statistic>3,67 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'eval_c'</description>
            <statistic>47</statistic>
            <statistic>1,81 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'eval_d'</description>
            <statistic>34</statistic>
            <statistic>1,31 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'eval_e'</description>
            <statistic>24</statistic>
            <statistic>0,93 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>19</statistic>
            <statistic>0,73 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'eval_f'</description>
            <statistic>10</statistic>
            <statistic>0,39 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>