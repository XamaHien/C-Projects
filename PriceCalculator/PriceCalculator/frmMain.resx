<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAggAAAARAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAA
        ABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAASAQEBCwUFBQEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQOUVFRopGRkdySkpLdk5OT3ZOTk92UlJTdlJSU3ZWV
        ld2VlZXdlZWV3ZaWlt2WlpbdlpaW3ZWVld2VlZXdlJSU3ZSUlN2Tk5Pdk5OT3ZKSktxzc3PCCAgIJAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrHx8f+4ODg/9zc3P/d3d3/4ODg/+bm
        5v/j4+P/4uLi/+Pj4//o6Oj/6Ojo/+Tk5P/j4+P/5eXl/+jo6P/n5+f/1tbW/8nJyf/IyMj/19fX/97e
        3v8iIiJoAwMDAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL8zMzP+QkJD/RERE/2Nj
        Y/82Njb/6Ojo/zc3N/86Ojr/Ly8v/5WVlf+VlZX/RUVF/1tbW/82Njb/6urq/+np6f9dXV3/NTU1/zU1
        Nf9lZWX/4eHh/yUlJW0BAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvzs7O/46O
        jv9WVlb/cHBw/zc3N//r6+v/ODg4/zg4OP84ODj/k5OT/5OTk/9MTEz/YGBg/zc3N//s7Oz/6urq/05O
        Tv8oKCj/KCgo/1RUVP/j4+P/JSUlbQEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AC/Q0ND/29vb/8TExP/Gxsb/zc3N/+zs7P/Pz8//ycnJ/8rKyv/k5OT/5OTk/8rKyv/Kysr/0NDQ/+7u
        7v/s7Oz/VFRU/01NTf95eXn/WVlZ/+Tk5P8mJiZtAQEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAL9LS0v/Hx8f/mZmZ/6+vr/+fn5//7u7u/5aWlv+qqqr/mJiY/8nJyf/Ly8v/mJiY/6en
        p/+Xl5f/8PDw/+7u7v9ZWVn/MzMz/1NTU/9eXl7/5ubm/ycnJ20BAQEBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAv1NTU/4qKiv8tLS3/VlZW/y0tLf/v7+//Li4u/1BQUP85OTn/kJCQ/5KS
        kv8uLi7/ZWVl/y0tLf/y8vL/8PDw/2FhYf8/Pz//Pz8//2ZmZv/n5+f/KCgobQEBAQEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/W1tb/s7Oz/3V1df+NjY3/d3d3//Hx8f96enr/ioqK/4aG
        hv+8vLz/vb29/3t7e/+QkJD/eXl5//T09P/y8vL/nZ2d/319ff99fX3/n5+f/+jo6P8pKSltAQEBAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL9fX1//q6ur/6Ojo/+np6f/t7e3/8vLy//Pz
        8//z8/P/9fX1//f39//29vb/8PDw//Dw8P/x8fH/9fX1//T09P/v7+//6urq/+np6f/q6ur/6enp/yoq
        Km0CAgIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv2dnZ/5SUlP9LS0v/ZWVl/zc3
        N//z8/P/Q0ND/1FRUf9RUVH/oaGh/5ycnP9PT0//X19f/zc3N//29vb/9fX1/2hoaP8uLi7/Li4u/2Zm
        Zv/q6ur/KysrbQICAgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/a2tr/kZGR/0ZG
        Rv9oaGj/ODg4//T09P87Ozv/dHR0/0dHR/+ZmZn/mpqa/1hYWP9sbGz/ODg4//j4+P/29vb/Z2dn/01N
        Tf9YWFj/ZWVl/+vr6/8sLCxtAgICAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL9zc
        3P/i4uL/zMzM/83Nzf/W1tb/9PT0/9bW1v/Pz8//0dHR/+7u7v/w8PD/1NTU/9LS0v/Z2dn/+Pj4//b2
        9v/e3t7/zMzM/8vLy//a2tr/6+vr/y0tLW0CAgIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAv3d3d/8XFxf+JiYn/l5eX/5OTk//19fX/mpqa/6qqqv+dnZ3/0dHR/9PT0/+ZmZn/qamp/5yc
        nP/4+Pj/9/f3/7Kysv+RkZH/kJCQ/6+vr//s7Oz/LS0tbQICAgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAC/e3t7/jY2N/y8vL/9YWFj/LS0t//Pz8/8vLy//ZWVl/1NTU/+Tk5P/lJSU/0dH
        R/9ra2v/LS0t//j4+P/39/f/Xl5e/1BQUP9QUFD/XV1d/+zs7P8uLi5tAgICAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAL9/f3/+3t7f/fHx8/5WVlf95eXn/9fX1/3t7e/+QkJD/g4OD/7+/
        v/+/v7//goKC/4+Pj/97e3v/+Pj4//b29v+ampr/fHx8/3x8fP+YmJj/7Ozs/y8vL20CAgIBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv4ODg/+7u7v/w8PD/8fHx//Pz8//09PT/9fX1//f3
        9//4+Pj/+fn5//n5+f/5+fn/+fn5//j4+P/39/f/9vb2//T09P/z8/P/8fHx//Dw8P/s7Oz/MDAwbQIC
        AgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/g4OD/7Ozs/+Xl5f/m5ub/6+vr//T0
        9P/u7u7/6+vr/+zs7P/29vb/9vb2/+3t7f/t7e3/8PDw//b29v/19fX/7+/v/+jo6P/m5ub/6+vr/+zs
        7P8xMTFtAgICAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+Hh4f+VlZX/Pz8//0BA
        QP8/Pz//8vLy/0dHR/9BQUH/MDAw/5mZmf+ampr/QEBA/1VVVf88PDz/9fX1//T09P9mZmb/MTEx/zw8
        PP9mZmb/7Ozs/zIyMm0CAgIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv4uLi/5OT
        k/9xcXH/bW1t/1VVVf/x8fH/VVVV/4GBgf9HR0f/l5eX/5eXl/+Dg4P/bGxs/z09Pf/09PT/8/Pz/2Vl
        Zf9PT0//ZGRk/2ZmZv/r6+v/MjIybQICAgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AC/i4uL/4eHh/8nJyf/Kysr/0tLS//Hx8f/U1NT/z8/P/83Nzf/o6Oj/6Ojo/83Nzf/Nzc3/1dXV//Pz
        8//y8vL/3Nzc/8vLy//Kysr/2dnZ/+vr6/8zMzNtAwMDAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAL+Pj4//t7e3/7u7u/+/v7//w8PD/8fHx//Ly8v/y8vL/8/Pz//Pz8//z8/P/8/Pz//Pz
        8//z8/P/8vLy//Ly8v/x8fH/8PDw/+/v7//u7u7/6+vr/zQ0NG0DAwMBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAv5OTk/7m5uf9XV1f/VlZW/1ZWVv9XV1f/V1dX/1dXV/9XV1f/V1dX/1dX
        V/9XV1f/V1dX/1dXV/9XV1f/V1dX/1dXV/9XV1f/VlZW/5WVlf/q6ur/NTU1bQMDAwEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/k5OT/np6e/397ef+NfnT/i3tx/4t7cf+Le3H/i3tx/4t7
        cf+Le3H/i3tx/4t7cf+Le3H/i3tx/4x8cf+Le3H/jHxx/4t7cf+Gf3r/eHh4/+rq6v82NjZtAwMDAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+Xl5f+enp7/ZFpU/+fBqP/duaH/4Lyk/925
        of/gu6L/3Lef/9+6of/ct5//37qh/9y3n//PrJX/uJmF/8emj//LqJL/x6WP/4h1aP94eHj/6urq/zY2
        Nm0DAwMBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv5eXl/56env9jWVL/5byh/9u1
        m//fuJ3/3LWb/9+4nv/ctZv/3rWa/9qwlP/brpD/vJR5/8Wbfv/HnYD/zKKG/8mjiv/IpY3/h3Nm/3h4
        eP/p6en/Nzc3bQMDAwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/k5OT/np6e/2FX
        UP/huJ3/2bKY/9y1m//as5r/3bed/9q1nP/duJ7/2rad/964n//Mpo3/zKGE/7SIav++i2n/votq/8CP
        b/+Hbl7/eHh4/+np6f83NzdtAwMDAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+Tk
        5P+lpaX/S0tL/0ZHR/9GR0f/RkdH/0ZHR/9GR0f/RkdH/0ZHR/9GR0f/RkdH/0ZHR/9GR0f/RkdH/0dH
        R/9HR0f/R0dH/01OTv9/f3//6Ojo/zc3N20DAwMBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAACAgIo5OTk/ubm5v/FxcX/xcXF/8XFxf/FxcX/xsbG/8bGxv/Gxsb/xsbG/8bGxv/Gxsb/xsbG/8bG
        xv/Gxsb/xsbG/8XFxf/FxcX/xcXF/97e3v/o6Oj/Nzc3ZggICAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABQUFAqnp6e85ubm/ubm5v/m5ub/5ubm/+bm5v/m5ub/5ubm/+bm5v/m5ub/5ubm/+bm
        5v/m5ub/5ubm/+bm5v/m5ub/5ubm/+bm5v/m5ub/5eXl/83NzeIpKSkjAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ0NAUnJycJKSkpCSkpKQkpKSkJKSkpCSkpKQkpKSkJKSkpCSkp
        KQkpKSkJKSkpCSkpKQkpKSkJKSkpCSkpKQkpKSkJKSkpCSkpKQkpKSkJLy8vBgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAH/AAAB/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAf+AAAP/////8=
</value>
  </data>
</root>