#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:4.0.30319.34209
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseLib.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CuplexApi")]
	public partial class DBDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGeoIPCity(GeoIPCity instance);
    partial void UpdateGeoIPCity(GeoIPCity instance);
    partial void DeleteGeoIPCity(GeoIPCity instance);
    partial void InsertGeoIPCityBlock(GeoIPCityBlock instance);
    partial void UpdateGeoIPCityBlock(GeoIPCityBlock instance);
    partial void DeleteGeoIPCityBlock(GeoIPCityBlock instance);
    partial void InsertGeoIPCountry(GeoIPCountry instance);
    partial void UpdateGeoIPCountry(GeoIPCountry instance);
    partial void DeleteGeoIPCountry(GeoIPCountry instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertSecureChatMessage(SecureChatMessage instance);
    partial void UpdateSecureChatMessage(SecureChatMessage instance);
    partial void DeleteSecureChatMessage(SecureChatMessage instance);
    partial void InsertSecureChatSetting(SecureChatSetting instance);
    partial void UpdateSecureChatSetting(SecureChatSetting instance);
    partial void DeleteSecureChatSetting(SecureChatSetting instance);
    partial void InsertSecureChatUser(SecureChatUser instance);
    partial void UpdateSecureChatUser(SecureChatUser instance);
    partial void DeleteSecureChatUser(SecureChatUser instance);
    partial void InsertWordDictionary(WordDictionary instance);
    partial void UpdateWordDictionary(WordDictionary instance);
    partial void DeleteWordDictionary(WordDictionary instance);
    #endregion
		
		public DBDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GeoIPCity> GeoIPCities
		{
			get
			{
				return this.GetTable<GeoIPCity>();
			}
		}
		
		public System.Data.Linq.Table<GeoIPCityBlock> GeoIPCityBlocks
		{
			get
			{
				return this.GetTable<GeoIPCityBlock>();
			}
		}
		
		public System.Data.Linq.Table<GeoIPCountry> GeoIPCountries
		{
			get
			{
				return this.GetTable<GeoIPCountry>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<SecureChatMessage> SecureChatMessages
		{
			get
			{
				return this.GetTable<SecureChatMessage>();
			}
		}
		
		public System.Data.Linq.Table<SecureChatSetting> SecureChatSettings
		{
			get
			{
				return this.GetTable<SecureChatSetting>();
			}
		}
		
		public System.Data.Linq.Table<SecureChatUser> SecureChatUsers
		{
			get
			{
				return this.GetTable<SecureChatUser>();
			}
		}
		
		public System.Data.Linq.Table<WordDictionary> WordDictionaries
		{
			get
			{
				return this.GetTable<WordDictionary>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoIPCity")]
	public partial class GeoIPCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private string _CountryCode;
		
		private string _RegionCode;
		
		private string _CityName;
		
		private string _PostalCode;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private System.Nullable<long> _MetroCode;
		
		private string _AreaCode;
		
		private EntityRef<GeoIPCity> _Location;
		
		private EntityRef<GeoIPCity> _GeoIPCity_GeoIPBlock;
		
		private EntitySet<GeoIPCityBlock> _GeoIPCityBlocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnRegionCodeChanging(string value);
    partial void OnRegionCodeChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnMetroCodeChanging(System.Nullable<long> value);
    partial void OnMetroCodeChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    #endregion
		
		public GeoIPCity()
		{
			this._Location = default(EntityRef<GeoIPCity>);
			this._GeoIPCity_GeoIPBlock = default(EntityRef<GeoIPCity>);
			this._GeoIPCityBlocks = new EntitySet<GeoIPCityBlock>(new Action<GeoIPCityBlock>(this.attach_GeoIPCityBlocks), new Action<GeoIPCityBlock>(this.detach_GeoIPCityBlocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionCode", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string RegionCode
		{
			get
			{
				return this._RegionCode;
			}
			set
			{
				if ((this._RegionCode != value))
				{
					this.OnRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._RegionCode = value;
					this.SendPropertyChanged("RegionCode");
					this.OnRegionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetroCode", DbType="BigInt")]
		public System.Nullable<long> MetroCode
		{
			get
			{
				return this._MetroCode;
			}
			set
			{
				if ((this._MetroCode != value))
				{
					this.OnMetroCodeChanging(value);
					this.SendPropertyChanging();
					this._MetroCode = value;
					this.SendPropertyChanged("MetroCode");
					this.OnMetroCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaCode", DbType="Char(3)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GeoIPCity_GeoIPBlock", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public GeoIPCity Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				GeoIPCity previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.GeoIPCity_GeoIPBlock = null;
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.GeoIPCity_GeoIPBlock = this;
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GeoIPCity_GeoIPBlock", Storage="_GeoIPCity_GeoIPBlock", ThisKey="LocationId", OtherKey="LocationId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public GeoIPCity GeoIPCity_GeoIPBlock
		{
			get
			{
				return this._GeoIPCity_GeoIPBlock.Entity;
			}
			set
			{
				GeoIPCity previousValue = this._GeoIPCity_GeoIPBlock.Entity;
				if (((previousValue != value) 
							|| (this._GeoIPCity_GeoIPBlock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoIPCity_GeoIPBlock.Entity = null;
						previousValue.Location = null;
					}
					this._GeoIPCity_GeoIPBlock.Entity = value;
					if ((value != null))
					{
						value.Location = this;
					}
					this.SendPropertyChanged("GeoIPCity_GeoIPBlock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GeoIPCityBlock_GeoIPCity", Storage="_GeoIPCityBlocks", ThisKey="LocationId", OtherKey="LocationId", DeleteRule="NO ACTION")]
		public EntitySet<GeoIPCityBlock> GeoIPCityBlocks
		{
			get
			{
				return this._GeoIPCityBlocks;
			}
			set
			{
				this._GeoIPCityBlocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeoIPCityBlocks(GeoIPCityBlock entity)
		{
			this.SendPropertyChanging();
			entity.GeoIPCity = this;
		}
		
		private void detach_GeoIPCityBlocks(GeoIPCityBlock entity)
		{
			this.SendPropertyChanging();
			entity.GeoIPCity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoIPCityBlock")]
	public partial class GeoIPCityBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private long _IPFrom;
		
		private long _IPTo;
		
		private EntityRef<GeoIPCity> _GeoIPCity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnIPFromChanging(long value);
    partial void OnIPFromChanged();
    partial void OnIPToChanging(long value);
    partial void OnIPToChanged();
    #endregion
		
		public GeoIPCityBlock()
		{
			this._GeoIPCity = default(EntityRef<GeoIPCity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._GeoIPCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPFrom", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IPFrom
		{
			get
			{
				return this._IPFrom;
			}
			set
			{
				if ((this._IPFrom != value))
				{
					this.OnIPFromChanging(value);
					this.SendPropertyChanging();
					this._IPFrom = value;
					this.SendPropertyChanged("IPFrom");
					this.OnIPFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPTo", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IPTo
		{
			get
			{
				return this._IPTo;
			}
			set
			{
				if ((this._IPTo != value))
				{
					this.OnIPToChanging(value);
					this.SendPropertyChanging();
					this._IPTo = value;
					this.SendPropertyChanged("IPTo");
					this.OnIPToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_GeoIPCityBlock_GeoIPCity", Storage="_GeoIPCity", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public GeoIPCity GeoIPCity
		{
			get
			{
				return this._GeoIPCity.Entity;
			}
			set
			{
				GeoIPCity previousValue = this._GeoIPCity.Entity;
				if (((previousValue != value) 
							|| (this._GeoIPCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeoIPCity.Entity = null;
						previousValue.GeoIPCityBlocks.Remove(this);
					}
					this._GeoIPCity.Entity = value;
					if ((value != null))
					{
						value.GeoIPCityBlocks.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("GeoIPCity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoIPCountry")]
	public partial class GeoIPCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IPFrom;
		
		private long _IPTo;
		
		private string _IPAddressFrom;
		
		private string _IPAddressTo;
		
		private string _CountryCode;
		
		private string _CountryName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIPFromChanging(long value);
    partial void OnIPFromChanged();
    partial void OnIPToChanging(long value);
    partial void OnIPToChanged();
    partial void OnIPAddressFromChanging(string value);
    partial void OnIPAddressFromChanged();
    partial void OnIPAddressToChanging(string value);
    partial void OnIPAddressToChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public GeoIPCountry()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPFrom", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IPFrom
		{
			get
			{
				return this._IPFrom;
			}
			set
			{
				if ((this._IPFrom != value))
				{
					this.OnIPFromChanging(value);
					this.SendPropertyChanging();
					this._IPFrom = value;
					this.SendPropertyChanged("IPFrom");
					this.OnIPFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPTo", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IPTo
		{
			get
			{
				return this._IPTo;
			}
			set
			{
				if ((this._IPTo != value))
				{
					this.OnIPToChanging(value);
					this.SendPropertyChanging();
					this._IPTo = value;
					this.SendPropertyChanged("IPTo");
					this.OnIPToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddressFrom", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddressFrom
		{
			get
			{
				return this._IPAddressFrom;
			}
			set
			{
				if ((this._IPAddressFrom != value))
				{
					this.OnIPAddressFromChanging(value);
					this.SendPropertyChanging();
					this._IPAddressFrom = value;
					this.SendPropertyChanged("IPAddressFrom");
					this.OnIPAddressFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddressTo", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddressTo
		{
			get
			{
				return this._IPAddressTo;
			}
			set
			{
				if ((this._IPAddressTo != value))
				{
					this.OnIPAddressToChanging(value);
					this.SendPropertyChanging();
					this._IPAddressTo = value;
					this.SendPropertyChanged("IPAddressTo");
					this.OnIPAddressToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ISOCode;
		
		private EntitySet<WordDictionary> _WordDictionaries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnISOCodeChanging(string value);
    partial void OnISOCodeChanged();
    #endregion
		
		public Language()
		{
			this._WordDictionaries = new EntitySet<WordDictionary>(new Action<WordDictionary>(this.attach_WordDictionaries), new Action<WordDictionary>(this.detach_WordDictionaries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISOCode", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string ISOCode
		{
			get
			{
				return this._ISOCode;
			}
			set
			{
				if ((this._ISOCode != value))
				{
					this.OnISOCodeChanging(value);
					this.SendPropertyChanging();
					this._ISOCode = value;
					this.SendPropertyChanged("ISOCode");
					this.OnISOCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_WordDictionary_Language", Storage="_WordDictionaries", ThisKey="Id", OtherKey="LanguageId", DeleteRule="NO ACTION")]
		public EntitySet<WordDictionary> WordDictionaries
		{
			get
			{
				return this._WordDictionaries;
			}
			set
			{
				this._WordDictionaries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WordDictionaries(WordDictionary entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_WordDictionaries(WordDictionary entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecureChatMessage")]
	public partial class SecureChatMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _CreateDate;
		
		private string _Message;
		
		private int _ReceiverUserId;
		
		private int _SenderUserId;
		
		private EntityRef<SecureChatUser> _SecureChatUser;
		
		private EntityRef<SecureChatUser> _SenderUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnReceiverUserIdChanging(int value);
    partial void OnReceiverUserIdChanged();
    partial void OnSenderUserIdChanging(int value);
    partial void OnSenderUserIdChanged();
    #endregion
		
		public SecureChatMessage()
		{
			this._SecureChatUser = default(EntityRef<SecureChatUser>);
			this._SenderUser = default(EntityRef<SecureChatUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverUserId", DbType="Int NOT NULL")]
		public int ReceiverUserId
		{
			get
			{
				return this._ReceiverUserId;
			}
			set
			{
				if ((this._ReceiverUserId != value))
				{
					if (this._SecureChatUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverUserIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverUserId = value;
					this.SendPropertyChanged("ReceiverUserId");
					this.OnReceiverUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderUserId", DbType="Int NOT NULL")]
		public int SenderUserId
		{
			get
			{
				return this._SenderUserId;
			}
			set
			{
				if ((this._SenderUserId != value))
				{
					if (this._SenderUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderUserIdChanging(value);
					this.SendPropertyChanging();
					this._SenderUserId = value;
					this.SendPropertyChanged("SenderUserId");
					this.OnSenderUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SecureChatMessage_SecureChatUser_Receiver", Storage="_SecureChatUser", ThisKey="ReceiverUserId", OtherKey="Id", IsForeignKey=true)]
		public SecureChatUser SecureChatUser
		{
			get
			{
				return this._SecureChatUser.Entity;
			}
			set
			{
				SecureChatUser previousValue = this._SecureChatUser.Entity;
				if (((previousValue != value) 
							|| (this._SecureChatUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecureChatUser.Entity = null;
						previousValue.SecureChatMessages.Remove(this);
					}
					this._SecureChatUser.Entity = value;
					if ((value != null))
					{
						value.SecureChatMessages.Add(this);
						this._ReceiverUserId = value.Id;
					}
					else
					{
						this._ReceiverUserId = default(int);
					}
					this.SendPropertyChanged("SecureChatUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SecureChatMessage_SecureChatUser_Sender", Storage="_SenderUser", ThisKey="SenderUserId", OtherKey="Id", IsForeignKey=true)]
		public SecureChatUser SenderUser
		{
			get
			{
				return this._SenderUser.Entity;
			}
			set
			{
				SecureChatUser previousValue = this._SenderUser.Entity;
				if (((previousValue != value) 
							|| (this._SenderUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SenderUser.Entity = null;
						previousValue.SecureChatMessage_SecureChatUser_Senders.Remove(this);
					}
					this._SenderUser.Entity = value;
					if ((value != null))
					{
						value.SecureChatMessage_SecureChatUser_Senders.Add(this);
						this._SenderUserId = value.Id;
					}
					else
					{
						this._SenderUserId = default(int);
					}
					this.SendPropertyChanged("SenderUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecureChatSettings")]
	public partial class SecureChatSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _KeyType;
		
		private string _Value;
		
		private string _Description;
		
		private int _DataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyTypeChanging(string value);
    partial void OnKeyTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDataTypeChanging(int value);
    partial void OnDataTypeChanged();
    #endregion
		
		public SecureChatSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string KeyType
		{
			get
			{
				return this._KeyType;
			}
			set
			{
				if ((this._KeyType != value))
				{
					this.OnKeyTypeChanging(value);
					this.SendPropertyChanging();
					this._KeyType = value;
					this.SendPropertyChanged("KeyType");
					this.OnKeyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int NOT NULL")]
		public int DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecureChatUser")]
	public partial class SecureChatUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nickname;
		
		private System.DateTime _CreateDate;
		
		private string _GUID;
		
		private int _Status;
		
		private EntitySet<SecureChatMessage> _SecureChatMessages;
		
		private EntitySet<SecureChatMessage> _SecureChatMessage_SecureChatUser_Senders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnGUIDChanging(string value);
    partial void OnGUIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public SecureChatUser()
		{
			this._SecureChatMessages = new EntitySet<SecureChatMessage>(new Action<SecureChatMessage>(this.attach_SecureChatMessages), new Action<SecureChatMessage>(this.detach_SecureChatMessages));
			this._SecureChatMessage_SecureChatUser_Senders = new EntitySet<SecureChatMessage>(new Action<SecureChatMessage>(this.attach_SecureChatMessage_SecureChatUser_Senders), new Action<SecureChatMessage>(this.detach_SecureChatMessage_SecureChatUser_Senders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SecureChatMessage_SecureChatUser_Receiver", Storage="_SecureChatMessages", ThisKey="Id", OtherKey="ReceiverUserId", DeleteRule="NO ACTION")]
		public EntitySet<SecureChatMessage> SecureChatMessages
		{
			get
			{
				return this._SecureChatMessages;
			}
			set
			{
				this._SecureChatMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SecureChatMessage_SecureChatUser_Sender", Storage="_SecureChatMessage_SecureChatUser_Senders", ThisKey="Id", OtherKey="SenderUserId", DeleteRule="NO ACTION")]
		public EntitySet<SecureChatMessage> SecureChatMessage_SecureChatUser_Senders
		{
			get
			{
				return this._SecureChatMessage_SecureChatUser_Senders;
			}
			set
			{
				this._SecureChatMessage_SecureChatUser_Senders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SecureChatMessages(SecureChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.SecureChatUser = this;
		}
		
		private void detach_SecureChatMessages(SecureChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.SecureChatUser = null;
		}
		
		private void attach_SecureChatMessage_SecureChatUser_Senders(SecureChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.SenderUser = this;
		}
		
		private void detach_SecureChatMessage_SecureChatUser_Senders(SecureChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.SenderUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WordDictionary")]
	public partial class WordDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Word;
		
		private int _LanguageId;
		
		private int _Type;
		
		private int _WordLength;
		
		private EntityRef<Language> _Language;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnWordLengthChanging(int value);
    partial void OnWordLengthChanged();
    #endregion
		
		public WordDictionary()
		{
			this._Language = default(EntityRef<Language>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageId", DbType="Int NOT NULL")]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordLength", DbType="Int NOT NULL")]
		public int WordLength
		{
			get
			{
				return this._WordLength;
			}
			set
			{
				if ((this._WordLength != value))
				{
					this.OnWordLengthChanging(value);
					this.SendPropertyChanging();
					this._WordLength = value;
					this.SendPropertyChanged("WordLength");
					this.OnWordLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_WordDictionary_Language", Storage="_Language", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.WordDictionaries.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.WordDictionaries.Add(this);
						this._LanguageId = value.Id;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
