#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:2.0.50727.4952
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CuplexLib.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CuplexDB")]
	public partial class CuplexDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthentication(Authentication instance);
    partial void UpdateAuthentication(Authentication instance);
    partial void DeleteAuthentication(Authentication instance);
    partial void InsertBookmark(Bookmark instance);
    partial void UpdateBookmark(Bookmark instance);
    partial void DeleteBookmark(Bookmark instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertEventLog(EventLog instance);
    partial void UpdateEventLog(EventLog instance);
    partial void DeleteEventLog(EventLog instance);
    partial void InsertIpLookup(IpLookup instance);
    partial void UpdateIpLookup(IpLookup instance);
    partial void DeleteIpLookup(IpLookup instance);
    partial void InsertLink(Link instance);
    partial void UpdateLink(Link instance);
    partial void DeleteLink(Link instance);
    partial void InsertLinkSuggestion(LinkSuggestion instance);
    partial void UpdateLinkSuggestion(LinkSuggestion instance);
    partial void DeleteLinkSuggestion(LinkSuggestion instance);
    partial void InsertMenuItem(MenuItem instance);
    partial void UpdateMenuItem(MenuItem instance);
    partial void DeleteMenuItem(MenuItem instance);
    partial void InsertPasswordReset(PasswordReset instance);
    partial void UpdatePasswordReset(PasswordReset instance);
    partial void DeletePasswordReset(PasswordReset instance);
    partial void InsertPoll(Poll instance);
    partial void UpdatePoll(Poll instance);
    partial void DeletePoll(Poll instance);
    partial void InsertPollOption(PollOption instance);
    partial void UpdatePollOption(PollOption instance);
    partial void DeletePollOption(PollOption instance);
    partial void InsertRandomImage(RandomImage instance);
    partial void UpdateRandomImage(RandomImage instance);
    partial void DeleteRandomImage(RandomImage instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertSiteLink(SiteLink instance);
    partial void UpdateSiteLink(SiteLink instance);
    partial void DeleteSiteLink(SiteLink instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserToLink(UserToLink instance);
    partial void UpdateUserToLink(UserToLink instance);
    partial void DeleteUserToLink(UserToLink instance);
    partial void InsertUserToPollOption(UserToPollOption instance);
    partial void UpdateUserToPollOption(UserToPollOption instance);
    partial void DeleteUserToPollOption(UserToPollOption instance);
    #endregion
		
		public CuplexDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CuplexDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CuplexDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CuplexDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Authentication> Authentications
		{
			get
			{
				return this.GetTable<Authentication>();
			}
		}
		
		public System.Data.Linq.Table<Bookmark> Bookmarks
		{
			get
			{
				return this.GetTable<Bookmark>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<EventLog> EventLogs
		{
			get
			{
				return this.GetTable<EventLog>();
			}
		}
		
		public System.Data.Linq.Table<IpLookup> IpLookups
		{
			get
			{
				return this.GetTable<IpLookup>();
			}
		}
		
		public System.Data.Linq.Table<Link> Links
		{
			get
			{
				return this.GetTable<Link>();
			}
		}
		
		public System.Data.Linq.Table<LinkSuggestion> LinkSuggestions
		{
			get
			{
				return this.GetTable<LinkSuggestion>();
			}
		}
		
		public System.Data.Linq.Table<MenuItem> MenuItems
		{
			get
			{
				return this.GetTable<MenuItem>();
			}
		}
		
		public System.Data.Linq.Table<PasswordReset> PasswordResets
		{
			get
			{
				return this.GetTable<PasswordReset>();
			}
		}
		
		public System.Data.Linq.Table<Poll> Polls
		{
			get
			{
				return this.GetTable<Poll>();
			}
		}
		
		public System.Data.Linq.Table<PollOption> PollOptions
		{
			get
			{
				return this.GetTable<PollOption>();
			}
		}
		
		public System.Data.Linq.Table<RandomImage> RandomImages
		{
			get
			{
				return this.GetTable<RandomImage>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<SiteLink> SiteLinks
		{
			get
			{
				return this.GetTable<SiteLink>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserToLink> UserToLinks
		{
			get
			{
				return this.GetTable<UserToLink>();
			}
		}
		
		public System.Data.Linq.Table<UserToPollOption> UserToPollOptions
		{
			get
			{
				return this.GetTable<UserToPollOption>();
			}
		}
	}
	
	[Table(Name="dbo.Authentication")]
	public partial class Authentication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthenticationRef;
		
		private string _UserName;
		
		private System.DateTime _Expires;
		
		private string _AuthenticationHash;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthenticationRefChanging(int value);
    partial void OnAuthenticationRefChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnExpiresChanging(System.DateTime value);
    partial void OnExpiresChanged();
    partial void OnAuthenticationHashChanging(string value);
    partial void OnAuthenticationHashChanged();
    #endregion
		
		public Authentication()
		{
			OnCreated();
		}
		
		[Column(Storage="_AuthenticationRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthenticationRef
		{
			get
			{
				return this._AuthenticationRef;
			}
			set
			{
				if ((this._AuthenticationRef != value))
				{
					this.OnAuthenticationRefChanging(value);
					this.SendPropertyChanging();
					this._AuthenticationRef = value;
					this.SendPropertyChanged("AuthenticationRef");
					this.OnAuthenticationRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Expires", DbType="DateTime NOT NULL")]
		public System.DateTime Expires
		{
			get
			{
				return this._Expires;
			}
			set
			{
				if ((this._Expires != value))
				{
					this.OnExpiresChanging(value);
					this.SendPropertyChanging();
					this._Expires = value;
					this.SendPropertyChanged("Expires");
					this.OnExpiresChanged();
				}
			}
		}
		
		[Column(Storage="_AuthenticationHash", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string AuthenticationHash
		{
			get
			{
				return this._AuthenticationHash;
			}
			set
			{
				if ((this._AuthenticationHash != value))
				{
					this.OnAuthenticationHashChanging(value);
					this.SendPropertyChanging();
					this._AuthenticationHash = value;
					this.SendPropertyChanged("AuthenticationHash");
					this.OnAuthenticationHashChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Bookmark")]
	public partial class Bookmark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookmarkRef;
		
		private string _BookmarkData;
		
		private int _UserRef;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookmarkRefChanging(int value);
    partial void OnBookmarkRefChanged();
    partial void OnBookmarkDataChanging(string value);
    partial void OnBookmarkDataChanged();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    #endregion
		
		public Bookmark()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_BookmarkRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookmarkRef
		{
			get
			{
				return this._BookmarkRef;
			}
			set
			{
				if ((this._BookmarkRef != value))
				{
					this.OnBookmarkRefChanging(value);
					this.SendPropertyChanging();
					this._BookmarkRef = value;
					this.SendPropertyChanged("BookmarkRef");
					this.OnBookmarkRefChanged();
				}
			}
		}
		
		[Column(Storage="_BookmarkData", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BookmarkData
		{
			get
			{
				return this._BookmarkData;
			}
			set
			{
				if ((this._BookmarkData != value))
				{
					this.OnBookmarkDataChanging(value);
					this.SendPropertyChanging();
					this._BookmarkData = value;
					this.SendPropertyChanged("BookmarkData");
					this.OnBookmarkDataChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL")]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Association(Name="FK_Bookmark_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Bookmarks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Bookmarks.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryRef;
		
		private string _CategoryName;
		
		private EntitySet<Link> _Links;
		
		private EntitySet<LinkSuggestion> _LinkSuggestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryRefChanging(int value);
    partial void OnCategoryRefChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._Links = new EntitySet<Link>(new Action<Link>(this.attach_Links), new Action<Link>(this.detach_Links));
			this._LinkSuggestions = new EntitySet<LinkSuggestion>(new Action<LinkSuggestion>(this.attach_LinkSuggestions), new Action<LinkSuggestion>(this.detach_LinkSuggestions));
			OnCreated();
		}
		
		[Column(Storage="_CategoryRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryRef
		{
			get
			{
				return this._CategoryRef;
			}
			set
			{
				if ((this._CategoryRef != value))
				{
					this.OnCategoryRefChanging(value);
					this.SendPropertyChanging();
					this._CategoryRef = value;
					this.SendPropertyChanged("CategoryRef");
					this.OnCategoryRefChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Link_Category", Storage="_Links", ThisKey="CategoryRef", OtherKey="CategoryRef", DeleteRule="NO ACTION")]
		public EntitySet<Link> Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				this._Links.Assign(value);
			}
		}
		
		[Association(Name="FK_LinkSuggestion_Category", Storage="_LinkSuggestions", ThisKey="CategoryRef", OtherKey="CategoryRef", DeleteRule="NO ACTION")]
		public EntitySet<LinkSuggestion> LinkSuggestions
		{
			get
			{
				return this._LinkSuggestions;
			}
			set
			{
				this._LinkSuggestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_LinkSuggestions(LinkSuggestion entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_LinkSuggestions(LinkSuggestion entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentRef;
		
		private System.DateTime _CommentDate;
		
		private int _LinkRef;
		
		private string _CommentText;
		
		private int _UserRef;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentRefChanging(int value);
    partial void OnCommentRefChanged();
    partial void OnCommentDateChanging(System.DateTime value);
    partial void OnCommentDateChanged();
    partial void OnLinkRefChanging(int value);
    partial void OnLinkRefChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    #endregion
		
		public Comment()
		{
			this._Link = default(EntityRef<Link>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_CommentRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentRef
		{
			get
			{
				return this._CommentRef;
			}
			set
			{
				if ((this._CommentRef != value))
				{
					this.OnCommentRefChanging(value);
					this.SendPropertyChanging();
					this._CommentRef = value;
					this.SendPropertyChanged("CommentRef");
					this.OnCommentRefChanged();
				}
			}
		}
		
		[Column(Storage="_CommentDate", DbType="DateTime NOT NULL")]
		public System.DateTime CommentDate
		{
			get
			{
				return this._CommentDate;
			}
			set
			{
				if ((this._CommentDate != value))
				{
					this.OnCommentDateChanging(value);
					this.SendPropertyChanging();
					this._CommentDate = value;
					this.SendPropertyChanged("CommentDate");
					this.OnCommentDateChanged();
				}
			}
		}
		
		[Column(Storage="_LinkRef", DbType="Int NOT NULL")]
		public int LinkRef
		{
			get
			{
				return this._LinkRef;
			}
			set
			{
				if ((this._LinkRef != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkRefChanging(value);
					this.SendPropertyChanging();
					this._LinkRef = value;
					this.SendPropertyChanged("LinkRef");
					this.OnLinkRefChanged();
				}
			}
		}
		
		[Column(Storage="_CommentText", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL")]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Association(Name="FK_Comment_Link", Storage="_Link", ThisKey="LinkRef", OtherKey="LinkRef", IsForeignKey=true)]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._LinkRef = value.LinkRef;
					}
					else
					{
						this._LinkRef = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[Association(Name="FK_Comment_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EventLog")]
	public partial class EventLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventLogRef;
		
		private System.DateTime _EventLogDate;
		
		private System.Nullable<int> _UserRef;
		
		private string _EventText;
		
		private System.Nullable<int> _EventType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventLogRefChanging(int value);
    partial void OnEventLogRefChanged();
    partial void OnEventLogDateChanging(System.DateTime value);
    partial void OnEventLogDateChanged();
    partial void OnUserRefChanging(System.Nullable<int> value);
    partial void OnUserRefChanged();
    partial void OnEventTextChanging(string value);
    partial void OnEventTextChanged();
    partial void OnEventTypeChanging(System.Nullable<int> value);
    partial void OnEventTypeChanged();
    #endregion
		
		public EventLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EventLogRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventLogRef
		{
			get
			{
				return this._EventLogRef;
			}
			set
			{
				if ((this._EventLogRef != value))
				{
					this.OnEventLogRefChanging(value);
					this.SendPropertyChanging();
					this._EventLogRef = value;
					this.SendPropertyChanged("EventLogRef");
					this.OnEventLogRefChanged();
				}
			}
		}
		
		[Column(Storage="_EventLogDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventLogDate
		{
			get
			{
				return this._EventLogDate;
			}
			set
			{
				if ((this._EventLogDate != value))
				{
					this.OnEventLogDateChanging(value);
					this.SendPropertyChanging();
					this._EventLogDate = value;
					this.SendPropertyChanged("EventLogDate");
					this.OnEventLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int")]
		public System.Nullable<int> UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_EventText", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string EventText
		{
			get
			{
				return this._EventText;
			}
			set
			{
				if ((this._EventText != value))
				{
					this.OnEventTextChanging(value);
					this.SendPropertyChanging();
					this._EventText = value;
					this.SendPropertyChanged("EventText");
					this.OnEventTextChanged();
				}
			}
		}
		
		[Column(Storage="_EventType", DbType="Int")]
		public System.Nullable<int> EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[Association(Name="FK_EventLog_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventLogs.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IpLookup")]
	public partial class IpLookup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IPFrom;
		
		private long _IPTo;
		
		private string _Registry;
		
		private long _Assigned;
		
		private string _Ctry;
		
		private string _Cntry;
		
		private string _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIPFromChanging(long value);
    partial void OnIPFromChanged();
    partial void OnIPToChanging(long value);
    partial void OnIPToChanged();
    partial void OnRegistryChanging(string value);
    partial void OnRegistryChanged();
    partial void OnAssignedChanging(long value);
    partial void OnAssignedChanged();
    partial void OnCtryChanging(string value);
    partial void OnCtryChanged();
    partial void OnCntryChanging(string value);
    partial void OnCntryChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public IpLookup()
		{
			OnCreated();
		}
		
		[Column(Storage="_IPFrom", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IPFrom
		{
			get
			{
				return this._IPFrom;
			}
			set
			{
				if ((this._IPFrom != value))
				{
					this.OnIPFromChanging(value);
					this.SendPropertyChanging();
					this._IPFrom = value;
					this.SendPropertyChanged("IPFrom");
					this.OnIPFromChanged();
				}
			}
		}
		
		[Column(Storage="_IPTo", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IPTo
		{
			get
			{
				return this._IPTo;
			}
			set
			{
				if ((this._IPTo != value))
				{
					this.OnIPToChanging(value);
					this.SendPropertyChanging();
					this._IPTo = value;
					this.SendPropertyChanged("IPTo");
					this.OnIPToChanged();
				}
			}
		}
		
		[Column(Storage="_Registry", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Registry
		{
			get
			{
				return this._Registry;
			}
			set
			{
				if ((this._Registry != value))
				{
					this.OnRegistryChanging(value);
					this.SendPropertyChanging();
					this._Registry = value;
					this.SendPropertyChanged("Registry");
					this.OnRegistryChanged();
				}
			}
		}
		
		[Column(Storage="_Assigned", DbType="BigInt NOT NULL")]
		public long Assigned
		{
			get
			{
				return this._Assigned;
			}
			set
			{
				if ((this._Assigned != value))
				{
					this.OnAssignedChanging(value);
					this.SendPropertyChanging();
					this._Assigned = value;
					this.SendPropertyChanged("Assigned");
					this.OnAssignedChanged();
				}
			}
		}
		
		[Column(Storage="_Ctry", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Ctry
		{
			get
			{
				return this._Ctry;
			}
			set
			{
				if ((this._Ctry != value))
				{
					this.OnCtryChanging(value);
					this.SendPropertyChanging();
					this._Ctry = value;
					this.SendPropertyChanged("Ctry");
					this.OnCtryChanged();
				}
			}
		}
		
		[Column(Storage="_Cntry", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Cntry
		{
			get
			{
				return this._Cntry;
			}
			set
			{
				if ((this._Cntry != value))
				{
					this.OnCntryChanging(value);
					this.SendPropertyChanging();
					this._Cntry = value;
					this.SendPropertyChanged("Cntry");
					this.OnCntryChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Link")]
	public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkRef;
		
		private string _LinkName;
		
		private System.DateTime _LinkDate;
		
		private int _CategoryRef;
		
		private System.Nullable<int> _UserRef;
		
		private string _LinkUrl;
		
		private int _Clicks;
		
		private double _Rating;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
		private EntitySet<UserToLink> _UserToLinks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkRefChanging(int value);
    partial void OnLinkRefChanged();
    partial void OnLinkNameChanging(string value);
    partial void OnLinkNameChanged();
    partial void OnLinkDateChanging(System.DateTime value);
    partial void OnLinkDateChanged();
    partial void OnCategoryRefChanging(int value);
    partial void OnCategoryRefChanged();
    partial void OnUserRefChanging(System.Nullable<int> value);
    partial void OnUserRefChanged();
    partial void OnLinkUrlChanging(string value);
    partial void OnLinkUrlChanged();
    partial void OnClicksChanging(int value);
    partial void OnClicksChanged();
    partial void OnRatingChanging(double value);
    partial void OnRatingChanged();
    #endregion
		
		public Link()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			this._UserToLinks = new EntitySet<UserToLink>(new Action<UserToLink>(this.attach_UserToLinks), new Action<UserToLink>(this.detach_UserToLinks));
			OnCreated();
		}
		
		[Column(Storage="_LinkRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkRef
		{
			get
			{
				return this._LinkRef;
			}
			set
			{
				if ((this._LinkRef != value))
				{
					this.OnLinkRefChanging(value);
					this.SendPropertyChanging();
					this._LinkRef = value;
					this.SendPropertyChanged("LinkRef");
					this.OnLinkRefChanged();
				}
			}
		}
		
		[Column(Storage="_LinkName", DbType="VarChar(100)")]
		public string LinkName
		{
			get
			{
				return this._LinkName;
			}
			set
			{
				if ((this._LinkName != value))
				{
					this.OnLinkNameChanging(value);
					this.SendPropertyChanging();
					this._LinkName = value;
					this.SendPropertyChanged("LinkName");
					this.OnLinkNameChanged();
				}
			}
		}
		
		[Column(Storage="_LinkDate", DbType="DateTime NOT NULL")]
		public System.DateTime LinkDate
		{
			get
			{
				return this._LinkDate;
			}
			set
			{
				if ((this._LinkDate != value))
				{
					this.OnLinkDateChanging(value);
					this.SendPropertyChanging();
					this._LinkDate = value;
					this.SendPropertyChanged("LinkDate");
					this.OnLinkDateChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryRef", DbType="Int NOT NULL")]
		public int CategoryRef
		{
			get
			{
				return this._CategoryRef;
			}
			set
			{
				if ((this._CategoryRef != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryRefChanging(value);
					this.SendPropertyChanging();
					this._CategoryRef = value;
					this.SendPropertyChanged("CategoryRef");
					this.OnCategoryRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int")]
		public System.Nullable<int> UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_LinkUrl", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LinkUrl
		{
			get
			{
				return this._LinkUrl;
			}
			set
			{
				if ((this._LinkUrl != value))
				{
					this.OnLinkUrlChanging(value);
					this.SendPropertyChanging();
					this._LinkUrl = value;
					this.SendPropertyChanged("LinkUrl");
					this.OnLinkUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Clicks", DbType="Int NOT NULL")]
		public int Clicks
		{
			get
			{
				return this._Clicks;
			}
			set
			{
				if ((this._Clicks != value))
				{
					this.OnClicksChanging(value);
					this.SendPropertyChanging();
					this._Clicks = value;
					this.SendPropertyChanged("Clicks");
					this.OnClicksChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Float NOT NULL")]
		public double Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="FK_Comment_Link", Storage="_Comments", ThisKey="LinkRef", OtherKey="LinkRef", DeleteRule="NO ACTION")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="FK_Link_Category", Storage="_Category", ThisKey="CategoryRef", OtherKey="CategoryRef", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Links.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Links.Add(this);
						this._CategoryRef = value.CategoryRef;
					}
					else
					{
						this._CategoryRef = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="FK_Link_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Links.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Links.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="FK_UserToLink_Link", Storage="_UserToLinks", ThisKey="LinkRef", OtherKey="LinkRef", DeleteRule="NO ACTION")]
		public EntitySet<UserToLink> UserToLinks
		{
			get
			{
				return this._UserToLinks;
			}
			set
			{
				this._UserToLinks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_UserToLinks(UserToLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_UserToLinks(UserToLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
	}
	
	[Table(Name="dbo.LinkSuggestion")]
	public partial class LinkSuggestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkSuggestionRef;
		
		private string _LinkUrl;
		
		private string _Description;
		
		private int _CategoryRef;
		
		private int _UserRef;
		
		private System.DateTime _LinkSuggestionDate;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkSuggestionRefChanging(int value);
    partial void OnLinkSuggestionRefChanged();
    partial void OnLinkUrlChanging(string value);
    partial void OnLinkUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryRefChanging(int value);
    partial void OnCategoryRefChanged();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    partial void OnLinkSuggestionDateChanging(System.DateTime value);
    partial void OnLinkSuggestionDateChanged();
    #endregion
		
		public LinkSuggestion()
		{
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_LinkSuggestionRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkSuggestionRef
		{
			get
			{
				return this._LinkSuggestionRef;
			}
			set
			{
				if ((this._LinkSuggestionRef != value))
				{
					this.OnLinkSuggestionRefChanging(value);
					this.SendPropertyChanging();
					this._LinkSuggestionRef = value;
					this.SendPropertyChanged("LinkSuggestionRef");
					this.OnLinkSuggestionRefChanged();
				}
			}
		}
		
		[Column(Storage="_LinkUrl", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LinkUrl
		{
			get
			{
				return this._LinkUrl;
			}
			set
			{
				if ((this._LinkUrl != value))
				{
					this.OnLinkUrlChanging(value);
					this.SendPropertyChanging();
					this._LinkUrl = value;
					this.SendPropertyChanged("LinkUrl");
					this.OnLinkUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryRef", DbType="Int NOT NULL")]
		public int CategoryRef
		{
			get
			{
				return this._CategoryRef;
			}
			set
			{
				if ((this._CategoryRef != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryRefChanging(value);
					this.SendPropertyChanging();
					this._CategoryRef = value;
					this.SendPropertyChanged("CategoryRef");
					this.OnCategoryRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL")]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_LinkSuggestionDate", DbType="DateTime NOT NULL")]
		public System.DateTime LinkSuggestionDate
		{
			get
			{
				return this._LinkSuggestionDate;
			}
			set
			{
				if ((this._LinkSuggestionDate != value))
				{
					this.OnLinkSuggestionDateChanging(value);
					this.SendPropertyChanging();
					this._LinkSuggestionDate = value;
					this.SendPropertyChanged("LinkSuggestionDate");
					this.OnLinkSuggestionDateChanged();
				}
			}
		}
		
		[Association(Name="FK_LinkSuggestion_Category", Storage="_Category", ThisKey="CategoryRef", OtherKey="CategoryRef", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.LinkSuggestions.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.LinkSuggestions.Add(this);
						this._CategoryRef = value.CategoryRef;
					}
					else
					{
						this._CategoryRef = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="FK_LinkSuggestion_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LinkSuggestions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LinkSuggestions.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MenuItem")]
	public partial class MenuItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuItemRef;
		
		private int _MenuLevel;
		
		private System.Nullable<int> _ParentRef;
		
		private string _MenuText;
		
		private string _ResourceKey;
		
		private bool _Visible;
		
		private string _PageUrl;
		
		private System.Nullable<int> _SortOrder;
		
		private EntityRef<MenuItem> _ParentRefMenuItem;
		
		private EntitySet<MenuItem> _MenuItemRefMenuItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuItemRefChanging(int value);
    partial void OnMenuItemRefChanged();
    partial void OnMenuLevelChanging(int value);
    partial void OnMenuLevelChanged();
    partial void OnParentRefChanging(System.Nullable<int> value);
    partial void OnParentRefChanged();
    partial void OnMenuTextChanging(string value);
    partial void OnMenuTextChanged();
    partial void OnResourceKeyChanging(string value);
    partial void OnResourceKeyChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnPageUrlChanging(string value);
    partial void OnPageUrlChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    #endregion
		
		public MenuItem()
		{
			this._ParentRefMenuItem = default(EntityRef<MenuItem>);
			this._MenuItemRefMenuItems = new EntitySet<MenuItem>(new Action<MenuItem>(this.attach_MenuItemRefMenuItems), new Action<MenuItem>(this.detach_MenuItemRefMenuItems));
			OnCreated();
		}
		
		[Column(Storage="_MenuItemRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MenuItemRef
		{
			get
			{
				return this._MenuItemRef;
			}
			set
			{
				if ((this._MenuItemRef != value))
				{
					this.OnMenuItemRefChanging(value);
					this.SendPropertyChanging();
					this._MenuItemRef = value;
					this.SendPropertyChanged("MenuItemRef");
					this.OnMenuItemRefChanged();
				}
			}
		}
		
		[Column(Storage="_MenuLevel", DbType="Int NOT NULL")]
		public int MenuLevel
		{
			get
			{
				return this._MenuLevel;
			}
			set
			{
				if ((this._MenuLevel != value))
				{
					this.OnMenuLevelChanging(value);
					this.SendPropertyChanging();
					this._MenuLevel = value;
					this.SendPropertyChanged("MenuLevel");
					this.OnMenuLevelChanged();
				}
			}
		}
		
		[Column(Storage="_ParentRef", DbType="Int")]
		public System.Nullable<int> ParentRef
		{
			get
			{
				return this._ParentRef;
			}
			set
			{
				if ((this._ParentRef != value))
				{
					if (this._ParentRefMenuItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRefChanging(value);
					this.SendPropertyChanging();
					this._ParentRef = value;
					this.SendPropertyChanged("ParentRef");
					this.OnParentRefChanged();
				}
			}
		}
		
		[Column(Storage="_MenuText", DbType="VarChar(50)")]
		public string MenuText
		{
			get
			{
				return this._MenuText;
			}
			set
			{
				if ((this._MenuText != value))
				{
					this.OnMenuTextChanging(value);
					this.SendPropertyChanging();
					this._MenuText = value;
					this.SendPropertyChanged("MenuText");
					this.OnMenuTextChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceKey", DbType="VarChar(50)")]
		public string ResourceKey
		{
			get
			{
				return this._ResourceKey;
			}
			set
			{
				if ((this._ResourceKey != value))
				{
					this.OnResourceKeyChanging(value);
					this.SendPropertyChanging();
					this._ResourceKey = value;
					this.SendPropertyChanged("ResourceKey");
					this.OnResourceKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_PageUrl", DbType="VarChar(50)")]
		public string PageUrl
		{
			get
			{
				return this._PageUrl;
			}
			set
			{
				if ((this._PageUrl != value))
				{
					this.OnPageUrlChanging(value);
					this.SendPropertyChanging();
					this._PageUrl = value;
					this.SendPropertyChanged("PageUrl");
					this.OnPageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Association(Name="FK_MenuItem_MenuItem", Storage="_ParentRefMenuItem", ThisKey="ParentRef", OtherKey="MenuItemRef", IsForeignKey=true)]
		public MenuItem ParentRefMenuItem
		{
			get
			{
				return this._ParentRefMenuItem.Entity;
			}
			set
			{
				MenuItem previousValue = this._ParentRefMenuItem.Entity;
				if (((previousValue != value) 
							|| (this._ParentRefMenuItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentRefMenuItem.Entity = null;
						previousValue.MenuItemRefMenuItems.Remove(this);
					}
					this._ParentRefMenuItem.Entity = value;
					if ((value != null))
					{
						value.MenuItemRefMenuItems.Add(this);
						this._ParentRef = value.MenuItemRef;
					}
					else
					{
						this._ParentRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentRefMenuItem");
				}
			}
		}
		
		[Association(Name="FK_MenuItem_MenuItem", Storage="_MenuItemRefMenuItems", ThisKey="MenuItemRef", OtherKey="ParentRef", DeleteRule="NO ACTION")]
		public EntitySet<MenuItem> MenuItemRefMenuItems
		{
			get
			{
				return this._MenuItemRefMenuItems;
			}
			set
			{
				this._MenuItemRefMenuItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuItemRefMenuItems(MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.ParentRefMenuItem = this;
		}
		
		private void detach_MenuItemRefMenuItems(MenuItem entity)
		{
			this.SendPropertyChanging();
			entity.ParentRefMenuItem = null;
		}
	}
	
	[Table(Name="dbo.PasswordReset")]
	public partial class PasswordReset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PasswordResetRef;
		
		private string _ResetIdentyfier;
		
		private int _UserRef;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPasswordResetRefChanging(int value);
    partial void OnPasswordResetRefChanged();
    partial void OnResetIdentyfierChanging(string value);
    partial void OnResetIdentyfierChanged();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    #endregion
		
		public PasswordReset()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PasswordResetRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PasswordResetRef
		{
			get
			{
				return this._PasswordResetRef;
			}
			set
			{
				if ((this._PasswordResetRef != value))
				{
					this.OnPasswordResetRefChanging(value);
					this.SendPropertyChanging();
					this._PasswordResetRef = value;
					this.SendPropertyChanged("PasswordResetRef");
					this.OnPasswordResetRefChanged();
				}
			}
		}
		
		[Column(Storage="_ResetIdentyfier", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string ResetIdentyfier
		{
			get
			{
				return this._ResetIdentyfier;
			}
			set
			{
				if ((this._ResetIdentyfier != value))
				{
					this.OnResetIdentyfierChanging(value);
					this.SendPropertyChanging();
					this._ResetIdentyfier = value;
					this.SendPropertyChanged("ResetIdentyfier");
					this.OnResetIdentyfierChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL")]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Association(Name="FK_PasswordReset_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PasswordResets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PasswordResets.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Poll")]
	public partial class Poll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PollRef;
		
		private string _PollName;
		
		private string _Description;
		
		private System.DateTime _CreateDate;
		
		private bool _IsActive;
		
		private EntitySet<PollOption> _PollOptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPollRefChanging(int value);
    partial void OnPollRefChanged();
    partial void OnPollNameChanging(string value);
    partial void OnPollNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Poll()
		{
			this._PollOptions = new EntitySet<PollOption>(new Action<PollOption>(this.attach_PollOptions), new Action<PollOption>(this.detach_PollOptions));
			OnCreated();
		}
		
		[Column(Storage="_PollRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PollRef
		{
			get
			{
				return this._PollRef;
			}
			set
			{
				if ((this._PollRef != value))
				{
					this.OnPollRefChanging(value);
					this.SendPropertyChanging();
					this._PollRef = value;
					this.SendPropertyChanged("PollRef");
					this.OnPollRefChanged();
				}
			}
		}
		
		[Column(Storage="_PollName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PollName
		{
			get
			{
				return this._PollName;
			}
			set
			{
				if ((this._PollName != value))
				{
					this.OnPollNameChanging(value);
					this.SendPropertyChanging();
					this._PollName = value;
					this.SendPropertyChanged("PollName");
					this.OnPollNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Association(Name="FK_PollOption_Poll", Storage="_PollOptions", ThisKey="PollRef", OtherKey="PollRef", DeleteRule="NO ACTION")]
		public EntitySet<PollOption> PollOptions
		{
			get
			{
				return this._PollOptions;
			}
			set
			{
				this._PollOptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PollOptions(PollOption entity)
		{
			this.SendPropertyChanging();
			entity.Poll = this;
		}
		
		private void detach_PollOptions(PollOption entity)
		{
			this.SendPropertyChanging();
			entity.Poll = null;
		}
	}
	
	[Table(Name="dbo.PollOption")]
	public partial class PollOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PollOptionRef;
		
		private int _PollRef;
		
		private string _OptionName;
		
		private System.Nullable<int> _SortOrder;
		
		private double _Rating;
		
		private EntityRef<Poll> _Poll;
		
		private EntitySet<UserToPollOption> _UserToPollOptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPollOptionRefChanging(int value);
    partial void OnPollOptionRefChanged();
    partial void OnPollRefChanging(int value);
    partial void OnPollRefChanged();
    partial void OnOptionNameChanging(string value);
    partial void OnOptionNameChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnRatingChanging(double value);
    partial void OnRatingChanged();
    #endregion
		
		public PollOption()
		{
			this._Poll = default(EntityRef<Poll>);
			this._UserToPollOptions = new EntitySet<UserToPollOption>(new Action<UserToPollOption>(this.attach_UserToPollOptions), new Action<UserToPollOption>(this.detach_UserToPollOptions));
			OnCreated();
		}
		
		[Column(Storage="_PollOptionRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PollOptionRef
		{
			get
			{
				return this._PollOptionRef;
			}
			set
			{
				if ((this._PollOptionRef != value))
				{
					this.OnPollOptionRefChanging(value);
					this.SendPropertyChanging();
					this._PollOptionRef = value;
					this.SendPropertyChanged("PollOptionRef");
					this.OnPollOptionRefChanged();
				}
			}
		}
		
		[Column(Storage="_PollRef", DbType="Int NOT NULL")]
		public int PollRef
		{
			get
			{
				return this._PollRef;
			}
			set
			{
				if ((this._PollRef != value))
				{
					if (this._Poll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollRefChanging(value);
					this.SendPropertyChanging();
					this._PollRef = value;
					this.SendPropertyChanged("PollRef");
					this.OnPollRefChanged();
				}
			}
		}
		
		[Column(Storage="_OptionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OptionName
		{
			get
			{
				return this._OptionName;
			}
			set
			{
				if ((this._OptionName != value))
				{
					this.OnOptionNameChanging(value);
					this.SendPropertyChanging();
					this._OptionName = value;
					this.SendPropertyChanged("OptionName");
					this.OnOptionNameChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Float NOT NULL")]
		public double Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="FK_PollOption_Poll", Storage="_Poll", ThisKey="PollRef", OtherKey="PollRef", IsForeignKey=true)]
		public Poll Poll
		{
			get
			{
				return this._Poll.Entity;
			}
			set
			{
				Poll previousValue = this._Poll.Entity;
				if (((previousValue != value) 
							|| (this._Poll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poll.Entity = null;
						previousValue.PollOptions.Remove(this);
					}
					this._Poll.Entity = value;
					if ((value != null))
					{
						value.PollOptions.Add(this);
						this._PollRef = value.PollRef;
					}
					else
					{
						this._PollRef = default(int);
					}
					this.SendPropertyChanged("Poll");
				}
			}
		}
		
		[Association(Name="FK_UserToPollOption_PollOption", Storage="_UserToPollOptions", ThisKey="PollOptionRef", OtherKey="PollOptionRef", DeleteRule="NO ACTION")]
		public EntitySet<UserToPollOption> UserToPollOptions
		{
			get
			{
				return this._UserToPollOptions;
			}
			set
			{
				this._UserToPollOptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserToPollOptions(UserToPollOption entity)
		{
			this.SendPropertyChanging();
			entity.PollOption = this;
		}
		
		private void detach_UserToPollOptions(UserToPollOption entity)
		{
			this.SendPropertyChanging();
			entity.PollOption = null;
		}
	}
	
	[Table(Name="dbo.RandomImage")]
	public partial class RandomImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageRef;
		
		private string _FileName;
		
		private string _ImageId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageRefChanging(int value);
    partial void OnImageRefChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnImageIdChanging(string value);
    partial void OnImageIdChanged();
    #endregion
		
		public RandomImage()
		{
			OnCreated();
		}
		
		[Column(Storage="_ImageRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageRef
		{
			get
			{
				return this._ImageRef;
			}
			set
			{
				if ((this._ImageRef != value))
				{
					this.OnImageRefChanging(value);
					this.SendPropertyChanging();
					this._ImageRef = value;
					this.SendPropertyChanged("ImageRef");
					this.OnImageRefChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_ImageId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _KeyType;
		
		private string _Description;
		
		private string _Value;
		
		private System.Nullable<CuplexLib.SettingsDataType> _DataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyTypeChanging(string value);
    partial void OnKeyTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDataTypeChanging(System.Nullable<CuplexLib.SettingsDataType> value);
    partial void OnDataTypeChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[Column(Storage="_KeyType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string KeyType
		{
			get
			{
				return this._KeyType;
			}
			set
			{
				if ((this._KeyType != value))
				{
					this.OnKeyTypeChanging(value);
					this.SendPropertyChanging();
					this._KeyType = value;
					this.SendPropertyChanged("KeyType");
					this.OnKeyTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_DataType", DbType="Int", CanBeNull=true)]
		public System.Nullable<CuplexLib.SettingsDataType> DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SiteLink")]
	public partial class SiteLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteLinkRef;
		
		private string _SiteLinkURL;
		
		private string _SiteLinkName;
		
		private string _Description;
		
		private string _ResourceKey;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteLinkRefChanging(int value);
    partial void OnSiteLinkRefChanged();
    partial void OnSiteLinkURLChanging(string value);
    partial void OnSiteLinkURLChanged();
    partial void OnSiteLinkNameChanging(string value);
    partial void OnSiteLinkNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnResourceKeyChanging(string value);
    partial void OnResourceKeyChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public SiteLink()
		{
			OnCreated();
		}
		
		[Column(Storage="_SiteLinkRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SiteLinkRef
		{
			get
			{
				return this._SiteLinkRef;
			}
			set
			{
				if ((this._SiteLinkRef != value))
				{
					this.OnSiteLinkRefChanging(value);
					this.SendPropertyChanging();
					this._SiteLinkRef = value;
					this.SendPropertyChanged("SiteLinkRef");
					this.OnSiteLinkRefChanged();
				}
			}
		}
		
		[Column(Storage="_SiteLinkURL", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string SiteLinkURL
		{
			get
			{
				return this._SiteLinkURL;
			}
			set
			{
				if ((this._SiteLinkURL != value))
				{
					this.OnSiteLinkURLChanging(value);
					this.SendPropertyChanging();
					this._SiteLinkURL = value;
					this.SendPropertyChanged("SiteLinkURL");
					this.OnSiteLinkURLChanged();
				}
			}
		}
		
		[Column(Storage="_SiteLinkName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SiteLinkName
		{
			get
			{
				return this._SiteLinkName;
			}
			set
			{
				if ((this._SiteLinkName != value))
				{
					this.OnSiteLinkNameChanging(value);
					this.SendPropertyChanging();
					this._SiteLinkName = value;
					this.SendPropertyChanged("SiteLinkName");
					this.OnSiteLinkNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceKey", DbType="VarChar(50)")]
		public string ResourceKey
		{
			get
			{
				return this._ResourceKey;
			}
			set
			{
				if ((this._ResourceKey != value))
				{
					this.OnResourceKeyChanging(value);
					this.SendPropertyChanging();
					this._ResourceKey = value;
					this.SendPropertyChanged("ResourceKey");
					this.OnResourceKeyChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRef;
		
		private string _UserName;
		
		private System.Nullable<System.DateTime> _Deleted;
		
		private string _PasswordHash;
		
		private string _EmailAddress;
		
		private bool _IsAdmin;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private EntitySet<Bookmark> _Bookmarks;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<EventLog> _EventLogs;
		
		private EntitySet<Link> _Links;
		
		private EntitySet<LinkSuggestion> _LinkSuggestions;
		
		private EntitySet<PasswordReset> _PasswordResets;
		
		private EntitySet<UserToLink> _UserToLinks;
		
		private EntitySet<UserToPollOption> _UserToPollOptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    #endregion
		
		public User()
		{
			this._Bookmarks = new EntitySet<Bookmark>(new Action<Bookmark>(this.attach_Bookmarks), new Action<Bookmark>(this.detach_Bookmarks));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._EventLogs = new EntitySet<EventLog>(new Action<EventLog>(this.attach_EventLogs), new Action<EventLog>(this.detach_EventLogs));
			this._Links = new EntitySet<Link>(new Action<Link>(this.attach_Links), new Action<Link>(this.detach_Links));
			this._LinkSuggestions = new EntitySet<LinkSuggestion>(new Action<LinkSuggestion>(this.attach_LinkSuggestions), new Action<LinkSuggestion>(this.detach_LinkSuggestions));
			this._PasswordResets = new EntitySet<PasswordReset>(new Action<PasswordReset>(this.attach_PasswordResets), new Action<PasswordReset>(this.detach_PasswordResets));
			this._UserToLinks = new EntitySet<UserToLink>(new Action<UserToLink>(this.attach_UserToLinks), new Action<UserToLink>(this.detach_UserToLinks));
			this._UserToPollOptions = new EntitySet<UserToPollOption>(new Action<UserToPollOption>(this.attach_UserToPollOptions), new Action<UserToPollOption>(this.detach_UserToPollOptions));
			OnCreated();
		}
		
		[Column(Storage="_UserRef", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="VarChar(500)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[Column(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[Association(Name="FK_Bookmark_User", Storage="_Bookmarks", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<Bookmark> Bookmarks
		{
			get
			{
				return this._Bookmarks;
			}
			set
			{
				this._Bookmarks.Assign(value);
			}
		}
		
		[Association(Name="FK_Comment_User", Storage="_Comments", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="FK_EventLog_User", Storage="_EventLogs", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<EventLog> EventLogs
		{
			get
			{
				return this._EventLogs;
			}
			set
			{
				this._EventLogs.Assign(value);
			}
		}
		
		[Association(Name="FK_Link_User", Storage="_Links", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<Link> Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				this._Links.Assign(value);
			}
		}
		
		[Association(Name="FK_LinkSuggestion_User", Storage="_LinkSuggestions", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<LinkSuggestion> LinkSuggestions
		{
			get
			{
				return this._LinkSuggestions;
			}
			set
			{
				this._LinkSuggestions.Assign(value);
			}
		}
		
		[Association(Name="FK_PasswordReset_User", Storage="_PasswordResets", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<PasswordReset> PasswordResets
		{
			get
			{
				return this._PasswordResets;
			}
			set
			{
				this._PasswordResets.Assign(value);
			}
		}
		
		[Association(Name="FK_UserToLink_User", Storage="_UserToLinks", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<UserToLink> UserToLinks
		{
			get
			{
				return this._UserToLinks;
			}
			set
			{
				this._UserToLinks.Assign(value);
			}
		}
		
		[Association(Name="FK_UserToPollOption_User", Storage="_UserToPollOptions", ThisKey="UserRef", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<UserToPollOption> UserToPollOptions
		{
			get
			{
				return this._UserToPollOptions;
			}
			set
			{
				this._UserToPollOptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookmarks(Bookmark entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Bookmarks(Bookmark entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventLogs(EventLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventLogs(EventLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LinkSuggestions(LinkSuggestion entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LinkSuggestions(LinkSuggestion entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PasswordResets(PasswordReset entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PasswordResets(PasswordReset entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserToLinks(UserToLink entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserToLinks(UserToLink entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserToPollOptions(UserToPollOption entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserToPollOptions(UserToPollOption entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UserToLink")]
	public partial class UserToLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkRef;
		
		private int _UserRef;
		
		private int _Rating;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkRefChanging(int value);
    partial void OnLinkRefChanged();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
		
		public UserToLink()
		{
			this._Link = default(EntityRef<Link>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_LinkRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LinkRef
		{
			get
			{
				return this._LinkRef;
			}
			set
			{
				if ((this._LinkRef != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkRefChanging(value);
					this.SendPropertyChanging();
					this._LinkRef = value;
					this.SendPropertyChanged("LinkRef");
					this.OnLinkRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Association(Name="FK_UserToLink_Link", Storage="_Link", ThisKey="LinkRef", OtherKey="LinkRef", IsForeignKey=true)]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.UserToLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.UserToLinks.Add(this);
						this._LinkRef = value.LinkRef;
					}
					else
					{
						this._LinkRef = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[Association(Name="FK_UserToLink_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserToLinks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserToLinks.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserToPollOption")]
	public partial class UserToPollOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PollOptionRef;
		
		private int _UserRef;
		
		private System.DateTime _RateDate;
		
		private EntityRef<PollOption> _PollOption;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPollOptionRefChanging(int value);
    partial void OnPollOptionRefChanged();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    partial void OnRateDateChanging(System.DateTime value);
    partial void OnRateDateChanged();
    #endregion
		
		public UserToPollOption()
		{
			this._PollOption = default(EntityRef<PollOption>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PollOptionRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PollOptionRef
		{
			get
			{
				return this._PollOptionRef;
			}
			set
			{
				if ((this._PollOptionRef != value))
				{
					if (this._PollOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPollOptionRefChanging(value);
					this.SendPropertyChanging();
					this._PollOptionRef = value;
					this.SendPropertyChanged("PollOptionRef");
					this.OnPollOptionRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_RateDate", DbType="DateTime NOT NULL")]
		public System.DateTime RateDate
		{
			get
			{
				return this._RateDate;
			}
			set
			{
				if ((this._RateDate != value))
				{
					this.OnRateDateChanging(value);
					this.SendPropertyChanging();
					this._RateDate = value;
					this.SendPropertyChanged("RateDate");
					this.OnRateDateChanged();
				}
			}
		}
		
		[Association(Name="FK_UserToPollOption_PollOption", Storage="_PollOption", ThisKey="PollOptionRef", OtherKey="PollOptionRef", IsForeignKey=true)]
		public PollOption PollOption
		{
			get
			{
				return this._PollOption.Entity;
			}
			set
			{
				PollOption previousValue = this._PollOption.Entity;
				if (((previousValue != value) 
							|| (this._PollOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PollOption.Entity = null;
						previousValue.UserToPollOptions.Remove(this);
					}
					this._PollOption.Entity = value;
					if ((value != null))
					{
						value.UserToPollOptions.Add(this);
						this._PollOptionRef = value.PollOptionRef;
					}
					else
					{
						this._PollOptionRef = default(int);
					}
					this.SendPropertyChanged("PollOption");
				}
			}
		}
		
		[Association(Name="FK_UserToPollOption_User", Storage="_User", ThisKey="UserRef", OtherKey="UserRef", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserToPollOptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserToPollOptions.Add(this);
						this._UserRef = value.UserRef;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
