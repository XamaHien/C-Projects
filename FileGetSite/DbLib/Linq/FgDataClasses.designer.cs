#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:2.0.50727.5472
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileGetDbLib.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FileGet")]
	public partial class FgDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFileDownload(FileDownload instance);
    partial void UpdateFileDownload(FileDownload instance);
    partial void DeleteFileDownload(FileDownload instance);
    partial void InsertFileShare(FileShare instance);
    partial void UpdateFileShare(FileShare instance);
    partial void DeleteFileShare(FileShare instance);
    #endregion
		
		public FgDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FgDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FgDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FgDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FileDownload> FileDownloads
		{
			get
			{
				return this.GetTable<FileDownload>();
			}
		}
		
		public System.Data.Linq.Table<FileShare> FileShares
		{
			get
			{
				return this.GetTable<FileShare>();
			}
		}
	}
	
	[Table(Name="dbo.FileDownload")]
	public partial class FileDownload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileDownloadId;
		
		private string _FileShareId;
		
		private string _FilePath;
		
		private System.DateTime _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileDownloadIdChanging(int value);
    partial void OnFileDownloadIdChanged();
    partial void OnFileShareIdChanging(string value);
    partial void OnFileShareIdChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    #endregion
		
		public FileDownload()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileDownloadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileDownloadId
		{
			get
			{
				return this._FileDownloadId;
			}
			set
			{
				if ((this._FileDownloadId != value))
				{
					this.OnFileDownloadIdChanging(value);
					this.SendPropertyChanging();
					this._FileDownloadId = value;
					this.SendPropertyChanged("FileDownloadId");
					this.OnFileDownloadIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileShareId", DbType="Char(64) NOT NULL", CanBeNull=false)]
		public string FileShareId
		{
			get
			{
				return this._FileShareId;
			}
			set
			{
				if ((this._FileShareId != value))
				{
					this.OnFileShareIdChanging(value);
					this.SendPropertyChanging();
					this._FileShareId = value;
					this.SendPropertyChanged("FileShareId");
					this.OnFileShareIdChanged();
				}
			}
		}
		
		[Column(Storage="_FilePath", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FileShare")]
	public partial class FileShare : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FileShareId;
		
		private string _FilePath;
		
		private System.DateTime _ValidUntil;
		
		private bool _IsDirectory;
		
		private bool _IncludeSubdirs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileShareIdChanging(string value);
    partial void OnFileShareIdChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnValidUntilChanging(System.DateTime value);
    partial void OnValidUntilChanged();
    partial void OnIsDirectoryChanging(bool value);
    partial void OnIsDirectoryChanged();
    partial void OnIncludeSubdirsChanging(bool value);
    partial void OnIncludeSubdirsChanged();
    #endregion
		
		public FileShare()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileShareId", DbType="Char(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FileShareId
		{
			get
			{
				return this._FileShareId;
			}
			set
			{
				if ((this._FileShareId != value))
				{
					this.OnFileShareIdChanging(value);
					this.SendPropertyChanging();
					this._FileShareId = value;
					this.SendPropertyChanged("FileShareId");
					this.OnFileShareIdChanged();
				}
			}
		}
		
		[Column(Storage="_FilePath", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[Column(Storage="_ValidUntil", DbType="DateTime NOT NULL")]
		public System.DateTime ValidUntil
		{
			get
			{
				return this._ValidUntil;
			}
			set
			{
				if ((this._ValidUntil != value))
				{
					this.OnValidUntilChanging(value);
					this.SendPropertyChanging();
					this._ValidUntil = value;
					this.SendPropertyChanged("ValidUntil");
					this.OnValidUntilChanged();
				}
			}
		}
		
		[Column(Storage="_IsDirectory", DbType="Bit NOT NULL")]
		public bool IsDirectory
		{
			get
			{
				return this._IsDirectory;
			}
			set
			{
				if ((this._IsDirectory != value))
				{
					this.OnIsDirectoryChanging(value);
					this.SendPropertyChanging();
					this._IsDirectory = value;
					this.SendPropertyChanged("IsDirectory");
					this.OnIsDirectoryChanged();
				}
			}
		}
		
		[Column(Storage="_IncludeSubdirs", DbType="Bit NOT NULL")]
		public bool IncludeSubdirs
		{
			get
			{
				return this._IncludeSubdirs;
			}
			set
			{
				if ((this._IncludeSubdirs != value))
				{
					this.OnIncludeSubdirsChanging(value);
					this.SendPropertyChanging();
					this._IncludeSubdirs = value;
					this.SendPropertyChanged("IncludeSubdirs");
					this.OnIncludeSubdirsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
