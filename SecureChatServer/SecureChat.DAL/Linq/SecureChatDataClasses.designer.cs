#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:4.0.30319.34209
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Toyota.TMHE.TPC.DAL.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SecureChat")]
	public partial class SecureChatDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChatMessage(ChatMessage instance);
    partial void UpdateChatMessage(ChatMessage instance);
    partial void DeleteChatMessage(ChatMessage instance);
    partial void InsertChatUser(ChatUser instance);
    partial void UpdateChatUser(ChatUser instance);
    partial void DeleteChatUser(ChatUser instance);
    partial void InsertChatUserAccount(ChatUserAccount instance);
    partial void UpdateChatUserAccount(ChatUserAccount instance);
    partial void DeleteChatUserAccount(ChatUserAccount instance);
    partial void InsertEventLog(EventLog instance);
    partial void UpdateEventLog(EventLog instance);
    partial void DeleteEventLog(EventLog instance);
    partial void InsertServerSetting(ServerSetting instance);
    partial void UpdateServerSetting(ServerSetting instance);
    partial void DeleteServerSetting(ServerSetting instance);
    #endregion
		
		public SecureChatDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecureChatDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecureChatDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecureChatDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChatMessage> ChatMessages
		{
			get
			{
				return this.GetTable<ChatMessage>();
			}
		}
		
		public System.Data.Linq.Table<ChatUser> ChatUsers
		{
			get
			{
				return this.GetTable<ChatUser>();
			}
		}
		
		public System.Data.Linq.Table<ChatUserAccount> ChatUserAccounts
		{
			get
			{
				return this.GetTable<ChatUserAccount>();
			}
		}
		
		public System.Data.Linq.Table<EventLog> EventLogs
		{
			get
			{
				return this.GetTable<EventLog>();
			}
		}
		
		public System.Data.Linq.Table<ServerSetting> ServerSettings
		{
			get
			{
				return this.GetTable<ServerSetting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatMessage")]
	public partial class ChatMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _TimeStamp;
		
		private string _Message;
		
		private int _ReceiverUserId;
		
		private int _SenderUserId;
		
		private bool _Deleted;
		
		private EntityRef<ChatUser> _ChatUser;
		
		private EntityRef<ChatUser> _SenderUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnReceiverUserIdChanging(int value);
    partial void OnReceiverUserIdChanged();
    partial void OnSenderUserIdChanging(int value);
    partial void OnSenderUserIdChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public ChatMessage()
		{
			this._ChatUser = default(EntityRef<ChatUser>);
			this._SenderUser = default(EntityRef<ChatUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverUserId", DbType="Int NOT NULL")]
		public int ReceiverUserId
		{
			get
			{
				return this._ReceiverUserId;
			}
			set
			{
				if ((this._ReceiverUserId != value))
				{
					if (this._ChatUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverUserIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverUserId = value;
					this.SendPropertyChanged("ReceiverUserId");
					this.OnReceiverUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderUserId", DbType="Int NOT NULL")]
		public int SenderUserId
		{
			get
			{
				return this._SenderUserId;
			}
			set
			{
				if ((this._SenderUserId != value))
				{
					if (this._SenderUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderUserIdChanging(value);
					this.SendPropertyChanging();
					this._SenderUserId = value;
					this.SendPropertyChanged("SenderUserId");
					this.OnSenderUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ChatMessage_ChatUser_Receiver", Storage="_ChatUser", ThisKey="ReceiverUserId", OtherKey="Id", IsForeignKey=true)]
		public ChatUser ChatUser
		{
			get
			{
				return this._ChatUser.Entity;
			}
			set
			{
				ChatUser previousValue = this._ChatUser.Entity;
				if (((previousValue != value) 
							|| (this._ChatUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatUser.Entity = null;
						previousValue.ChatMessages.Remove(this);
					}
					this._ChatUser.Entity = value;
					if ((value != null))
					{
						value.ChatMessages.Add(this);
						this._ReceiverUserId = value.Id;
					}
					else
					{
						this._ReceiverUserId = default(int);
					}
					this.SendPropertyChanged("ChatUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ChatMessage_ChatUser_Sender", Storage="_SenderUser", ThisKey="SenderUserId", OtherKey="Id", IsForeignKey=true)]
		public ChatUser SenderUser
		{
			get
			{
				return this._SenderUser.Entity;
			}
			set
			{
				ChatUser previousValue = this._SenderUser.Entity;
				if (((previousValue != value) 
							|| (this._SenderUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SenderUser.Entity = null;
						previousValue.ChatMessage_ChatUser_Senders.Remove(this);
					}
					this._SenderUser.Entity = value;
					if ((value != null))
					{
						value.ChatMessage_ChatUser_Senders.Add(this);
						this._SenderUserId = value.Id;
					}
					else
					{
						this._SenderUserId = default(int);
					}
					this.SendPropertyChanged("SenderUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatUser")]
	public partial class ChatUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nickname;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastOnline;
		
		private string _GUID;
		
		private int _Status;
		
		private bool _Hidden;
		
		private bool _Deleted;
		
		private EntitySet<ChatMessage> _ChatMessages;
		
		private EntitySet<ChatMessage> _ChatMessage_ChatUser_Senders;
		
		private EntityRef<ChatUserAccount> _ChatUserAccount;
		
		private EntitySet<EventLog> _EventLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastOnlineChanging(System.DateTime value);
    partial void OnLastOnlineChanged();
    partial void OnGUIDChanging(string value);
    partial void OnGUIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnHiddenChanging(bool value);
    partial void OnHiddenChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public ChatUser()
		{
			this._ChatMessages = new EntitySet<ChatMessage>(new Action<ChatMessage>(this.attach_ChatMessages), new Action<ChatMessage>(this.detach_ChatMessages));
			this._ChatMessage_ChatUser_Senders = new EntitySet<ChatMessage>(new Action<ChatMessage>(this.attach_ChatMessage_ChatUser_Senders), new Action<ChatMessage>(this.detach_ChatMessage_ChatUser_Senders));
			this._ChatUserAccount = default(EntityRef<ChatUserAccount>);
			this._EventLogs = new EntitySet<EventLog>(new Action<EventLog>(this.attach_EventLogs), new Action<EventLog>(this.detach_EventLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastOnline", DbType="DateTime NOT NULL")]
		public System.DateTime LastOnline
		{
			get
			{
				return this._LastOnline;
			}
			set
			{
				if ((this._LastOnline != value))
				{
					this.OnLastOnlineChanging(value);
					this.SendPropertyChanging();
					this._LastOnline = value;
					this.SendPropertyChanged("LastOnline");
					this.OnLastOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit NOT NULL")]
		public bool Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ChatMessage_ChatUser_Receiver", Storage="_ChatMessages", ThisKey="Id", OtherKey="ReceiverUserId", DeleteRule="NO ACTION")]
		public EntitySet<ChatMessage> ChatMessages
		{
			get
			{
				return this._ChatMessages;
			}
			set
			{
				this._ChatMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ChatMessage_ChatUser_Sender", Storage="_ChatMessage_ChatUser_Senders", ThisKey="Id", OtherKey="SenderUserId", DeleteRule="NO ACTION")]
		public EntitySet<ChatMessage> ChatMessage_ChatUser_Senders
		{
			get
			{
				return this._ChatMessage_ChatUser_Senders;
			}
			set
			{
				this._ChatMessage_ChatUser_Senders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ChatUserAccount_ChatUser", Storage="_ChatUserAccount", ThisKey="Id", OtherKey="UserId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public ChatUserAccount ChatUserAccount
		{
			get
			{
				return this._ChatUserAccount.Entity;
			}
			set
			{
				ChatUserAccount previousValue = this._ChatUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ChatUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatUserAccount.Entity = null;
						previousValue.ChatUser = null;
					}
					this._ChatUserAccount.Entity = value;
					if ((value != null))
					{
						value.ChatUser = this;
					}
					this.SendPropertyChanged("ChatUserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventLog_ChatUser", Storage="_EventLogs", ThisKey="Id", OtherKey="ChatUserId", DeleteRule="NO ACTION")]
		public EntitySet<EventLog> EventLogs
		{
			get
			{
				return this._EventLogs;
			}
			set
			{
				this._EventLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.ChatUser = this;
		}
		
		private void detach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.ChatUser = null;
		}
		
		private void attach_ChatMessage_ChatUser_Senders(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.SenderUser = this;
		}
		
		private void detach_ChatMessage_ChatUser_Senders(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.SenderUser = null;
		}
		
		private void attach_EventLogs(EventLog entity)
		{
			this.SendPropertyChanging();
			entity.ChatUser = this;
		}
		
		private void detach_EventLogs(EventLog entity)
		{
			this.SendPropertyChanging();
			entity.ChatUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatUserAccount")]
	public partial class ChatUserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserAccountData;
		
		private string _RestoreKey;
		
		private string _Salt;
		
		private EntityRef<ChatUser> _ChatUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserAccountDataChanging(string value);
    partial void OnUserAccountDataChanged();
    partial void OnRestoreKeyChanging(string value);
    partial void OnRestoreKeyChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    #endregion
		
		public ChatUserAccount()
		{
			this._ChatUser = default(EntityRef<ChatUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._ChatUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountData", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserAccountData
		{
			get
			{
				return this._UserAccountData;
			}
			set
			{
				if ((this._UserAccountData != value))
				{
					this.OnUserAccountDataChanging(value);
					this.SendPropertyChanging();
					this._UserAccountData = value;
					this.SendPropertyChanged("UserAccountData");
					this.OnUserAccountDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RestoreKey", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string RestoreKey
		{
			get
			{
				return this._RestoreKey;
			}
			set
			{
				if ((this._RestoreKey != value))
				{
					this.OnRestoreKeyChanging(value);
					this.SendPropertyChanging();
					this._RestoreKey = value;
					this.SendPropertyChanged("RestoreKey");
					this.OnRestoreKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ChatUserAccount_ChatUser", Storage="_ChatUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public ChatUser ChatUser
		{
			get
			{
				return this._ChatUser.Entity;
			}
			set
			{
				ChatUser previousValue = this._ChatUser.Entity;
				if (((previousValue != value) 
							|| (this._ChatUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatUser.Entity = null;
						previousValue.ChatUserAccount = null;
					}
					this._ChatUser.Entity = value;
					if ((value != null))
					{
						value.ChatUserAccount = this;
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("ChatUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventLog")]
	public partial class EventLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _TimeStamp;
		
		private string _InnerException;
		
		private string _StackTrace;
		
		private string _Text;
		
		private System.Nullable<int> _ChatUserId;
		
		private int _EventLevel;
		
		private int _EventType;
		
		private EntityRef<ChatUser> _ChatUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnInnerExceptionChanging(string value);
    partial void OnInnerExceptionChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnChatUserIdChanging(System.Nullable<int> value);
    partial void OnChatUserIdChanged();
    partial void OnEventLevelChanging(int value);
    partial void OnEventLevelChanged();
    partial void OnEventTypeChanging(int value);
    partial void OnEventTypeChanged();
    #endregion
		
		public EventLog()
		{
			this._ChatUser = default(EntityRef<ChatUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InnerException", DbType="VarChar(8000)")]
		public string InnerException
		{
			get
			{
				return this._InnerException;
			}
			set
			{
				if ((this._InnerException != value))
				{
					this.OnInnerExceptionChanging(value);
					this.SendPropertyChanging();
					this._InnerException = value;
					this.SendPropertyChanged("InnerException");
					this.OnInnerExceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="VarChar(8000)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatUserId", DbType="Int")]
		public System.Nullable<int> ChatUserId
		{
			get
			{
				return this._ChatUserId;
			}
			set
			{
				if ((this._ChatUserId != value))
				{
					if (this._ChatUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatUserIdChanging(value);
					this.SendPropertyChanging();
					this._ChatUserId = value;
					this.SendPropertyChanged("ChatUserId");
					this.OnChatUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventLevel", DbType="Int NOT NULL")]
		public int EventLevel
		{
			get
			{
				return this._EventLevel;
			}
			set
			{
				if ((this._EventLevel != value))
				{
					this.OnEventLevelChanging(value);
					this.SendPropertyChanging();
					this._EventLevel = value;
					this.SendPropertyChanged("EventLevel");
					this.OnEventLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="Int NOT NULL")]
		public int EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventLog_ChatUser", Storage="_ChatUser", ThisKey="ChatUserId", OtherKey="Id", IsForeignKey=true)]
		public ChatUser ChatUser
		{
			get
			{
				return this._ChatUser.Entity;
			}
			set
			{
				ChatUser previousValue = this._ChatUser.Entity;
				if (((previousValue != value) 
							|| (this._ChatUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatUser.Entity = null;
						previousValue.EventLogs.Remove(this);
					}
					this._ChatUser.Entity = value;
					if ((value != null))
					{
						value.EventLogs.Add(this);
						this._ChatUserId = value.Id;
					}
					else
					{
						this._ChatUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChatUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServerSetting")]
	public partial class ServerSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _KeyName;
		
		private string _Value;
		
		private string _Description;
		
		private int _DataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyNameChanging(string value);
    partial void OnKeyNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDataTypeChanging(int value);
    partial void OnDataTypeChanged();
    #endregion
		
		public ServerSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string KeyName
		{
			get
			{
				return this._KeyName;
			}
			set
			{
				if ((this._KeyName != value))
				{
					this.OnKeyNameChanging(value);
					this.SendPropertyChanging();
					this._KeyName = value;
					this.SendPropertyChanged("KeyName");
					this.OnKeyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int NOT NULL")]
		public int DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
